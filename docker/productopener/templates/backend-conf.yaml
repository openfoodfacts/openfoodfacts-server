apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "productopener.backend.fullname" . }}-config
  labels:
    app: {{ include "productopener.name" . }}
    chart: {{ include "productopener.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    component: {{ include "productopener.backend.fullname" . }}
data:
  apache.conf: |
    LoadModule perl_module modules/mod_perl.so
    ServerAdmin contact@{{ .Values.host }}
    PerlSwitches -I/opt/product-opener/lib -I/opt/perl/local/lib/perl5

    PerlWarn On
    PerlRequire /opt/product-opener/lib/startup_apache2.pl

    # log the X-Forwarded-For IP address (the client ip) in access_log
    LogFormat "%{X-Forwarded-For}i %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\"" proxy

    <Location /cgi>
      SetHandler perl-script
      PerlResponseHandler ModPerl::Registry
      PerlOptions +ParseHeaders
      Options +ExecCGI
      Require all granted
    </Location>

    <VirtualHost *>
      DocumentRoot /opt/product-opener/html
      ServerName {{ .Values.host }}
      LogLevel warn
      ScriptAlias /cgi/ "/opt/product-opener/cgi/"

      <Directory /opt/product-opener/lib/html>
        Require all granted
      </Directory>
    </VirtualHost>

    PerlPostReadRequestHandler My::ProxyRemoteAddr

  Config.pm: |
    package ProductOpener::Config;

    use utf8;
    use Modern::Perl '2017';
    use Exporter    qw< import >;

    BEGIN
    {
    	use vars       qw(@ISA @EXPORT @EXPORT_OK %EXPORT_TAGS);
    	@EXPORT = qw();
    	@EXPORT_OK = qw(
    		%string_normalization_for_lang
        %admins
    		%moderators

    		$server_domain
    		@ssl_subdomains
    		$data_root
    		$www_root
        $geolite2_path
    		$reference_timezone
    		$contact_email
    		$admin_email

    		$facebook_app_id
        $facebook_app_secret

        $robotoff_url

    		$csrf_secret

    		$mongodb
    		$mongodb_host

    		$memd_servers

    		$google_analytics

    		$thumb_size
    		$crop_size
    		$small_size
    		$display_size
    		$zoom_size

    		$page_size

    		%options
        %server_options

    		%wiki_texts

    		@product_fields
    		@product_other_fields
    		@display_fields
    		@display_other_fields
    		@drilldown_fields
    		@taxonomy_fields
    		@export_fields

    		%tesseract_ocr_available_languages

    		%weblink_templates

    		@edit_rules

    	);
    	%EXPORT_TAGS = (all => [@EXPORT_OK]);
    }
    use vars @EXPORT_OK ; # no 'my' keyword for these

    use ProductOpener::Config2;

    # define the normalization applied to change a string to a tag id (in particular for taxonomies)
    # tag ids are also used in URLs.

    # unaccent:
    # - useful when accents are sometimes ommited (e.g. in French accents are often not present on capital letters),
    # either in print, or when typed by users.
    # - dangerous if different words (in the same context like ingredients or category names) have the same unaccented form
    # lowercase:
    # - useful when the same word appears in lowercase, with a first capital letter, or in all caps.

    %string_normalization_for_lang = (
      # no_language is used for strings that are not in a specific language (e.g. user names)
      no_language => {
        unaccent => 1,
        lowercase => 1,
      },
      # default is used for languages that do not have specified values
      default => {
        unaccent => 0,
        lowercase => 1,
      },
      # German umlauts should not be converted (e.g. ä -> ae) as there are many conflicts
      de => {
        unaccent => 0,
        lowercase => 1,
      },
      # French has very few actual conflicts caused by unaccenting (one counter example is "pâtes" and "pâtés")
      # Accents or often not present in capital letters (beginning of word, or in all caps text).
      fr => {
        unaccent => 1,
        lowercase => 1,
      },
      # Same for Spanish, Italian and Portuguese
      es => {
        unaccent => 1,
        lowercase => 1,
      },
      it => {
        unaccent => 1,
        lowercase => 1,
      },
      pt => {
        unaccent => 1,
        lowercase => 1,
      },
      # English has very few accented words, and they are very often not accented by users or in ingredients lists etc.
      en => {
        unaccent => 1,
        lowercase => 1,
      },
    );

    %admins = map { $_ => 1 } qw(
    admin
    );

    %moderators = map { $_ => 1 } qw(
    );

    %moderators = map { $_ => 1 } qw(
    moderator
    );

    @edit_rules = (

    {
    	name => "Edit Rules Testing",
    	conditions => [
    		["user_id", "editrulestest"],
    	],
    	actions => [
    		["ignore_if_existing_ingredients_text_fr"],
    		["warn_if_0_nutriment_fruits-vegetables-nuts"],
    		["warn_if_greater_nutriment_fruits-vegetables-nuts", 0],
    		["ignore_if_regexp_match_packaging", '\b(artikel|produit|producto|produkt|produkte)\b'],
    	],
    	notifications => [ qw (
    		slack_channel_edit-alert
    	)],
    },

    {
    	name => "Yuka",
    	conditions => [
    		["user_id", "kiliweb"],
    	],
    	actions => [
    		["warn_if_existing_brands"],
    		["ignore_if_existing_ingredients_text"],
    		["ignore_if_existing_ingredients_text_fr"],
    		["ignore_if_0_nutriment_fruits-vegetables-nuts"],
    		["ignore_if_greater_nutriment_fruits-vegetables-nuts", 0],
    	],
    	notifications => [ qw (
    		slack_channel_edit-alert
    	)],
    },

    {
    	name => "Date Limite",
    	conditions => [
    		["user_id", "date-limite-app"],
    	],
    	actions => [
    		["ignore_if_regexp_match_packaging", '\b(artikel|produit|producto|produkt|produkte)\b'],
    	],
    	notifications => [ qw (
    		slack_channel_edit-alert
    	)],
    },

    {
    	name => "Fleury Michon",
    	conditions => [
    		["user_id_not", "fleury-michon"],
    		["in_brands_tags", "fleury-michon"],
    	],
    	actions => [
    		["warn"]
    	],
    	notifications => [ qw (
                    slack_channel_edit-alert
            )],
    },

    );


    # server constants
    $server_domain = $ProductOpener::Config2::server_domain;
    @ssl_subdomains = @ProductOpener::Config2::ssl_subdomains;
    $mongodb = $ProductOpener::Config2::mongodb;
    $mongodb_host = $ProductOpener::Config2::mongodb_host;
    $memd_servers = $ProductOpener::Config2::memd_servers;

    # server paths
    $www_root = $ProductOpener::Config2::www_root;
    $data_root = $ProductOpener::Config2::data_root;

    $geolite2_path = $ProductOpener::Config2::geolite2_path;

    $facebook_app_id = $ProductOpener::Config2::facebook_app_id;
    $facebook_app_secret = $ProductOpener::Config2::facebook_app_secret;

    $robotoff_url = $ProductOpener::Config2::robotoff_url;
    %server_options = %ProductOpener::Config2::server_options;

    $csrf_secret = $Blogs::Config2::csrf_secret;

    $reference_timezone = 'Europe/Paris';

    $contact_email = 'contact@' . $server_domain;
    $admin_email = 'admin@' . $server_domain;

    $thumb_size = 100;
    $crop_size = 400;
    $small_size = 200;
    $display_size = 400;
    $zoom_size = 800;

    $page_size = 20;


    $google_analytics = '';

    my @icons = (
    	{ "platform" => "ios", "sizes" => "57x57", "src" => "https://static.$server_domain/images/favicon/apple-touch-icon-57x57.png" },
    	{ "platform" => "ios", "sizes" => "60x60", "src" => "https://static.$server_domain/images/favicon/apple-touch-icon-60x60.png" },
    	{ "platform" => "ios", "sizes" => "72x72", "src" => "https://static.$server_domain/images/favicon/apple-touch-icon-72x72.png" },
    	{ "platform" => "ios", "sizes" => "76x76", "src" => "https://static.$server_domain/images/favicon/apple-touch-icon-76x76.png" },
    	{ "platform" => "ios", "sizes" => "114x114", "src" => "https://static.$server_domain/images/favicon/apple-touch-icon-114x114.png" },
    	{ "platform" => "ios", "sizes" => "120x120", "src" => "https://static.$server_domain/images/favicon/apple-touch-icon-120x120.png" },
    	{ "platform" => "ios", "sizes" => "144x144", "src" => "https://static.$server_domain/images/favicon/apple-touch-icon-144x144.png" },
    	{ "platform" => "ios", "sizes" => "152x152", "src" => "https://static.$server_domain/images/favicon/apple-touch-icon-152x152.png" },
    	{ "platform" => "ios", "sizes" => "180x180", "src" => "https://static.$server_domain/images/favicon/apple-touch-icon-180x180.png" },
    	{ "type" => "image/png", "src" => "https://static.$server_domain/images/favicon/favicon-32x32.png", "sizes" => "32x32" },
    	{ "type" => "image/png", "src" => "https://static.$server_domain/images/favicon/android-chrome-192x192.png", "sizes" => "192x192" },
    	{ "type" => "image/png", "src" => "https://static.$server_domain/images/favicon/favicon-96x96.png", "sizes" => "96x96" },
    	{ "type" => "image/png", "src" => "https://static.$server_domain/images/favicon/favicon-16x16.png", "sizes" => "16x16" },
    );

    my @related_applications = (
    	{ 'platform' => 'play', 'id' => 'org.openfoodfacts.scanner', 'url' => 'https://play.google.com/store/apps/details?id=org.openfoodfacts.scanner' },
    	{ 'platform' => 'ios', 'id' => 'id588797948', 'url' => 'https://itunes.apple.com/app/id588797948' },
    );

    my $manifest;
    $manifest->{icons} = \@icons;
    $manifest->{related_applications} = \@related_applications;
    $manifest->{theme_color} = '#ffffff';
    $manifest->{background_color} = '#ffffff';
    $options{manifest} = $manifest;

    $options{favicons} = <<HTML
    <link rel="manifest" href="/cgi/manifest.pl">
    <link rel="mask-icon" href="/images/favicon/safari-pinned-tab.svg" color="#5bbad5">
    <link rel="shortcut icon" href="/images/favicon/favicon.ico">
    <meta name="msapplication-TileColor" content="#da532c">
    <meta name="msapplication-TileImage" content="/images/favicon/mstile-144x144.png">
    <meta name="msapplication-config" content="/images/favicon/browserconfig.xml">
    HTML
    ;

    $options{opensearch_image} = <<XML
    <Image width="16" height="16" type="image/x-icon">https://static.$server_domain/images/favicon/favicon.ico</Image>
    XML
    ;

    %wiki_texts = (

    "en/discover" => "https://en.wiki.openfoodfacts.org/Translations_-_Discover_page_-_English?action=raw",
    "es/descubrir" => "https://en.wiki.openfoodfacts.org/Translations_-_Discover_page_-_Spanish?action=raw",
    "fr/decouvrir" => "https://en.wiki.openfoodfacts.org/Translations_-_Discover_page_-_French?action=raw",
    "he/discover" => "https://en.wiki.openfoodfacts.org/Translations_-_Discover_page_-_Hebrew?action=raw",
    "ar/discover" => "https://en.wiki.openfoodfacts.org/Translations_-_Discover_page_-_Arabic?action=raw",
    "pt/discover" => "https://en.wiki.openfoodfacts.org/Translations_-_Discover_page_-_Portuguese?action=raw",
    "jp/discover" => "https://en.wiki.openfoodfacts.org/Translations_-_Discover_page_-_Japanese?action=raw",

    "de/contribute" => "https://en.wiki.openfoodfacts.org/Translations_-_Contribute_page_-_German?action=raw",
    "en/contribute" => "https://en.wiki.openfoodfacts.org/Translations_-_Contribute_page_-_English?action=raw",
    "es/contribuir" => "https://en.wiki.openfoodfacts.org/Translations_-_Discover_page_-_Spanish?action=raw",
    "fr/contribuer" => "https://en.wiki.openfoodfacts.org/Translations_-_Contribute_page_-_French?action=raw",
    "nl/contribute" => "https://en.wiki.openfoodfacts.org/Translations_-_Contribute_page_-_Dutch?action=raw",

    "en/press" => "https://en.wiki.openfoodfacts.org/Translations_-_Press_-_English?action=raw",
    "fr/presse" => "https://en.wiki.openfoodfacts.org/Translations_-_Press_-_French?action=raw",
    "el/press" => "https://en.wiki.openfoodfacts.org/Translations_-_Press_-_Greek?action=raw",

    "en/code-of-conduct" => "https://en.wiki.openfoodfacts.org/Translations_-_Code_of_conduct_-_English?action=raw",
    "fr/code-de-conduite" => "https://en.wiki.openfoodfacts.org/Translations_-_Code_of_conduct_-_French?action=raw",
    "ja/code-of-conduct" => "https://en.wiki.openfoodfacts.org/Translations_-_Code_of_conduct_-_Japanese?action=raw",
    "de/code-of-conduct" => "https://en.wiki.openfoodfacts.org/Translations_-_Code_of_conduct_-_German?action=raw",

    "fr/notetondistrib" => "https://en.wiki.openfoodfacts.org/Translations_-_Vending_machines_-_French?action=raw",
    "en/rateyourvendingmachine" => "https://en.wiki.openfoodfacts.org/Translations_-_Vending_machines_-_English?action=raw",

    );


    # fields for which we will load taxonomies
    @taxonomy_fields = qw(states countries languages labels categories additives additives_classes
    vitamins minerals amino_acids nucleotides other_nutritional_substances allergens traces
    nutrient_levels misc ingredients ingredients_analysis nova_groups);


    # fields in product edit form, above ingredients and nutrition facts

    @product_fields = qw(quantity packaging brands categories labels origins manufacturing_places
    emb_codes link expiration_date purchase_places stores countries  );

    # fields currently not shown in the default edit form, can be used in imports or advanced edit forms

    @product_other_fields = qw(
      producer_product_id
      producer_version_id
      net_weight_value
      net_weight_unit
      drained_weight_value
      drained_weight_unit
      volume_value
      volume_unit
      other_information
      conservation_conditions
      recycling_instructions_to_recycle
      recycling_instructions_to_discard
      nutrition_grade_fr_producer
      recipe_idea origin
      customer_service
      producer
      preparation
      warning
      data_sources
    );


    # fields shown on product page
    # do not show purchase_places

    @display_fields = qw(
      generic_name
      quantity
      packaging
      brands
      categories
      labels
      origin
      origins
      producer
      manufacturing_places
      emb_codes
      link stores
      countries
    );

    # fields displayed in a new section after the nutrition facts

    @display_other_fields = qw(
      other_information
      preparation
      recipe_idea
      warning
      conservation_conditions
      recycling_instructions_to_recycle
      recycling_instructions_to_discard
      customer_service
    );


    # fields for drilldown facet navigation

    @drilldown_fields = qw(
      brands
      categories
      labels
      packaging
      origins
      manufacturing_places
      emb_codes
      ingredients
      additives
      vitamins
      minerals
      amino_acids
      nucleotides
      other_nutritional_substances
      allergens
      traces
      nova_groups
      nutrition_grades
      misc
      languages
      users
      states
      data_sources
      entry_dates
      last_edit_dates
      last_check_dates
    );


    @export_fields = qw(
      code
      creator
      created_t
      last_modified_t
      product_name
      generic_name
      quantity
      packaging
      brands
      categories
      origins
      manufacturing_places
      labels
      emb_codes
      cities
      purchase_places
      stores
      countries
      ingredients_text
      allergens
      traces
      serving_size
      serving_quantity
      no_nutriments
      additives_n
      additives
      ingredients_from_palm_oil_n
      ingredients_from_palm_oil
      ingredients_that_may_be_from_palm_oil_n
      ingredients_that_may_be_from_palm_oil
      nutrition_grade_fr
      nova_group
      pnns_groups_1
      pnns_groups_2
      states
    );

    $options{import_export_fields_groups} = [
      ["identification", ["code", "producer_product_id", "producer_version_id", "lc", "product_name", "generic_name",
        "quantity_value_unit", "net_weight_value_unit", "drained_weight_value_unit", "volume_value_unit", "packaging",
        "brands", "categories", "categories_specific", "labels", "labels_specific", "countries", "stores"]
      ],
      ["origins", ["origins", "origin", "manufacturing_places", "producer", "emb_codes"]
      ],
      ["ingredients", ["ingredients_text", "allergens", "traces"]
      ],
      ["nutrition"],
      ["nutrition_other"],
      ["other", ["conservation_conditions", "warning", "preparation", "recipe_idea", "recycling_instructions_to_recycle", "recycling_instructions_to_discard", "customer_service", "link"]
      ],
    ];

    # for ingredients OCR, we use tesseract-ocr
    # on debian, dictionaries are in /usr/share/tesseract-ocr/tessdata
    # %tesseract_ocr_available_languages provides mapping between OFF 2 letter language codes
    # and the available tesseract dictionaries
    # Tesseract uses 3-character ISO 639-2 language codes
    # all dictionaries: apt-get install tesseract-ocr-all

    %tesseract_ocr_available_languages = (
    	en => "eng",
    	de => "deu",
    	es => "spa",
    	fr => "fra",
    	it => "ita",
    #	ja => "jpn", # not available with tesseract 2
    	nl => "nld",
    );

    # weblink definitions for known tags, ie. wikidata:en:Q123 => https://www.wikidata.org/wiki/Q123

    %weblink_templates = (

    	'wikidata:en' => { href => 'https://www.wikidata.org/wiki/%s', text => 'Wikidata', parse => sub
    	{
    		my ($url) = @_;
    		if ($url =~ /^https?:\/\/www.wikidata.org\/wiki\/(Q\d+)$/) {
    			return $1
    		}

    		return;
    	} },

    );

    1;

  Config2.pm: |
    package ProductOpener::Config2;

    use utf8;
    use Modern::Perl '2017';
    use Exporter    qw< import >;

    BEGIN
    {
    	use vars       qw(@ISA @EXPORT @EXPORT_OK %EXPORT_TAGS);
    	@EXPORT = qw();
    	@EXPORT_OK = qw(
    		$server_domain
    		@ssl_subdomains
    		$data_root
    		$www_root
        $geolite2_path
    		$mongodb
        $mongodb_host
        $memd_servers
    		$facebook_app_id
    	  $facebook_app_secret
        $csrf_secret
        $robotoff_url
        %server_options
    	);
    	%EXPORT_TAGS = (all => [@EXPORT_OK]);
    }
    use vars @EXPORT_OK ; # no 'my' keyword for these

    # server constants
    $server_domain = "{{ .Values.host }}";

    @ssl_subdomains = qw();

    # server paths
    $www_root = "/opt/product-opener/html";
    $data_root = "/mnt/podata";

    $geolite2_path = '/usr/local/share/GeoLite2-Country/GeoLite2-Country.mmdb';

    $mongodb = "off";
    $mongodb_host = "mongodb://{{ .Release.Name }}-mongodb:27017";

    $memd_servers = [ "{{ .Release.Name }}-memcached:11211" ];

    $facebook_app_id = "";
    $facebook_app_secret = "";

    $csrf_secret = "EYvfj3GDJnc2UPVqTwTGPgWC";

    # Set this to your instance of https://github.com/openfoodfacts/robotoff/ to
    # enable an in-site robotoff-asker in the product page
    $robotoff_url = '';

    %server_options = (
        private_products => 1,  # Make products visible only to the owner
        export_servers => { public => "off", experiment => "off-exp" },
        minion_backend => { Pg => 'postgresql://productopener:productopener@postgres/minion' },
    );
    1;

  log.conf: |
    log4perl.rootLogger=TRACE, LOGFILE

    log4perl.appender.LOGFILE=Log::Log4perl::Appender::File
    log4perl.appender.LOGFILE.filename=/var/log/log4perl.log
    log4perl.appender.LOGFILE.mode=append

    log4perl.appender.LOGFILE.layout=PatternLayout
    log4perl.appender.LOGFILE.layout.ConversionPattern=[%r] %F %L %c - %m%n
