x-backend-conf: &backend-conf
  image: openfoodfacts-server/backend:dev
  build:
    context: .
    dockerfile: Dockerfile
    # align user id
    args:
      USER_UID: ${USER_UID:-1000}
      USER_GID: ${USER_GID:-1000}
      CPANMOPTS: "${CPANMOPTS:---with-develop}"
  volumes:
    # mount local folder for reload on dev changes.
    # Note that this means /opt/product-opener/html/images/product wont be connected to product_images volume
    # Sadly, there is no sane way to do this, while retaining compatibility with prod
    # (which requires images/product to be empty in git)
    - ./:/opt/product-opener
    # dynamic entrypoint
    - ./docker/docker-entrypoint.sh:/docker-entrypoint.sh
    # we use this for debugging, from times to times
    - ./debug:/mnt/podata/debug/
    # sftp folder for the pro platform
    - ./sftp:/mnt/podata/sftp/
  # Allow the container to connect to the host when using Linux.
  # This is needed to access other services that are running outside of Docker
  # e.g. when developing with openfoodfacts-query
  extra_hosts:
    - "host.docker.internal:host-gateway"
    - "auth.openfoodfacts.localhost:host-gateway"
  networks:
    default:

x-minion-db-network: &minion-db-network
  networks:
    # we need to be on default, but also on a dedicated network (ease sharing with pro in dev)
    # see also docs/dev/explain-pro-dev-setup.md
    minion_db:
    default:

services:
  postgres:
    # only turn on for off profile
    <<: *minion-db-network
  backend:
    # For some reason we need to list minion-db-network first otherwise it isn't included
    <<: [*minion-db-network, *backend-conf] 
    extra_hosts:
      - ch-it.openfoodfacts.localhost:127.0.0.1
      - es-it.openfoodfacts.localhost:127.0.0.1
      - es.openfoodfacts.localhost:127.0.0.1
      - fr.openfoodfacts.localhost:127.0.0.1
      - fr.pro.openfoodfacts.localhost:127.0.0.1
      - ssl-api.openfoodfacts.localhost:127.0.0.1
      - world-it.openfoodfacts.localhost:127.0.0.1
      - world.openfoodfacts.localhost:127.0.0.1
      - world.pro.openfoodfacts.localhost:127.0.0.1
  incron: *backend-conf
  redis-listener: *backend-conf
  minion:
    <<: [*minion-db-network, *backend-conf]
  # in dev we want to use watch assets and recompile on the fly
  # also we want to build at start time in case some files changed, as we want to avoid recreating volumes
  dynamicfront:
    image: openfoodfacts-server/dynamicfront:dev
    build:
      context: .
      target: builder
      dockerfile: Dockerfile.frontend
      args:
        USER_UID: ${USER_UID:-1000}
        USER_GID: ${USER_GID:-1000}
    command: ["npm", "run", "build:dynamic"]
    volumes:
      # Static dist/ assets (JS, CSS, Icons, Image attributes)
      - icons_dist:/opt/product-opener/html/images/icons/dist
      - js_dist:/opt/product-opener/html/js/dist
      - css_dist:/opt/product-opener/html/css/dist
      # mount local folder for reload on dev changes, we follow Dockerfile.frontend COPYs
      - ./package.json:/opt/product-opener/package.json
      - ./package-lock.json:/opt/product-opener/package-lock.json
      - ./html:/opt/product-opener/html
      - ./icons:/opt/product-opener/icons
      - ./scss:/opt/product-opener/scss
      - ./gulpfile.ts:/opt/product-opener/gulpfile.ts
  frontend:
    image: openfoodfacts-server/frontend:dev
    build:
      context: .
      dockerfile: Dockerfile.frontend
      args:
        USER_UID: ${USER_UID:-1000}
        USER_GID: ${USER_GID:-1000}
    volumes:
      - ./html:/opt/product-opener/html/
      - ./icons:/opt/product-opener/icons
      - ./scss:/opt/product-opener/scss
      - ./gulpfile.ts:/opt/product-opener/
      - ./snyk:/opt/product-opener/
    networks:
        default:
          aliases:
            # trick: make it possible for robotoff to reach it internally, 
            # using localhost domain
            - world.${PRODUCT_OPENER_DOMAIN}
            - static.${PRODUCT_OPENER_DOMAIN}
            - images.${PRODUCT_OPENER_DOMAIN}
            - fr.${PRODUCT_OPENER_DOMAIN}
            - world-be.${PRODUCT_OPENER_DOMAIN}
            - world-de.${PRODUCT_OPENER_DOMAIN}
            - world-it.${PRODUCT_OPENER_DOMAIN}
            - es-it.${PRODUCT_OPENER_DOMAIN}
            - ch-it.${PRODUCT_OPENER_DOMAIN}
            - ssl-api.${PRODUCT_OPENER_DOMAIN}
            - fr.pro.${PRODUCT_OPENER_DOMAIN}
            - world.pro.${PRODUCT_OPENER_DOMAIN}
            - auth.${PRODUCT_OPENER_DOMAIN}
            - es.${PRODUCT_OPENER_DOMAIN}
            - be-fr.${PRODUCT_OPENER_DOMAIN}

volumes:
  product_images:
  html_data:
  other_servers:
  products:
  # those one are volumes shared between off and pro, so we assign hard-coded names
  # see docs/dev/explain-pro-dev-setup.md
  # PO_COMMON_PREFIX is there to separate envs, eg. for tests
  users:
    name: ${PO_COMMON_PREFIX:-}po_users
  orgs:
    name: ${PO_COMMON_PREFIX:-}po_orgs
  export_files:
    name: ${PO_COMMON_PREFIX:-}po_export_files
  podata:

networks:
  # this is a specific network to enable pro platform to join the postgres db
  minion_db:
    name: ${PO_COMMON_PREFIX:-}minion_db
