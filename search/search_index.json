{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Product Opener (Open Food Facts web server) documentation","text":"<p>Welcome to the documentation of Product Opener, the web server at the heart of Open Food Facts project. </p> <p>It also powers the sibling Open [Beauty|Pet Food|Products] Facts projects</p> <ul> <li>If you want to use the API or are interested in the data, look at API documentation and Events documentation</li> </ul> <ul> <li>If you are a developer, look at Developer documentation</li> </ul> <p>The repository for the project is at https://github.com/openfoodfacts/openfoodfacts-server/</p> <p>Do not hesitate to contribute to this documentation, this is highly appreciated.</p>"},{"location":"#documentation-organization","title":"Documentation organization","text":"<p>The documentation is split between API\u00a0documentation (for re-users, third party developers) and Developer documentation (for contributors).</p> <p>The documentation follows the Di\u00e1taxis framework.</p> <p>Page titles should start with:</p> <ul> <li>tutorial on - tutorials aimed at learning</li> <li>how to\u2026 - how to guides to reach a specific goal</li> <li>explain\u2026 - explanation to understand a topic</li> <li>reference\u2026 - providing detailed information</li> </ul>"},{"location":"api/","title":"Introduction to Open Food Facts API documentation","text":"<p>Everything you need to know about Open Food Facts API.</p> <p>[CAUTION] \ud83d\udc6e\u200d\u2642\ufe0f\ud83d\udea5Are you going to use our API? Please read this documentation entirely before using it.</p>"},{"location":"api/#overview","title":"Overview","text":"<p>Open Food Facts is a food products database made by everyone, for everyone, that can help you make better choices about what you eat. Being open data, anyone can reuse it for any purpose.</p> <p>The Open Food Facts API enables developers to get information like ingredients and nutritional values of products, and even add more facts to the products database. You can use the API to build applications that allow users to contribute to the database and make healthier food choices.</p> <p>The current version of the API is <code>2</code>.</p> <p>Data in the Open Food Facts database is provided voluntarily by users who want to support the program. As a result, there are no assurances that the data is accurate, complete, or reliable. The user assumes the entire risk of using the data.</p> <p>The next version of the API is <code>3</code>.</p> <p>This version is in active development and may be subject to frequent changes.</p>"},{"location":"api/#before-you-start","title":"Before You Start","text":"<ul> <li>The Open Food Facts database is available under the Open Database License.</li> <li>The individual contents of the database are available under the Database Contents License.</li> <li>Product images are available under the Creative Commons Attribution ShareAlike license. They may contain graphical elements subject to copyright or other rights that may, in some cases, be reproduced (quotation rights or fair use).</li> </ul> <p>Before using the API, please :</p> <ol> <li>Read the Terms and conditions of use and reuse</li> <li>Tell us how you'll use it by filling out this short form:    \ud83d\udc49 Fill out the API usage form    This helps us understand real-world uses of the API and prioritize improvements.</li> </ol>"},{"location":"api/#how-to-best-use-the-api","title":"How to Best Use the API","text":""},{"location":"api/#general-principles","title":"General principles","text":"<ul> <li>You can search for product information, including many useful computed values.</li> <li>Suppose we don't have the information you need on a specific product. In that case, you (or your users) can upload the product photos, and the backend (and our AI algorithms!) will process them, generating helpful info. The photos will also be available for the users of Open Food Facts and every other API user.</li> <li>You could also ask your user to enter some of the information about the product (like name, category, and weight) so that they immediately get the computed info.</li> </ul> <p>Generally, the more information we have about a product, the more we can compute.</p>"},{"location":"api/#rate-limits","title":"Rate limits","text":"<p>To protect our infrastructure, we enforce rate-limits on the API and the website. The following limits apply:</p> <ul> <li>100 req/min for all read product queries (<code>GET /api/v*/product</code> requests or product page). There is no limit on product write queries.</li> <li>10 req/min for all search queries (<code>GET /api/v*/search</code> or <code>GET /cgi/search.pl</code> requests); don't use it for a search-as-you-type feature, you would be blocked very quickly.</li> <li>2 req/min for facet queries (such as <code>/categories</code>, <code>/label/organic</code>, <code>/ingredient/salt/category/breads</code>,...).</li> </ul> <p>If these limits are reached, we reserve the right to deny you access to the website and the API through IP address ban. If your IP has been banned, feel free to email us to explain why you reached the limits: reverting the ban is possible.</p> <p>If your requests come from your users directly (ex: mobile app), the rate limits apply per user.</p> <p>If you need to fetch a significant fraction of the database, we recommend downloading the data as a CSV or JSONL file directly. If you need to download images in bulk, we have a guide for that.</p>"},{"location":"api/#if-your-users-do-not-expect-a-result-immediately-eg-inventory-apps","title":"If your users do not expect a result immediately (e.g., Inventory apps)","text":"<ul> <li>Submit photos (front packaging/nutrition values/ingredients): the most painless thing for your users.</li> <li>The backend (Product Opener) and Open Food Facts AI (Robotoff) will generate some derived data from the photos.</li> <li>Over time, other apps and the Open Food Facts community will fill the data gaps.</li> </ul>"},{"location":"api/#if-your-users-expect-a-result-immediately-eg-nutrition-apps","title":"If your users expect a result immediately (e.g., Nutrition apps)","text":"<ul> <li>If you submit the product's nutritional values and category, you'll get the Nutri-Score.</li> <li>If you submit the product ingredients, you'll get the NOVA group (about food ultra-processing), additives, allergens, normalized ingredients, vegan, vegetarian\u2026</li> <li>If you submit the product's category and labels, you'll get the Eco-Score (a rating of the product's environmental impact)</li> </ul>"},{"location":"api/#api-deployments","title":"API Deployments","text":"<p>The OpenFoodFacts API has two deployments.</p> <ul> <li>Production: https://world.openfoodfacts.org</li> <li>Staging: https://world.openfoodfacts.net</li> </ul> <p>Consider using the staging environment if you are not in a production scenario.</p> <p>While testing your applications, make all API requests to the staging environment. This way, we can ensure the product database is safe.</p> <p>Staging require an http basic auth to avoid search engine indexing. The username is <code>off</code>, and the password <code>off</code>. Here is a small javascript code that you can test in your browser console:</p> <pre><code>fetch(\"https://world.openfoodfacts.net/api/v2/product/3274080005003.json\", {\n  method: \"GET\",\n  headers: { Authorization: \"Basic \" + btoa(\"off:off\") },\n})\n  .then((response) =&gt; response.json())\n  .then((json) =&gt; console.log(json));\n</code></pre>"},{"location":"api/#authentication","title":"Authentication","text":"<p>We ask you to always use a custom User-Agent to identify your app (to not risk being identified as a bot). The User-Agent should be in the form of <code>AppName/Version (ContactEmail)</code>. For example, <code>MyApp/1.0 (myapp@example.com)</code>.</p> <ul> <li>READ operations (getting info about a product, etc...) do not require authentication other than the custom User-Agent.</li> <li>WRITE operations (Editing an Existing Product, Uploading images\u2026) require authentication. We do this as another layer of protection against spam.</li> </ul> <p>Create an account on the Open Food Facts app for your app (and notify reuse@openfoodfacts.org of the account name, so that we grant it special app privileges). From there, you have two options:</p> <ul> <li>The preferred one:   Use the login API to get a session cookie and use this cookie for authentication in your subsequent requests. However, the session must always be used from the same IP address, and there's a limit on sessions per user (currently 10) with older sessions being automatically logged out to stay within the limit.</li> <li>If session conditions are too restrictive for your use case, include your account credentials as parameters for authenticated requests where <code>user_id</code>^[user_id_not_email] is your username and <code>password</code> is your password (do this on POST / PUT / DELETE requests, not on GET).</li> </ul> <p>You can create a global account to allow your app users to contribute without registering individual accounts on the Open Food Facts website. This way, we know that these contributions came from your application.</p> <p>We however ask that you send the <code>app_name</code>, <code>app_version</code> and <code>app_uuid</code> parameters in your write queries.</p> <ul> <li><code>app_name=MyApp</code></li> <li><code>app_version=1.1</code></li> <li><code>app_uuid=xxxx</code>: a salted random uuid for the user so that Open Food Facts moderators can selectively ban any problematic user without banning your whole app account.</li> </ul> <p>Production and staging have different account databases, so the account you create in the production environment will only work for production requests. If you want to query (WRITE requests) the staging environment, you'll need to create another account there too.</p> <p>Note: we're currently moving to a modern Auth system (Keycloak), so we will have new Auth options, hopefully this year.</p> <p>^[user_id_not_email]: user_id is the username of your account. You must not use your email address.</p>"},{"location":"api/#reference-documentation-openapi","title":"Reference Documentation (OpenAPI)","text":"<p>We are building a complete OpenAPI reference. Here is a list of the current API documentation available:</p> <ul> <li>OpenAPI documentation (v2)</li> <li>OpenAPI documentation for v3 (under active development, may change frequently)</li> <li>A cheatsheet listing some common patterns.</li> <li>A change log for the API and product schema</li> </ul>"},{"location":"api/#tutorials","title":"Tutorials","text":"<ul> <li>A comprehensive introduction to Using the Open Food Facts API.</li> <li>Uploading images to the Open Food Facts API</li> </ul>"},{"location":"api/#help","title":"Help","text":"<ul> <li>Try the FAQ - to answer most of your questions.</li> <li>Didn't get what you wanted? Contact the Team on the #api Slack Channel.</li> <li>Report Bugs on the Open Food Facts GitHub repository.</li> <li>Do you have an issue or feature request? You can submit it on GitHub too.</li> <li>Are you interested in contributing to this project? See our Contribution Guidelines.   {/ /}</li> </ul>"},{"location":"api/#sdks","title":"SDKs","text":"<p>SDKs are available for specific languages for easier use of the API. We may have a wrapper for your favourite programming language. If we do, you can use it and improve it. However, If we don't, you can help us create it!</p> <p>They will let you consume data and let your users contribute new data. Open-source contributors develop our SDKs, and more contributions are welcome to improve these SDKs. You can start by checking the existing issues in their respective repositories.</p> <p>Warning: Before exploring any SDK, please read the Before You Start section.</p> <p>Also, remember to check the API Reference Documentation first to verify if the problem is in SDK implementation or in the API itself.</p> <ul> <li>Cordova: GitHub (old Open Food Facts official app)</li> <li>DART: GitHub - Package on pub.dev</li> <li>Elixir: GitHub - Discussion channel</li> <li>Go: GitHub - Discussion channel</li> <li>Java: GitHub - Discussion channel</li> <li>Spring Boot: GitHub - Discussion channel</li> <li>Kotlin: GitHub - Discussion channel</li> <li>NodeJS: GitHub - Discussion channel</li> <li>PHP: GitHub - Discussion channel</li> <li>PHP (Laravel): GitHub - Discussion channel</li> <li>Python: GitHub, published on pypi - Discussion channel</li> <li>React Native: GitHub - Discussion channel</li> <li>Ruby: GitHub - Discussion channel</li> <li>Rust: GitHub - Discussion channel</li> <li>R: GitHub - Discussion channel</li> <li>Swift: GitHub - Discussion channel</li> <li>.NET/C#: GitHub - Discussion channel</li> </ul>"},{"location":"api/aws-images-dataset/","title":"Open Food Facts AWS images dataset","text":"<p>The Open Food Facts images dataset contains all images uploaded to Open Food Facts and the OCR results on these images obtained using Google Cloud Vision.</p> <p>The dataset is stored in the <code>openfoodfacts-images</code> S3 bucket hosted in the <code>eu-west-3</code> region. All data is stored in a single <code>/data</code> folder.</p> <p>Data is synchronized monthly between the Open Food Facts server and the bucket; as such some recent images are likely missing. You should not assume all images are present in the bucket.</p> <p>To know the bucket key associated with an image, we use the same directory structure as on Product Opener. See How to download images for more information.</p> <p>For example, for the product with barcode '4012359114303', the directory containing the image is <code>/401/235/911/4303</code> (that is, three groups of 3 digits followed by one group of 4 digits, all four groups being prefixed with a <code>/</code>).</p> <p>To get the raw image '1' for barcode '4012359114303', simply add the image ID: <code>/401/235/911/4303/1.jpg</code>. Here, you will get the \"raw\" image, as sent by the contributor. If you don't need the full resolution image, a 400px resized version is also available, by adding the <code>.400</code> suffix after the image ID: <code>/401/235/911/4303/1.400.jpg</code>.</p> <p>The OCR of the image is a gzipped JSON file, and has the same file name as the raw image, but with the <code>.json.gz</code> extension: <code>/401/235/911/4303/1.json.gz</code></p> <p>To download images, you can either use AWS CLI, or perform an HTTP request directly:</p> <p><code>wget https://openfoodfacts-images.s3.eu-west-3.amazonaws.com/data/401/235/911/4303/1.jpg</code></p> <p>You can list all existing objects (images, OCR results) in the bucket by downloading the gzipped text file <code>s3://openfoodfacts-images/data/data_keys.gz</code>:</p> <p><code>wget https://openfoodfacts-images.s3.eu-west-3.amazonaws.com/data/data_keys.gz</code></p> <p>Then you can easily filter the files you want using <code>grep</code> (raw images, OCR JSON) before downloading them. For example, to keep only 400px versions of all images:</p> <p><code>zcat data_keys.gz | grep '.400.jpg'</code></p> <p>For example, if you want to extract a sample of images, you can use the code snippet below:</p> <pre><code># Extract images from AWS\nn=1000\nimages_dir=\"images\"\nbucket_url=\"https://openfoodfacts-images.s3.eu-west-3.amazonaws.com/\"\n\nzcat data_keys.gz |\ngrep '.jpg' | # Filter\nshuf -n \"$n\" | # Random sample\nsed \"s|^|$bucket_url|\" | #Add bucket_url: \"https://openfoodfacts-images.s3.eu-west-3.amazonaws.com/data/376/005/047/0099/1.jpg\"\nwhile read -r url; do\n    filename=$(echo \"$url\" | sed \"s|$bucket_url||\" | tr '/' '_' | sed 's|data_||') # Filename as 376_005_047_0099_1.jpg\n    wget -O \"$images_dir/$filename\" \"$url\"\ndone\n</code></pre> <p>You can further refine the image extraction process by applying additional filters like <code>last_editor</code> or <code>last_edited_date</code>. This can be done by combining the Open Food Facts database dump with DuckDB and the <code>data_keys.gz</code> file. For detailed instructions on using DuckDB to efficiently process the OFF database, refer to our blog post.</p>"},{"location":"api/explain-knowledge-panels/","title":"Explanation on Knowledge panels","text":"<p>The Open Food Facts API allows clients (such as the Open Food Facts website and mobile app) to request ready-to-display information about an object (such as a product or a facet like a category).</p> <p>Clients do not have to know in advance what kind of information is displayed (for example - the ingredients of a product, nutrition data, Nutri-Score or Eco-Score). They only have to know how to display essential data types such as texts, grades, images, and tables.</p> <p> Knowledge panels in action on the website</p> <p>Knowledge panels in action on the mobile app</p>"},{"location":"api/explain-knowledge-panels/#main-elements","title":"Main elements","text":"<p>Main elements are panels, which in turn contain elements. Elements are typically <code>text_element</code>, <code>image_element</code>, <code>map_element</code>. Some panels are grouping panels together, forming a hierarchy. We also have a concept of action, which allows the user to take an action, currently editing.</p> <p>The structure of the knowledge panels data returned by the API is described in the knowledge panels JSON schema.</p> <p>See the reference documentation for Getting Knowledge panels for a specific product by barcode.</p>"},{"location":"api/explain-knowledge-panels/#how-to-make-a-knowledge-panel-related-contribution","title":"How to make a knowledge panel related contribution","text":"<ul> <li>You need to have a clear vision of the information you want to convey, both in synthetic and larger form</li> <li>If the information is missing to properly display the panel, you need to devise a clear way for the user to contribute it if it's available on pack, or explain that it's not available on pack</li> </ul>"},{"location":"api/explain-knowledge-panels/#code-pointers","title":"Code-pointers","text":"<ul> <li>The code contains templates and logic for creating various knowledge panels, including environmental and contribution-related panels, as seen in <code>templates/api/knowledge-panels/environment/label.tt.json</code> and <code>lib/ProductOpener/KnowledgePanelsContribution.pm</code>.</li> <li>Knowledge panels are generated based on product data and taxonomies, with support for localization and customization as per <code>lib/ProductOpener/KnowledgePanels.pm</code> (for products) and <code>lib/ProductOpener/KnowledgePanelsTags.pm</code> (for facets).</li> </ul>"},{"location":"api/explain-knowledge-panels/#how-to-test-that-your-knowledge-panel-contribution-does-not-break-the-app","title":"How to test that your knowledge panel contribution does not break the app","text":"<ul> <li>You can use tools such as ngrok.io to open a tunnel from your local development machine to the Internet. If you are using GitPod to run your Product Opener instance, you don't even need this step, as gitpod allows you to make your dev instance url public.</li> <li>You can then activate the DEV mode of the official Open Food Facts mobile app, switch the Server to test, and set a custom URL (yours) for the server. More details are available</li> </ul>"},{"location":"api/how-to-download-images/","title":"How to download product images","text":"<p>The preferred method of downloading Open Food Facts images depends on what you wish to achieve.</p> <p>If you want to download a few images (say up to 10), especially if these images have been uploaded recently, you should download the image from the Open Food Facts server.</p> <p>If you plan to download more images, you should instead use the Open Food Facts images dataset hosted on AWS.</p> <p>NOTE: please avoid fetching full image if it is not needed, but use image in the right size.</p>"},{"location":"api/how-to-download-images/#download-from-aws","title":"Download from AWS","text":"<p>If you want to download many images, this is the recommended option, as AWS S3 is faster and allows concurrent download, unlike the Open Food Facts server, where you should preferably download images one at a time. See AWS Images dataset for more information about how to download images from the AWS dataset.</p>"},{"location":"api/how-to-download-images/#download-from-open-food-facts-server","title":"Download from Open Food Facts server","text":"<p>All images are hosted under the https://images.openfoodfacts.org/images/products/ folder.  But you have to build the right URL from the product info.</p>"},{"location":"api/how-to-download-images/#images-url-directly-available-in-product-data","title":"images URL directly available in product data","text":"<p>When you request the API, you will get the url of some important images:\u00a0front, ingredients, nutrition, packaging</p> <p>The field <code>selected_images</code> provides you with those images.</p> <p>The structure should be simple enough to read. You get different image type, and inside different image size, and inside the urls for the different languages.</p>"},{"location":"api/how-to-download-images/#computing-images-url","title":"Computing images URL","text":"<p>In case you want to get an image which url is not directly present in product data, you need to compute the image url by yourself.</p>"},{"location":"api/how-to-download-images/#computing-single-product-image-folder","title":"Computing single product image folder","text":"<p>Images of a product are stored in a single directory. The path of this directory can be inferred easily from the product barcode:</p> <ul> <li>If the barcode is less than 13 digits long, it must be padded with leading 0s so that it has 13 digits.</li> </ul> <ul> <li>Then split the first 9 digits of the barcode into 3 groups of 3 digits to get the first 3 folder names, and use the rest of the barcode as the last folder name.<ul> <li>The following regex can be used to split the barcode into subfolders: <code>/^(...)(...)(...)(.*)$/</code></li> <li>For example, barcode <code>3435660768163</code> is split into: <code>343/566/076/8163</code>, thus product images will be in <code>https://images.openfoodfacts.org/images/products/343/566/076/8163</code></li> </ul> </li> </ul>"},{"location":"api/how-to-download-images/#computing-single-image-file-name","title":"Computing single image file name","text":"<p>Above we get the folder name, now we need the filename inside that folder for a particular image.</p>"},{"location":"api/how-to-download-images/#understanding-images-data","title":"Understanding images data","text":"<p>To get the image file names, we have to use the database dump or the API.  All images information are stored in the <code>images</code> field. </p> <p>Eg. For product 3168930010883, we have (trimmed the data):</p> <pre><code>    {\n      \"1\": {\n        \"sizes\": {\n          \"full\": {\n            \"w\": 850,\n            \"h\": 1200\n          },\n          \"100\": {\n            \"h\": 100,\n            \"w\": 71\n          },\n          \"400\": {\n            \"h\": 400,\n            \"w\": 283\n          }\n        },\n        \"uploader\": \"kiliweb\",\n        \"uploaded_t\": \"1527184614\"\n      },\n      \"front_fr\": {\n        \"x1\": null,\n        \"angle\": null,\n        \"y2\": null,\n        \"white_magic\": \"0\",\n        \"imgid\": \"1\",\n        \"rev\": \"4\",\n        \"sizes\": {\n          \"200\": {\n            \"w\": 142,\n            \"h\": 200\n          },\n          \"full\": {\n            \"w\": 850,\n            \"h\": 1200\n          },\n          \"400\": {\n            \"h\": 400,\n            \"w\": 283\n          },\n          \"100\": {\n            \"w\": 71,\n            \"h\": 100\n          }\n        },\n        \"y1\": null,\n        \"normalize\": \"0\",\n        \"geometry\": \"0x0-0-0\",\n        \"x2\": null\n      }\n    }\n</code></pre> <p>The keys of the map are the keys of the images. These keys can be:</p> <ul> <li>digits: the image is the raw image sent by the contributor (full resolution).</li> <li>selected images:     * <code>front_{lang}</code> correspond to the front product image in language with code <code>lang</code>     * <code>ingredients_{lang}</code> correspond to the ingredients image in language with code <code>lang</code>     * <code>nutrition_{lang}</code> is the same but for nutrition data     * <code>packaging_{lang}</code> for packaging logos<p><code>lang</code> is a 2-letter ISO 639-1 language code (fr, en, es, \u2026).</p> </li> </ul> <p>Each image is available in different resolutions:  <code>100</code>, <code>200</code>, <code>400</code> or <code>full</code>, each corresponding to image height (<code>full</code> means not resized). The available resolutions can be found in the <code>sizes</code> subfield.</p>"},{"location":"api/how-to-download-images/#filename-for-a-raw-image","title":"Filename for a raw image","text":"<p>For a raw image (the one under a numeric key in images field),  the filename is very easy to compute: </p> <ul> <li>just take the image digit + <code>.jpg</code> for full resolution</li> <li>image digit + <code>.</code> + resolution + <code>.jpg</code> for a lower resolution</li> </ul> <p>For our example above, the filename for image <code>\"1\"</code></p> <ul> <li>in resolution 400px is <code>1.400.jpg</code></li> <li>in full resolution, it is <code>1.jpg</code></li> </ul> <p>So, adding the folder part, the final url for our example is: </p> <ul> <li>https://images.openfoodfacts.org/images/products/316/893/001/0883/1.jpg for the full image</li> <li>https://images.openfoodfacts.org/images/products/316/893/001/0883/1.400.jpg for the 400px version</li> </ul>"},{"location":"api/how-to-download-images/#filename-for-a-selected-image","title":"Filename for a selected image","text":"<p>In the structure, selected images have additional fields:</p> <ul> <li><code>rev</code> (as revision) indicates the revision number of the image to use (each     time a new image is selected, cropped or rotated, a new image with an     incremented rev is generated).</li> <li><code>imgid</code>, the image ID of the raw image used to generate the selected image.</li> <li><code>angle</code>, <code>x1</code>, <code>x2</code>, <code>y1</code>, <code>y2</code>: rotation angle and cropping coordinates (it's to be able to regenerate the image from the raw image)</li> </ul> <p>For selected images, the filename is the image key followed by the revision number and the resolution: <code>&lt;image_name&gt;.&lt;rev&gt;.&lt;resolution&gt;.jpg</code>. Resolution must always be specified, but you can use <code>full</code> keyword to get the full resolution image. <code>image_name</code> is the image type + language code (eg:\u00a0<code>front_fr</code>).</p> <p>In our above example, the filename for the front image in french (<code>front_fr</code> key) is:</p> <ul> <li><code>front_fr.4.400.jpg</code> for 400 px version</li> <li><code>front_fr.4.full.jpg</code> for full resolution version</li> </ul> <p>So, adding the folder part, the final url for our example is: </p> <ul> <li>https://images.openfoodfacts.org/images/products/316/893/001/0883/front_fr.4.full.jpg for the full image</li> <li>https://images.openfoodfacts.org/images/products/316/893/001/0883/front_fr.4.400.jpg for the 400px version</li> </ul>"},{"location":"api/how-to-download-images/#a-python-snippet","title":"A python snippet","text":"<p>So if we have the product_data in a dict, Python code for doing it would be something like:</p> <pre><code>def get_image_url(product_data, image_name, resolution=\"full\"):\n    if image_name not in product_data[\"images\"]:\n        return None\n    base_url = \"https://images.openfoodfacts.org/images/products\"\n    # get product folder name\n    folder_name = product_data[\"code\"]\n    if len(folder_name) &gt; 8:\n        folder_name = re.sub(r'(...)(...)(...)(.*)', r'\\1/\\2/\\3/\\4', folder_name)\n    # get filename\n    if re.match(\"^\\d+$\", image_name):  # only digits\n        # raw image\n        resolution_suffix = \"\" if resolution == \"full\" else f\".{resolution}\"\n        filename = f\"{image_name}{resolution_suffix}.jpg\"\n    else:\n        # selected image\n        rev = product_data[\"images\"][image_name][\"rev\"]\n        filename = f\"{image_name}.{rev}.{resolution}.jpg\"\n    # join things together\n    return f\"{base_url}/{folder_name}/{filename}\"\n</code></pre>"},{"location":"api/intro-robotoff/","title":"Introduction to the Robotoff Project","text":"<p>The Robotoff project is intended to complete missing product information by prompting users to confirm predictions inferred by Artificial Intelligence algorithms. These algorithms are calculated based on \"insights\", which are facts about a product that have been extracted or deduced from the product pictures, ingredients, categories, labels, etc.</p>"},{"location":"api/intro-robotoff/#why-youd-use-this-api","title":"Why you'd use this API","text":"<ul> <li>Letting your users answer Robotoff insights allow them to get to Nutri-Score, Eco-Score easily, and ensures their satisfaction</li> </ul>"},{"location":"api/intro-robotoff/#robotoff-documentation","title":"Robotoff documentation","text":"<p>The documentation for Robotoff is located here:</p> <ul> <li>General Documentation</li> <li>API Documentation (OpenApi)</li> </ul>"},{"location":"api/leveraging-links-to-wikidata/","title":"How to leverage links to Wikidata (and Wikipedia)","text":"<ul> <li>You may have spotted things like https://www.wikidata.org/wiki/Q40050 in API outputs, especially those related to Taxonomies</li> <li>Whenever possible, Open Food Facts entities are linked to Wikidata,and in turn to Wikipedia. What this means is that you get access to a trove of additional encyclopedic knowledge about food. You can for instance get: Wikipedia articles about Camembert, the translation of salt in many languages, the molecular structure of a cosmetic ingredient...</li> <li>We provide the Wikidata QID, which is an unambiguous, stable and reliable identifier for a concept that will be useful to actually retrieve info from Wikipedia and Wikidata.</li> </ul>"},{"location":"api/leveraging-links-to-wikidata/#example","title":"Example","text":"<p>https://world.openfoodfacts.org/categories.json</p> <pre><code>{\n  \"linkeddata\": { \"wikidata:en\": \"Q40050\" },\n  \"url\": \"https://world.openfoodfacts.net/category/beverages\",\n  \"name\": \"Beverages\",\n  \"id\": \"en:beverages\",\n  \"products\": 14196\n}\n</code></pre> <p>Beverages \u2192 https://world.openfoodfacts.org/category/beverages \u2192 Q40050 \u2192 https://www.wikidata.org/wiki/Q40050 As you see, you'll get a beautiful image, information about the Quality label... As Wikidata is a Wiki, the knowledge you'll be able to retrieve will increase over time.</p>"},{"location":"api/leveraging-links-to-wikidata/#retrieving-info-from-wikipedia-and-wikidata","title":"Retrieving info from Wikipedia and Wikidata","text":"<p>You can use the Wikipedia and Wikidata APIs to get the information you want:</p> <ul> <li>https://www.wikidata.org/wiki/Wikidata:Data_access</li> </ul> <ul> <li>https://en.wikipedia.org/w/api.php</li> </ul>"},{"location":"api/leveraging-links-to-wikidata/#examples-of-things-you-can-do","title":"Examples of things you can do","text":"<ul> <li>Provide more context and more information about a specific Product, a Category of products, a Quality label, a Geography, a Brand, a Packaging material, an ingredient...</li> </ul> <ul> <li>Perform checks or computations by mixing Wikidata information and Open Food Facts information (and possibly other APIs)</li> </ul>"},{"location":"api/ref-api-and-product-schema-change-log/","title":"Reference: API and product schema change log","text":"<p>This reference lists changes to the API and/or the product schema.</p>"},{"location":"api/ref-api-and-product-schema-change-log/#introduction","title":"Introduction","text":"<p>The schema of product data in the Open Food Facts database changes over time:</p> <ul> <li>We often add new raw data fields (e.g. packaging data), or new computed fields (e.g. health and environmental scores).</li> <li>Occasionally, we refactor some fields to improve how we structure some data (e.g. in the beginning we had a flat list of ingredients, then we added a nested ingredients structure to better represent sub-ingredients).</li> </ul> <p>We consider new fields to be non-breaking changes. When reading product data, make sure that your implementation will ignore new fields and not break.</p> <p>We consider changed fields to be breaking changes. To maintain backward compatibility, we increase the API version number when there is a breaking change, and we try to serve the old structure when a lower API version is requested by a client.</p> <p>The API may return undocumented fields. You should not rely on fields that are not documented, as they may be internal fields that could change or be removed. If you want to use some documented fields, please ask first on the #API channel. We do not consider changes to undocumented fields breaking changes, and added/changed/removed undocumented fields will often not be listed in this change log.</p>"},{"location":"api/ref-api-and-product-schema-change-log/#product-schema-version","title":"Product schema version","text":"<p>The product schema version is an integer that is incremented each time there is a change. It was introduced in March 2025, with a value of 1001. For products updated after March 2025, the product schema version is saved in the schema_version field of the product object. For earlier products (or earlier product revisions), the product schema version is 1000 or below. It is not stored in the database, but it can be returned for API requests with an API version lesser than 3.2.</p>"},{"location":"api/ref-api-and-product-schema-change-log/#api-version","title":"API version","text":"<p>Since 2012, we have used API versions like 0, 1, 2, 3 and 3.1. For each of those API version, we have a corresponding product schema version.</p> <p>When a client makes a request with a specific API version, we do our best to convert the response to the corresponding product schema version.</p> <p>Note: API v3 is under active development, and the API and corresponding product schema may change frequently.</p>"},{"location":"api/ref-api-and-product-schema-change-log/#schema-version-and-api-version-change-log","title":"Schema version and API version change log","text":""},{"location":"api/ref-api-and-product-schema-change-log/#2025-06-11-product-version-1002-api-version-33-new-uploaded-and-selected-images-structure-new-api-for-image-upload-and-selection","title":"2025-06-11 - Product version 1002 - API version 3.3 - New uploaded and selected images structure, new API for image upload and selection","text":"<p>Breaking changes:</p> <ul> <li>the \"images\" structure has been changed to better separate uploaded and selected images (see images schema)</li> <li>new API v3 endpoint to upload an image: /api/v3.3/product/[barcode]/images</li> <li>added support for image selection in existing API v3 product write endpoint</li> </ul>"},{"location":"api/ref-api-and-product-schema-change-log/#2025-03-12-product-version-1001-api-version-32-removed-ingredients_hierarchy-added-schema_version-made-brands-a-taxonomized-field","title":"2025-03-12 - Product version 1001 - API version 3.2 - Removed ingredients_hierarchy, added schema_version, made brands a taxonomized field","text":"<p>Breaking changes:</p> <ul> <li>Ingredients_hierarchy array has been removed (its content is identical to the ingredients_tags array) - PR</li> <li>The brands field is now taxonomized. brands_tags entries are prefixed with the language-less xx: prefix, and there is a new brands_hierarchy field (see tags schema) - PR</li> </ul> <p>Non-breaking changes:</p> <ul> <li>Added schema_version field</li> </ul>"},{"location":"api/ref-api-and-product-schema-change-log/#2024-12-12-product-version-1000-api-version-31-renamed-ecoscore_-fields-to-environmental_score_","title":"2024-12-12 - Product version 1000 - API version 3.1 - Renamed ecoscore_ fields to environmental_score_","text":"<p>Breaking changes:</p> <ul> <li>For legal reasons, we had to rename the Eco-Score to Green-Score. To make sure we won't have to update the schema again, we renamed the corresponding fields from ecoscore_ to the generic name environmental_score_</li> </ul>"},{"location":"api/ref-api-and-product-schema-change-log/#warning-non-breaking-changes-not-indicated-in-change-logs-below","title":"Warning: non-breaking changes not indicated in change logs below","text":"<p>There were lots of non-breaking changes (new fields) from 2012 to 2024. Those changes did not trigger a change to the API version, and their history has not been listed.</p>"},{"location":"api/ref-api-and-product-schema-change-log/#product-version-999-changed-barcode-normalization","title":"Product version 999 - Changed barcode normalization","text":"<p>The normalization of leading 0s has been changed. See Barcode normalization</p>"},{"location":"api/ref-api-and-product-schema-change-log/#product-version-998-api-version-3","title":"Product version 998 - API version 3","text":"<p>Breaking changes:</p> <ul> <li>All v3 responses (including product READ requests that use the route /api/v3/product/[barcode]) follow the same structure to indicate status (success or failure), errors and warnings.</li> <li>The shape, material and recycling properties of each packaging component are localized: we return a hash with an id and a lc_name field, instead of just an id.</li> </ul>"},{"location":"api/ref-api-and-product-schema-change-log/#product-version-997-api-version-2","title":"Product version 997 - API version 2","text":"<p>Breaking changes:</p> <ul> <li>The ingredients structure is now a nested structure, with sub-ingredients in the \"ingredients\" field of each ingredient. Previously sub-ingredients were listed at the end of ingredients.</li> </ul>"},{"location":"api/ref-api-and-product-schema-change-log/#product-version-996-api-version-1","title":"Product version 996 - API version 1","text":"<p>Breaking changes:</p> <ul> <li>For product READ requests, if the product does not exist, we return HTTP status code 404 instead of 200.</li> </ul>"},{"location":"api/ref-api-and-product-schema-change-log/#product-version-995-api-version-0","title":"Product version 995 - API version 0","text":"<p>This is considered the initial version.</p>"},{"location":"api/ref-barcode-normalization/","title":"Reference: Barcode Normalization","text":"<p>This reference describes how barcodes are normalized in Open Food Facts.</p>"},{"location":"api/ref-barcode-normalization/#the-problem-barcodes-may-be-prefixed-by-a-varying-number-of-0s","title":"The problem: barcodes may be prefixed by a varying number of 0s","text":"<p>Different types of barcodes can be found on products. The most common are:</p> <ul> <li>EAN-13 / GTIN-13: 13 digit barcode</li> <li>EAN-8: 8 digit barcode, short version of EAN-13 barcodes that have 5 leading 0s</li> <li>UPC-A / UPC-12: 12 digit barcode that were used mostly in the US and Canada. A leading 0 can be added to get the corresponding EAN-13.</li> <li>UPC-E: 7 digit barcode, short version of UPC-A</li> <li>EAN-14 / GTIN-14: used for non-consumer facing products (e.g. a case of individal products). a leading 0 can be added to EAN-13 to get the corresponding EAN-14.</li> </ul> <p>The same code could be printed on products with a different number of leading 0s. Additionally, some barcode scanners may add or remove leading 0s.</p> <p>As the barcode is used as the key in Open Food Facts, we can end up with duplicate products that just differ by the number of leading 0s.</p>"},{"location":"api/ref-barcode-normalization/#the-solution-barcode-normalization","title":"The solution: barcode normalization","text":"<p>In Open Food Facts, we choose to fix the number of leading 0s in this way:</p> <p>All barcodes with 7 digits or less (after leading 0s are removed) are padded with leading 0s so that they have 8 digits.</p> <p>All barcodes with 9 to 12 digits are padded with leading 0s so that they have 13 digits.</p> <p>The \"code\" field in the product database, database dumps and exports is normalized in this way.</p>"},{"location":"api/ref-barcode-normalization/#normalization-of-barcodes-in-the-api","title":"Normalization of barcodes in the API","text":"<p>The Open Food Facts API automatically normalize the barcode passed in the \"code\" field for both READ and WRITE requests.</p> <p>So a request for the 12 digit barcode 034000470693 will return the product saved with \"code\" 0034000470693.</p>"},{"location":"api/ref-cheatsheet/","title":"Reference: API CheatSheet","text":"<p>This reference cheatsheet gives you a quick reminder to send requests to the OFF API.</p> <p>If you are new to API usage you might look at the tutorial. Also, refer to the API reference documentation for complete information.</p>"},{"location":"api/ref-cheatsheet/#addedit-an-existing-product","title":"Add/Edit an Existing Product","text":""},{"location":"api/ref-cheatsheet/#indicate-the-absence-of-nutrition-facts","title":"Indicate the absence of nutrition facts","text":"<pre><code>no_nutrition_data=on (indicates if the nutrition facts are not indicated on the food label)\n</code></pre>"},{"location":"api/ref-cheatsheet/#add-nutrition-facts-values-units-and-base","title":"Add nutrition facts values, units and base","text":"<pre><code>nutrition_data_per=100g\n\nOR\n\nnutrition_data_per=serving\nserving_size=38g\n</code></pre> <pre><code>nutriment_energy=450\nnutriment_energy_unit=kJ\n</code></pre>"},{"location":"api/ref-cheatsheet/#adding-values-to-a-field-that-is-already-filled","title":"Adding values to a field that is already filled","text":"<p>You just have to prefix <code>add_</code> before the name of the field</p> <pre><code>add_categories\nadd_labels\nadd_brands\n</code></pre>"},{"location":"api/ref-cheatsheet/#adding-nutrition-facts-for-the-prepared-product","title":"Adding nutrition facts for the prepared product","text":"<p>You can send prepared nutritional values</p> <ul> <li>nutriment_energy-kj (regular)</li> <li>nutriment_energy-kj_prepared (prepared)</li> </ul>"},{"location":"api/ref-cheatsheet/#search-for-products","title":"Search for Products","text":"<p>Important: full text search currently works only for v1 API (or search-a-licious, which is in beta)</p> <ul> <li>Documentation for v1 Search API</li> </ul> <ul> <li>Reference documentation for v2 search API</li> </ul> <ul> <li>The future of search in Open Food Facts is the search-a-licious project, deployed, in beta, at search.openfoodfacts.org. It has an API: Search-a-licious API</li> </ul>"},{"location":"api/ref-cheatsheet/#get-suggestions-for-fields","title":"Get suggestions for fields","text":""},{"location":"api/ref-cheatsheet/#new-solution-search-a-licious-has-all-actually-used-values","title":"New solution: Search-a-licious (has all actually used values)","text":"<p>Get brands, categories, labels\u2026 suggestions using the Search-a-licious API.  You can also use the classic suggest.pl route</p>"},{"location":"api/ref-cheatsheet/#legacy-solution-suggestpl-has-all-taxonomized-values-and-only-taxonomized-values","title":"Legacy solution: suggest.pl (has all taxonomized values, and only taxonomized values)","text":"<ul> <li>https://world.openfoodfacts.org/cgi/suggest.pl?tagtype=emb_codes&amp;term=FR</li> <li>https://world.openfoodfacts.org/cgi/suggest.pl?tagtype=categories&amp;term=f</li> <li>https://world.openfoodfacts.org/cgi/suggest.pl?tagtype=labels&amp;term=f</li> <li>https://world.openfoodfacts.org/cgi/suggest.pl?tagtype=ingredients&amp;term=f</li> <li>https://world.openfoodfacts.org/cgi/suggest.pl?tagtype=packaging_shapes&amp;term=f</li> <li>https://world.openfoodfacts.org/cgi/suggest.pl?tagtype=packaging_materials&amp;term=f</li> <li>https://world.openfoodfacts.org/cgi/suggest.pl?tagtype=packaging_shapes&amp;term=f</li> <li>https://world.openfoodfacts.org/cgi/suggest.pl?tagtype=languages&amp;term=f</li> <li>https://world.openfoodfacts.org/cgi/suggest.pl?tagtype=stores&amp;term=f</li> <li>https://world.openfoodfacts.org/cgi/suggest.pl?tagtype=brands&amp;term=f</li> <li>https://world.openfoodfacts.org/cgi/suggest.pl?tagtype=countries&amp;term=f</li> <li>https://world.openfoodfacts.org/cgi/suggest.pl?tagtype=traces&amp;term=f</li> <li>https://world.openfoodfacts.org/cgi/suggest.pl?tagtype=origins&amp;term=f</li> <li>https://world.openfoodfacts.org/cgi/suggest.pl?tagtype=states&amp;term=f</li> <li>https://world.openfoodfacts.org/cgi/suggest.pl?tagtype=nutrients&amp;term=f</li> <li>https://world.openfoodfacts.org/cgi/suggest.pl?tagtype=additives&amp;term=f</li> <li>https://world.openfoodfacts.org/cgi/suggest.pl?tagtype=allergens&amp;term=f</li> <li>https://world.openfoodfacts.org/cgi/suggest.pl?tagtype=minerals&amp;term=f</li> </ul>"},{"location":"api/ref-cheatsheet/#get-data-for-a-list-of-products","title":"Get data for a list of products","text":"<p>You can use comma to separate multiple values of a query parameter. This allows you to make bulk requests. The product result can also be limited to specified data using <code>fields</code>.</p> <pre><code>https://world.openfoodfacts.org/api/v2/search?code=3263859883713,8437011606013,6111069000451&amp;fields=code,product_name\n</code></pre>"},{"location":"api/ref-cheatsheet/#get-taxonomy-based-suggestions-v3-api","title":"Get taxonomy-based suggestions (v3 API)","text":"<p>The v3 API provides suggestions based on taxonomy fields such as synonyms, categories, and packaging shapes.</p>"},{"location":"api/ref-cheatsheet/#reference-documentation","title":"Reference documentation:","text":"<p>https://openfoodfacts.github.io/openfoodfacts-server/api/ref-v3/#get-/api/v3/taxonomy_suggestions</p>"},{"location":"api/ref-cheatsheet/#example-requests","title":"Example requests:","text":"<p>Get suggestions from synonyms <pre><code>https://world.openfoodfacts.org/api/v3/taxonomy_suggestions?tagtype=labels&amp;lc=fr&amp;string=f&amp;get_synonyms=1\n</code></pre> Get suggestions for a specific category <pre><code>https://world.openfoodfacts.org/api/v3/taxonomy_suggestions?tagtype=categories&amp;string=organic\n</code></pre> Get suggestions based on packaging shape <pre><code>https://world.openfoodfacts.org/api/v3/taxonomy_suggestions?tagtype=packaging_materials&amp;shape=box\n</code></pre></p>"},{"location":"api/ref-v2/","title":"Reference OpenAPI documentation for v2","text":"<p>See api.yaml for edition.</p> <p>Do not write anything here, it is meant to be overwritten by html generated from api.yaml</p>"},{"location":"api/ref-v3/","title":"Reference OpenAPI documentation for v3","text":"<p>See api-v3.yaml for edition.</p> <p>Do not write anything here, it is meant to be overwritten by html generated from api-v3.yaml</p>"},{"location":"api/tutorial-dev-journey/","title":"Tutorials for Common developer journeys","text":""},{"location":"api/tutorial-dev-journey/#read-only-journeys","title":"READ only journeys","text":"<ul> <li>Dev Journey : Comparing sodas</li> <li>Dev Journey : Finding healthy breakfast cereals</li> <li>Dev Journey : Scanning barcodes</li> </ul>"},{"location":"api/tutorial-dev-journey/#read-and-write-journeys","title":"READ and WRITE journeys","text":"<ul> <li>Dev Journey : Adding missing products</li> <li>Dev Journey : Get the Nutri-Score</li> <li>Dev Journey : Get the Green-Score</li> <li>Dev Journey : Get ingredient related analysis on new or existing products (Nova, allergens, additives\u2026)</li> <li>Dev Journey : Adding non-standard fields to a food product using Folksonomy (coming soon for cosmetics, pet food, and other products)</li> <li>Dev Journey : Retrieving and adding prices to products using Open Prices</li> </ul>"},{"location":"api/tutorial-dev-journey/#adding-more-journeys","title":"Adding more journeys","text":"<ul> <li>If you feel a developer journey is missing, or want to correct one,   feel free to create a Pull Request, or propose it at reuse@openfoodfacts.org</li> </ul>"},{"location":"api/tutorial-off-api/","title":"Tutorial on using the Open Food Facts API","text":"<p>Welcome to this tutorial on basic usage of Open Food Facts API.</p> <p>First, be sure to see our Introduction to the API.</p>"},{"location":"api/tutorial-off-api/#scan-a-product-to-get-nutri-score","title":"Scan A Product To Get Nutri-score","text":"<p>This basic tutorial shows you can get the Nutri-score of a product, for instance, to display it in a mobile app after scanning the product barcode. Let's use Nutella Ferrero as the product example for this tutorial.</p> <p>To get a product nutriscore, send a request to the Get A Product By Barcode endpoint.</p>"},{"location":"api/tutorial-off-api/#authentication","title":"Authentication","text":"<p>Usually, no authentication is required to query Get A Product Nutri-score. However, there is a basic auth to avoid content indexation in the staging environment (which is used throughout this tutorial). For more details, visit the Open Food Facts API Environment.</p>"},{"location":"api/tutorial-off-api/#describing-the-get-request","title":"Describing the Get Request","text":"<p>Make a <code>GET</code> request to the <code>Get A Product By Barcode</code> endpoint.</p> <pre><code>https://world.openfoodfacts.net/api/v2/product/{barcode}\n</code></pre> <p>The <code>{barcode}</code> is the barcode number of the product you are trying to get. The barcode for Nutella Ferrero is 3017624010701. Then the request path to get product data for Nutella Ferrero will look like this:</p> <pre><code>https://world.openfoodfacts.net/api/v2/product/3017624010701\n</code></pre> <p>The response returns every data about Nutella Ferrero on the database. To get the nutriscore, we need to limit the response by specifying the nutriscore field, which is the <code>nutrition_grades</code> and <code>product_name</code>. {/ /}</p>"},{"location":"api/tutorial-off-api/#query-parameters","title":"Query Parameters","text":"<p>To limit the response of the Get A Product By Barcode response, use query parameters to specify the product fields to be returned. In this example, you need one query parameter called <code>field</code> with the value <code>product_name,nutrition_grades</code>.</p> <p>The request path will now look like this:</p> <pre><code>https://world.openfoodfacts.net/api/v2/product/3017624010701?fields=product_name,nutriscore_data\n</code></pre>"},{"location":"api/tutorial-off-api/#nutri-score-response","title":"Nutri-Score Response","text":"<p>The response returned contains an object of the <code>code</code>, <code>product</code>, <code>status_verbose</code>, and <code>status</code>. The <code>product</code> object contains the fields specified in the query: the <code>product_name</code> and the <code>nutrition_grades</code>. The status also states if the product was found or not.</p> <pre><code>{\n    \"code\": \"3017624010701\",\n    \"product\": {\n        \"nutrition_grades\": \"e\",\n        \"product_name\": \"Nutella\"\n    },\n    \"status\": 1,\n    \"status_verbose\": \"product found\"\n}\n</code></pre>"},{"location":"api/tutorial-off-api/#nutri-score-computation","title":"Nutri-Score Computation","text":"<p>If you would like to be able to show how the score is computed, add some extra fields like <code>nutriscore_data</code> and <code>nutriments</code>.</p> <p>The request path to get the Nutri-Score computation for Nutella-Ferrero will be :</p> <pre><code>https://world.openfoodfacts.net/api/v2/product/3017624010701?fields=product_name,nutriscore_data,nutriments,nutrition_grades\n</code></pre> <p>The <code>product</code> object in the response now contains the extra fields to show how the nutriscore was computed.</p> <pre><code>{\n    \"code\": \"3017624010701\",\n    \"product\": {\n        \"nutriments\": {\n            \"carbohydrates\": 57.5,\n            \"carbohydrates_100g\": 57.5,\n            \"carbohydrates_unit\": \"g\",\n            \"carbohydrates_value\": 57.5,\n            \"energy\": 2255,\n            \"energy-kcal\": 539,\n            \"energy-kcal_100g\": 539,\n            \"energy-kcal_unit\": \"kcal\",\n            ...,\n            ...,\n            \"sugars\": 56.3,\n            \"sugars_100g\": 56.3,\n            \"sugars_unit\": \"g\",\n            \"sugars_value\": 56.3\n        },\n        \"nutriscore_data\": {\n            \"energy\": 2255,\n            \"energy_points\": 6,\n            \"energy_value\": 2255,\n            ...,\n            ...,\n            \"sugars_points\": 10,\n            \"sugars_value\": 56.3\n        },\n        \"nutrition_grades\": \"e\",\n        \"product_name\": \"Nutella\"\n    },\n    \"status\": 1,\n    \"status_verbose\": \"product found\"\n}\n</code></pre> <p>For more details, see the reference documentation for Get A Product By Barcode.</p> <p>{/ /}</p>"},{"location":"api/tutorial-off-api/#completing-products-to-get-the-nutri-score","title":"Completing products to get the Nutri-Score","text":""},{"location":"api/tutorial-off-api/#products-without-a-nutri-score","title":"Products without a Nutri-Score","text":"<p>When these fields are missing in a nutriscore computation response, it signifies that the product does not have a Nutri-Score computation due to some missing nutrition data. Let's look at the 100% Real Orange Juice. If the product nutrition data is missing some fields, you can volunteer and contribute to it by getting the missing tags and writing to the OFF API to add them.</p> <p>{/ /}</p> <p>To know the missing tags, check the <code>misc-tags</code> field from the product response.</p> <p><code>https://world.openfoodfacts.net/api/v2/product/0180411000803/100-real-orange-juice?fields=misc_tags</code></p> <p>The response shows the missing fields and category needed to compute the Nutri-Score.</p> <pre><code>{\n    \"code\": \"0180411000803\",\n    \"product\": {\n        \"misc_tags\": [\n            \"en:nutriscore-not-computed\",\n            \"en:nutriscore-missing-category\",\n            \"en:nutrition-not-enough-data-to-compute-nutrition-score\",\n            \"en:nutriscore-missing-nutrition-data\",\n            \"en:nutriscore-missing-nutrition-data-sodium\",\n            \"en:ecoscore-extended-data-not-computed\",\n            \"en:ecoscore-not-computed\",\n            \"en:main-countries-new-product\"\n        ]\n    },\n    \"status\": 1,\n    \"status_verbose\": \"product found\"\n}\n</code></pre> <p>The sample response above for 100% Real Orange Juice <code>misc_tags</code> shows that the Nutri-Score is missing category (<code>en:nutriscore-missing-category</code>) and sodium (salt) (<code>en:nutriscore-missing-nutrition-data-sodium</code>). Now you can write to the OFF API to provide these nutriment data (if you have them) so that the Nutri-Score can be computed.</p>"},{"location":"api/tutorial-off-api/#write-data-to-make-nutri-score-computation-possible","title":"Write data to make Nutri-Score computation possible","text":"<p>The WRITE operations in the OFF API require authentication. Therefore you need a valid <code>user_id</code>^[user_id_not_email] and <code>password</code> to write the missing nutriment data to 100% Real Orange Juice.</p> <p>Sign up on the Open Food Facts App to get your<code>user_id</code> and <code>password</code> if you don't have one.</p> <p>To write data to a product, make a <code>POST</code> request to the <code>Add or Edit A Product</code> endpoint.</p> <pre><code>https://world.openfoodfacts.net/cgi/product_jqm2.pl\n</code></pre> <p>Add your valid <code>user_id</code> and <code>password</code> as body parameters to your request for authentication. The <code>code</code> (barcode of the product to be added/edited), <code>user_id</code>, and <code>password</code> are required when adding or editing a product. Then, include other product data to be added in the request body.</p> <p>To write <code>sodium</code> and <code>category</code> to 100% Real Orange Juice so that the Nutri-Score can be computed, the request body should contain these fields:</p> Key Value Description user_id *** A valid user_id password *** A valid password code 0180411000803 The barcode of the product to be added/edited nutriment_sodium 0.015 Amount of sodium nutriment_sodium_unit g Unit of sodium relative to the amount categories Orange Juice Category of the Product Using curl: <pre><code>curl -XPOST -x POST https://world.openfoodfacts.net/cgi/product_jqm2.pl \\\n  -F user_id=your_user_id -F password=your_password \\\n  -F code=0180411000803 -F nutriment_sodium=0.015 -F nutriment_sodium_unit=g -F categories=\"Orange Juice\"\n</code></pre> <p>If the request is successful, it returns a response that indicates that the fields have been saved.</p> <pre><code>{\n    \"status_verbose\": \"fields saved\",\n    \"status\": 1\n}\n</code></pre> <p>^[user_id_not_email]: user_id is the username of your account. You must not use your email address.</p>"},{"location":"api/tutorial-off-api/#read-newly-computed-nutri-score","title":"Read newly computed Nutri-Score","text":"<p>Now, let's check if the Nutri-Score for 100% Real Orange Juice has been computed now that we have provided the missing data. Make a GET request to <code>https://world.openfoodfacts.net/api/v2/product/0180411000803?fields=product_name,nutriscore_data,nutriments,nutrition_grades</code> for Nutri-Score of 100% Real Orange Juice. The response now contains the Nutri-Score computation:</p> <pre><code>{\n    \"code\": \"0180411000803\",\n    \"product\": {\n        \"nutriments\": {\n            \"carbohydrates\": 11.864406779661,\n            .\n            .\n            .\n            \"sugars_unit\": \"g\",\n            \"sugars_value\": 11.864406779661\n        },\n        \"nutriscore_data\": {\n            \"energy\": 195,\n            \"energy_points\": 7,\n            \"energy_value\": 195,\n            .\n            .\n            .\n            \"sugars_value\": 11.86\n        },\n        \"nutrition_grades\": \"c\",\n        \"product_name\": \"100% Real Orange Juice\"\n    },\n    \"status\": 1,\n    \"status_verbose\": \"product found\"\n}\n</code></pre> <p>For more details, see the reference documentation for Add or Edit A Product</p> <p>You can also check the reference cheatsheet to know how to add/edit other types of product data.</p> <p>{/ /}</p>"},{"location":"api/tutorial-off-api/#search-for-a-product-by-nutri-score","title":"Search for a Product by Nutri-score","text":"<p>Using the Open Food Facts API, you can filter products based on different criteria. To search for products in the Orange Juice category with a nutrition_grade of <code>c</code>, query the Search for Products endpoint.</p> <p>Note: we describe here the v2 search API, but beware that only v1 search API supports full text search.</p>"},{"location":"api/tutorial-off-api/#describing-the-search-request","title":"Describing the Search Request","text":"<p>Make a <code>GET</code> request to the <code>Search for Products</code> endpoint.</p> <pre><code>https://world.openfoodfacts.org/api/v2/search\n</code></pre> <p>Add the search criteria used to filter the products as query parameters.  For Orange Juice with a nutrition_grade of <code>c</code>, add query parameters <code>categories_tags_en</code> to filter <code>Orange Juice</code> while <code>nutrition_grades_tags</code> to filter <code>c</code>.  The response will return all the products in the database with the category <code>Orange Juice</code> and nutrition_grade <code>c</code>.</p> <pre><code>https://world.openfoodfacts.net/api/v2/search?categories_tags_en=Orange Juice&amp;nutrition_grades_tags=c\n</code></pre> <p>To limit the response, add <code>fields</code> to the query parameters to specify the fields to be returned in each product object response.  For this tutorial, limit the response to <code>code</code>, <code>product_name</code>, <code>nutrition_grades</code>, and <code>categories_tags_en</code>.</p> <pre><code>https://world.openfoodfacts.net/api/v2/search?categories_tags_en=Orange Juice&amp;nutrition_grades_tags=c&amp;fields=code,nutrition_grades,categories_tags_en\n</code></pre> <p>The response returns all products that belong to the Orange Juice category, with the nutrition_grade \"c\" and limits each product object response to only the specified fields.  It also returns the count(total number) of products that match the search criteria.</p> <pre><code>{\n    \"count\": 1629,\n    \"page\": 1,\n    \"page_count\": 24,\n    \"page_size\": 24,\n    \"products\": [\n        {\n            \"categories_tags_en\": [\n                \"Plant-based foods and beverages\",\n                \"Beverages\",\n                \"Plant-based beverages\",\n                \"Fruit-based beverages\",\n                \"Juices and nectars\",\n                \"Fruit juices\",\n                \"Concentrated fruit juices\",\n                \"Orange juices\",\n                \"Concentrated orange juices\"\n            ],\n            \"code\": \"3123340008288\",\n            \"nutrition_grades\": \"c\"\n        },\n        .\n        .\n        .\n        {\n            \"categories_tags_en\": [\n                \"Plant-based foods and beverages\",\n                \"Beverages\",\n                \"Plant-based beverages\",\n                \"Fruit-based beverages\",\n                \"Juices and nectars\",\n                \"Fruit juices\",\n                \"Non-Alcoholic beverages\",\n                \"Orange juices\",\n                \"Squeezed juices\",\n                \"Squeezed orange juices\"\n            ],\n            \"code\": \"3608580844136\",\n            \"nutrition_grades\": \"c\"\n        }\n    ],\n    \"skip\": 0\n}\n</code></pre>"},{"location":"api/tutorial-off-api/#sorting-search-response","title":"Sorting Search Response","text":"<p>You can proceed to also sort the search response by different fields, for example, sort by the product that was modified last or even by the product_name. Now, let's sort the products with Orange Juice and a nutrition_grade of \"c\" by when they were last modified. To sort the search response, add the <code>sort_by</code> with value <code>last_modified_t</code> as a query parameter to the request.</p> <pre><code>https://world.openfoodfacts.net/api/v2/search?nutrition_grades_tags=c&amp;fields=code,nutrition_grades,categories_tags_en&amp;categories_tags_en=Orange Juice&amp;sort_by=last_modified_t\n</code></pre> <p>The date that each product was last modified is now used to order the product response.</p> <pre><code>{\n    \"count\": 1629,\n    \"page\": 1,\n    \"page_count\": 24,\n    \"page_size\": 24,\n    \"products\": [\n        {\n            \"categories_tags_en\": [\n                \"Plant-based foods and beverages\",\n                \"Beverages\",\n                \"Plant-based beverages\",\n                \"Fruit-based beverages\",\n                \"Juices and nectars\",\n                \"Fruit juices\",\n                \"Orange juices\"\n            ],\n            \"code\": \"3800014268048\",\n            \"nutrition_grades\": \"c\"\n        },\n        '\n        '\n        '\n        {\n            \"categories_tags_en\": [\n                \"Plant-based foods and beverages\",\n                \"Beverages\",\n                \"Plant-based beverages\",\n                \"Fruit-based beverages\",\n                \"Juices and nectars\",\n                \"Fruit juices\",\n                \"Orange juices\",\n                \"Squeezed juices\",\n                \"Squeezed orange juices\"\n            ],\n            \"code\": \"4056489641018\",\n            \"nutrition_grades\": \"c\"\n        }\n    ],\n    \"skip\": 0\n}\n</code></pre> <p>To see other examples of sorting a search response, see the reference documentation for Search for Products.</p>"},{"location":"api/tutorial-uploading-photo-to-a-product/","title":"Tutorial on uploading images to the Open Food Facts API","text":"<p>This basic tutorial shows you how to upload an image of a product to the Open Food Facts API.</p> <p>Be sure to also read the introduction to the API</p>"},{"location":"api/tutorial-uploading-photo-to-a-product/#points-to-consider-before-uploading-photos","title":"Points to consider before uploading photos","text":""},{"location":"api/tutorial-uploading-photo-to-a-product/#why-photos-are-important-on-open-food-facts","title":"Why photos are important on Open Food Facts","text":"<ul> <li>Photos are source and proof of data.</li> <li>They build trust in your edit.</li> <li>They are the fastest and easiest way for your users to contribute</li> </ul>"},{"location":"api/tutorial-uploading-photo-to-a-product/#image-license","title":"Image license","text":"<p>Product images must be under the Creative Commons Attribution ShareAlike licence. If you don't own the image, don't upload it. Do not upload scraped content from the internet. Only upload content taken by final users. If you have content from producers, please get in touch with producers@openfoodfacts.org before any upload.</p> <p>That means you should either upload:</p> <ul> <li>photos that are your own work</li> <li>photos taken by your users, with their consent for this license (should be part of your service terms)</li> <li>photos already under this license or a compatible license (cc-by, cc-0 or public domain)</li> </ul>"},{"location":"api/tutorial-uploading-photo-to-a-product/#image-quality","title":"Image Quality","text":"<p>Uploading quality photos of a product, its ingredients, and the nutrition table is essential because it enables the Open Food Facts OCR system to retrieve important data to analyze the product. The minimal allowed size for photos is 640 x 160 px.</p>"},{"location":"api/tutorial-uploading-photo-to-a-product/#upload-behavior","title":"Upload Behavior","text":"<p>In case you upload more than one photo of the front, the ingredients, the nutrition facts, or the product packaging components, beware that only the latest \"selected\" photo of each category will be displayed on the product page on the website and on the mobile application. The older ones are saved and can be \"selected\" by an API call or via the editing interface (website and mobile application). You can also upload some photos that are neither of that 4 categories, but they will not be displayed by default. However, all photos will be saved.</p>"},{"location":"api/tutorial-uploading-photo-to-a-product/#label-languages","title":"Label Languages","text":"<p>Multilingual products have several photos based on the languages present on the packaging. You can specify the language by adding a lang code suffix to the image field.</p>"},{"location":"api/tutorial-uploading-photo-to-a-product/#authentication","title":"Authentication","text":"<p>The WRITE operations in the Open Food Facts API require authentication. Therefore you need a valid <code>user_id</code>^[user_id_not_email] and <code>password</code> to write the photo to 100% Real Orange Juice.</p> <p>Sign up on the Open Food Facts App to get your <code>user_id</code> and <code>password</code> if you dont have one. For more details, visit the : Authentication paragraph in our introduction.</p> <p>^[user_id_not_email]: user_id is the username of your account. You must not use your email address.</p>"},{"location":"api/tutorial-uploading-photo-to-a-product/#parameters","title":"Parameters","text":""},{"location":"api/tutorial-uploading-photo-to-a-product/#code","title":"Code","text":"<p>The barcode of the product.</p>"},{"location":"api/tutorial-uploading-photo-to-a-product/#imagefield","title":"Imagefield","text":"<p><code>imagefield</code> indicates the type of image you are trying to upload for a particular product. It can be either of these: <code>front</code>, <code>ingredients</code>, <code>nutrition</code>, <code>packaging</code> or <code>other</code>. You can also specify the language in that image by adding a suffix of the language code to the <code>imagefield</code> value. For example \u2014 <code>front_en</code>, <code>packaging_fr</code>.</p>"},{"location":"api/tutorial-uploading-photo-to-a-product/#imageupload","title":"ImageUpload","text":"<p><code>imageupload</code> must contain the binary content of the image. This field name is dependent on the  <code>imagefield</code>.  It must be <code>imgupload_</code> suffixed by the value of the <code>imagefield</code> stated earlier. Here are some examples:</p> <ul> <li>imgupload_front (if imagefield=front)</li> <li>imgupload_ingredients_fr (if imagefield=ingredients_fr)</li> <li>imgupload_nutrition (if imagefield=nutrition)</li> <li>imgupload_packaging (if imagefield=packaging)</li> </ul>"},{"location":"api/tutorial-uploading-photo-to-a-product/#describing-the-post-request","title":"Describing the Post Request","text":"<p>To upload photos to a product, make a <code>POST</code> request to the <code>Add a Photo to an Existing Product</code> endpoint.</p> <pre><code>https://world.openfoodfacts.net/cgi/product_image_upload.pl\n</code></pre>"},{"location":"api/tutorial-uploading-photo-to-a-product/#upload-photo-of-a-product","title":"Upload Photo of a Product","text":"<p>Add a <code>user_id</code> and <code>password</code> as body parameters to the request for authentication. The <code>code</code> (barcode of the product to be updated) is required to indicate the product for the uploaded photo. Then, include other product data to be added in the request body.</p> <p>To add a new image for ingredients in English  to 100% Real Orange Juice, the request body should contain these fields :</p> Key Value Description user_id *** A valid user_id password *** A valid password code 0180411000803 The barcode of the product to be added/edited imagefield ingredients_en The type of image to be uploaded imgupload_ingredients_en file The binary content of the image of the product ingredients in English <p>If the image is in the <code>images/real-orange-juice-ingredients.jpg</code>, we can use curl (thanks to the special '@' attributes, which enables reading from a file):</p> <pre><code>curl -XPOST https://world.openfoodfacts.net/cgi/product_image_upload.pl \\\n  -F user_id=your_user_id -F password=your_password \\\n  -F code=0180411000803 -F imagefield=ingredients_en -F imgupload_ingredients_en=@images/real-orange-juice-ingredients.jpg\n</code></pre> <p>If the request is successful, it returns a response that indicates that the fields have been saved. You will also get the new image id in <code>imgid</code>.</p> <pre><code>{\n  \"files\": [\n    {\n      \"url\": \"/product/0180411000803/100%-real-orange-juice\",\n      \"filename\": \"\",\n      \"name\": \"100% Real Orange Juice\",\n      \"thumbnailUrl\": \"/images/products/018/041/100/0803.jpg\",\n      \"code\": \"0180411000803\"\n    }\n  ],\n  \"image\": {\n    \"thumb_url\": \"123.100.jpg\",\n    \"imgid\": 123,\n    \"crop_url\": \"123.400.jpg\"\n  },\n  \"imgid\": 123,\n  \"status\": \"status ok\",\n  \"imagefield\": \"ingredients_en\",\n  \"code\": \"0180411000803\"\n}\n</code></pre> <p>If the request is unsuccessful, the response returns <code>\"status\": \"status not ok\"</code> and an explanation in <code>debug</code> field.</p>"},{"location":"api/tutorials/adding-missing-products/","title":"Adding missing products","text":"<p>Dave regularly adds new products to the database and completes missing information via API calls. He has described the process below to show other developers how easy it is to contribute.</p>"},{"location":"api/tutorials/adding-missing-products/#authentication-and-header","title":"Authentication and Header","text":"<p>If you have an app that makes POST calls and you don't want your users to authenticate in Open Food Facts, you can create a global account. Dave has created a global account for the app he is developing with the following credentials:</p> <ul> <li><code>user_id</code>: myappname</li> <li><code>password</code>: 123456</li> </ul> <ul> <li>For a complete reference on AUTH, please read: Authentication in our introduction</li> </ul>"},{"location":"api/tutorials/adding-missing-products/#adding-images-to-support-your-edit-and-get-machine-learning-predictions","title":"Adding images to support your edit, and get machine learning predictions","text":"<p>If you ask your users just one thing, it would be to send photos of the packaging (front, ingredients, nutrition, recycling, the more the better) Please refer to our comprehensive tutorial on uploading images</p>"},{"location":"api/tutorials/adding-missing-products/#sending-the-right-country-and-language-parameters-based-on-the-country-your-user-is-located-in-and-the-language-the-product-is-in","title":"Sending the right country and language parameters, based on the country your user is located in, and the language the product is in.","text":"<p>Traditionaly we advised to define the subdomain for the query as <code>us</code>. The subdomain automatically defines the country code (<code>cc</code>) and language of the interface (<code>lc</code>). The country code determines that only the products sold in the US are displayed. The language of the interface for the country code US is English. In this case: https://us.openfoodfacts.org/cgi/product_jqm2.pl?\u200b\u200b\u200b\u200b\u200b\u200b\u200b</p> <p>We now advise to pass the cc and lc parameters within the query, and to limit assumptions as much as you can, especially in bilingual countries (e.g. Belgium, the US\u2026) but also other countries (some products can be imported). Ideally, your UI or some heuristic (traditional or using ML) on your side should determine which language(s) the data you send is in (e.g. for multilingual products, send the French ingredient list as a French ingredient list). We perform OCR on incoming images (even non selected ones), and make the JSON available immediately, so you can either leverage that (you upload the image, and then you select them in a second step, based on the OCR output from the Open Food Facts image server), or use on device ML to determine the proper language to send the call in.</p> <p>New documentation for cc and lc parameters\u200b\u200b\u200b\u200b\u200b\u200b\u200b</p> <p>Sample image and sample JSON you can base your heuristic on.</p>"},{"location":"api/tutorials/adding-missing-products/#product-barcode","title":"Product Barcode","text":"<p>After the version number, the word <code>code</code>, followed by its barcode must be added:</p> <p>https://us.openfoodfacts.org/cgi/product_jqm2.pl?code=0074570036004</p>"},{"location":"api/tutorials/adding-missing-products/#credentials","title":"Credentials","text":"<p>Dave adds his user credentials to the call as follows:</p> <p>https://us.openfoodfacts.org/cgi/product_jqm2.pl?code=0074570036004&amp;user_id=myappname&amp;password=**</p>"},{"location":"api/tutorials/adding-missing-products/#parameters","title":"Parameters","text":"<p>You can define one or more parameters to add, for example, the brand and the Kosher label:</p> <ul> <li><code>brands</code>: H\u00e4agen-Dazs</li> <li><code>labels</code>: kosher</li> </ul> <p>The call looks like this:</p> <p><code>POST https://us.openfoodfacts.org/cgi/product_jqm2.pl?code=0074570036004&amp;user_id=test&amp;password=test&amp;brands=H\u00e4agen-Dazs&amp;labels=kosher</code></p> <p>We strongly advise to use add_brands and add_labels instead, even on new products, to reduce the potential of your users or your API destroying data by mistake. brands or labels should be used if and only if you retrieve existing values, show them to your users, let them adjust them, and resend the whole dict with the proper format.</p>"},{"location":"api/tutorials/adding-missing-products/#adding-additional-information-to-existing-fields","title":"Adding Additional Information to Existing Fields","text":"<p>To add additional information to existing parameters, add the prefix <code>add_</code> to the parameter name.</p> <p>Important! If you don't use the <code>add_</code> prefix, the existing values will be deleted.</p> <p>Example</p> <p><code>POST https://us.openfoodfacts.org/cgi/product_jqm2.pl?code=0074570036004&amp;user_id=test&amp;password=test&amp;add_categories=Desserts</code></p> <p>To see the complete list of parameters, see the Parameters section.</p>"},{"location":"api/tutorials/adding-missing-products/#adding-a-comment-to-your-write-request","title":"Adding a Comment to your WRITE request.","text":"<p>Use the <code>comment</code> parameter to add the id of the user editing the product. The id should not contain any personal data.</p> <p>Important! The user id is not the identifier of an Open Food facts user, but the id generated by your system.</p> <p>It should be structured as: user-agent + user-id.</p> <p>Example</p> <p><code>comment=Edit by a Healthy Choices 1.2 iOS user - SxGFRZkFwdytsK2NYaDg4MzRVenNvUEI4LzU2a2JWK05LZkFRSWc9PQ</code></p>"},{"location":"api/tutorials/adding-missing-products/#leveraging-robotoff-ml-predictions-to-simplify-life-for-your-users","title":"Leveraging Robotoff ML predictions to simplify life for your users","text":"<p>Leveraging Robotoff prediction to simplify life for your users. You can get a category prediction from images (useful for Nutri-Score and Eco-Score), you can get quality labels prediction, brand predictions, weight predictions from images. You can also get an automatic extraction of ingredients and nutrition facts from an image. To achieve this you need the upload image section above. Adding data like product name, ingredients and nutrition can help, but some predictions can be done with just images.</p>"},{"location":"api/tutorials/adding-missing-products/#getting-your-users-to-check-ingredients-ocr-in-an-autonomous-fashion","title":"Getting your users to check ingredients OCR in an autonomous fashion","text":"<p>Getting your users to check ingredients OCR in an autonomous fashion</p>"},{"location":"api/tutorials/adding-missing-products/#getting-your-users-to-input-nutrition-facts","title":"Getting your users to input nutrition facts","text":"<p>Getting your users to input nutrition facts</p>"},{"location":"api/tutorials/adding-missing-products/#getting-your-users-to-input-packaging-data","title":"Getting your users to input packaging data","text":"<p>Getting your users to input packaging data</p>"},{"location":"api/tutorials/adding-missing-products/#showing-the-result-of-their-work","title":"Showing the result of their work","text":"<ul> <li>You can then reload the product, potentially using Knowledge Panels, to show the rewarding result of their work.</li> <li>Make sure to congratulate them each time for their contribution to Open Food Facts and the common good.</li> </ul>"},{"location":"api/tutorials/comparing-sodas/","title":"Comparing sodas","text":"<p>Dave wants his app to make an API call to provide Anna the information she needs to make a conscious choice when buying sodas.</p>"},{"location":"api/tutorials/comparing-sodas/#authentication-and-header","title":"Authentication and Header","text":"<p>To make the API query that returns the products that might be interesting for Anna, Dave doesn't need to authenticate (<code>READ</code> request).</p> <p>However, he has to add a <code>User-Agent</code> HTTP Header with the name of his app, the version, system and a url (if any), so that he doesn't get blocked by mistake.</p> <p>In this case, that would be: <code>User-Agent: HealthyFoodChoices - Android - Version 1.0</code></p>"},{"location":"api/tutorials/comparing-sodas/#subdomain","title":"Subdomain","text":"<p>Since Anna lives in NY, Dave wants to define the subdomain for the query as <code>us</code>. The subdomain automatically defines the country code (<code>cc</code>) and language of the interface (<code>lc</code>).</p> <p>The country code determines that only the products sold in the US are displayed. The language of the interface for the country code <code>us</code> is English.</p> <p>In this case:</p> <p>https://us.openfoodfacts.org</p>"},{"location":"api/tutorials/comparing-sodas/#api-version","title":"API Version","text":"<p>The current version number of the Open Food Facts API is v0.</p> <p>https://us.openfoodfacts.org/api/v0</p>"},{"location":"api/tutorials/comparing-sodas/#product-barcode","title":"Product Barcode","text":"<p>After the version number, the word \"product\", followed by its barcode must be added:</p> <p>https://us.openfoodfacts.org/api/v0/product/</p> <p>The app will provide Anna with information about additives, sugars and nutriscore of different types of colas, to help her make her purchase decision.</p> <p>Anna selects the products she wants to compare in the application (Coca-Cola, Pepsi, Coca-Cola diet, Coca-Cola zero and Pepsi diet). The app retrieves the corresponding barcodes and makes the following calls:</p> <ul> <li>Pepsico Pepsi Cola Soda: https://us.openfoodfacts.org/api/v0/product/01223004</li> <li>Coca-Cola Classic Coke Soft Drink https://us.openfoodfacts.org/api/v0/product/04963406</li> <li>Diet Pepsi https://us.openfoodfacts.org/api/v0/product/069000019832</li> <li>Coca-Cola Zero https://us.openfoodfacts.org/api/v0/product/5000112519945</li> </ul>"},{"location":"api/tutorials/contributing-to-image-refresh-api/","title":"Using the Image Refresh API","text":"<p>This tutorial explains how to use the Open Food Facts API to identify which product images are missing or outdated. This allows your application to prompt users to take or retake specific photos, helping keep the database current and complete. The more drastic solution is to put back the user into a refresh/completion pipeline before he can access the product.</p>"},{"location":"api/tutorials/contributing-to-image-refresh-api/#core-concept","title":"Core Concept","text":"<p>The goal is to request a special field, <code>images_to_update_[lang]</code>, for a given product. The API will return a list of key image types (front, ingredients, etc.) and a value indicating their status: either they are missing or they are old.</p>"},{"location":"api/tutorials/contributing-to-image-refresh-api/#the-api-endpoint","title":"The API Endpoint","text":"<p>To get the status of a product's images, you make a standard <code>GET</code> request to the product endpoint and specify the <code>images_to_update_[lang]</code> in the <code>fields</code> parameter.</p> <p>URL Structure:</p> <pre><code>https://{world|fr|...}.openfoodfacts.org/api/v2/product/[BARCODE]?fields=images_to_update_[LANG]\n</code></pre> <p>Parameters:</p> <p>- <code>[BARCODE]</code>: The barcode of the product you are querying.   - <code>[LANG]</code>: The two-letter ISO language code for which you want to check the images (e.g., <code>en</code>, <code>fr</code>, <code>de</code>). Your application should use its current language setting here.</p> <p>Example Request:</p> <p>Here is a request for the French (<code>fr</code>) images for product <code>3483130043180</code>.</p> <pre><code>https://fr.openfoodfacts.org/api/v2/produit/3483130043180?fields=images_to_update_fr\n</code></pre>"},{"location":"api/tutorials/contributing-to-image-refresh-api/#understanding-the-api-response","title":"Understanding the API Response","text":"<p>The API returns a standard product JSON object, but it will only contain the <code>images_to_update_[lang]</code> field you requested.</p> <p>Sample Response:</p> <pre><code>{\n  \"product\": {\n    \"images_to_update_fr\": {\n      \"packaging_fr\": 0,\n      \"front_fr\": 83734290,\n      \"ingredients_fr\": 83734290\n    }\n  }\n}\n</code></pre> <p>Interpreting the Response:</p> <p>The <code>images_to_update_fr</code> object contains key-value pairs.</p> <ul> <li>Key: The key is a combination of the image type and the language code, separated by an underscore (e.g., <code>front_fr</code>). The main image types are:       - <code>front</code>       - <code>ingredients</code>       - <code>nutrition</code>       - <code>packaging</code><ul> <li>Value: The value tells you the status of the image.     - <code>0</code>: The image does not exist. The user should be prompted to take a new picture.     - <code>&gt; 0</code>: The image exists but is old. The value is the age of the image in seconds. The user should be prompted to refresh it with a new one.</li> </ul> </li> </ul>"},{"location":"api/tutorials/contributing-to-image-refresh-api/#client-side-implementation-logic","title":"Client-Side Implementation Logic","text":"<p>Your application should parse this response to dynamically generate calls to action (like buttons).</p>"},{"location":"api/tutorials/contributing-to-image-refresh-api/#generating-button-text","title":"Generating Button Text","text":"<p>Here is a pseudo-code example demonstrating how to create button text based on the API response.</p> <pre><code>// Assume 'images_to_update' is the object from the API response\n// e.g., { packaging_fr: 0, front_fr: 83734290 }\n\nfor (key, value) in images_to_update:\n    // 1. Determine the action (verb)\n    let verb = \"\"\n    if value == 0:\n        verb = \"Take\"  // Image is missing\n    else:\n        verb = \"Refresh\" // Image is old\n\n    // 2. Get the field name and language\n    // e.g., \"front_fr\" -&gt; [\"front\", \"fr\"]\n    let parts = key.split(\"_\")\n    let field_name = parts[0]\n    let field_language = parts[1] // Useful for localization\n\n    // 3. Create the button text\n    // You would use localized strings in a real app\n    let button_text = `${verb} ${field_name} picture`\n\n    // Now, create a button with this text.\n    // e.g., \"Refresh front picture\", \"Take packaging picture\"\n</code></pre>"},{"location":"api/tutorials/contributing-to-image-refresh-api/#optional-displaying-the-image-age","title":"Optional: Displaying the Image Age","text":"<p>For images that need refreshing (where the value is <code>&gt; 0</code>), you can provide more context to the user by converting the age in seconds to a human-readable format.</p> <p>Example Conversion Logic:</p> <p>You can use a library or a simple function to convert seconds into years, months, days, etc.</p> <pre><code>function formatTime(seconds) {\n  if (seconds &lt; 60) return \"just now\";\n\n  const units = {\n    year: 31536000,\n    month: 2592000,\n    week: 604800,\n    day: 86400,\n    hour: 3600,\n    minute: 60\n  };\n\n  for (let unit in units) {\n    const value = units[unit];\n    if (seconds &gt;= value) {\n      const count = Math.floor(seconds / value);\n      return `${count} ${unit}${count &gt; 1 ? 's' : ''} ago`;\n    }\n  }\n}\n\n// Using the value from the sample response\nlet age_in_seconds = 83734290;\nconsole.log(formatTime(age_in_seconds)); // Output: \"2 years ago\"\n</code></pre> <p>You can then display this next to your button: \"Refresh front picture (photo from 2 years ago)\".</p>"},{"location":"api/tutorials/creating-a-local-cache-of-open-food-facts-data/","title":"Open Food Facts Local Caching: A Tutorial","text":"<p>Open Food Facts (OFF) offers a rich dataset of food product information. Creating a local cache can enhance performance for your heavy-duty applications. This tutorial will guide you through the process, considerations, and best practices.</p>"},{"location":"api/tutorials/creating-a-local-cache-of-open-food-facts-data/#what-is-a-local-cache","title":"What is a Local Cache?","text":"<p>A local cache is a copy of OFF data stored directly on your system or server. This allows your application to retrieve information without constantly querying the main OFF API, improving speed and reliability.</p>"},{"location":"api/tutorials/creating-a-local-cache-of-open-food-facts-data/#current-caching-options","title":"Current Caching Options","text":"<ul> <li>FoodVisor Contributed (Python/MongoDB) backend: The FoodVisor startup contributed a few years ago a Python-based backend with a MongoDB export, providing a solid starting point for caching in Python environments.</li> <li>Project-Specific Caches: Several OFF projects like open-prices and robotoff have implemented local caches for their own needs. While not immediately reusable, they can serve as valuable references.</li> <li>SDKs We have a number of official SDKs that can be leveraged as part of a caching backend. Please leverage and contribute to those \ud83d\ude4f</li> <li>You can start a project within Open Food Facts to solve this</li> </ul>"},{"location":"api/tutorials/creating-a-local-cache-of-open-food-facts-data/#need-for-diverse-solutions","title":"Need for Diverse Solutions","text":"<p>We encourage developers who feel the need for very intensive operations not driven by user scans to create local caching solutions in various programming languages. These can be integrated into your own projects, and if well-designed, have the potential to become official OFF backends.</p>"},{"location":"api/tutorials/creating-a-local-cache-of-open-food-facts-data/#when-not-to-cache","title":"When NOT to Cache","text":"<p>For applications primarily focused on user-generated requests, a local cache may not be necessary. The OFF API can handle such many such requests efficiently, and direct API usage contributes to valuable scan statistics for the project.</p>"},{"location":"api/tutorials/creating-a-local-cache-of-open-food-facts-data/#licensing-and-data-sharing","title":"Licensing and Data Sharing","text":"<p>Even when using a local cache, you're still bound by the Open Database License (ODbL). Do not mix OFF data with external product data. All additions or modifications made to OFF data must be shared back to OFF, preferably through the WRITE API. Consider incorporating this functionality into your cache implementation. For more on legal issues please read this page</p>"},{"location":"api/tutorials/creating-a-local-cache-of-open-food-facts-data/#challenges-of-cache-maintenance","title":"Challenges of Cache Maintenance","text":"<p>Maintaining a cache can be complex due to the dynamic nature of OFF data.</p> <ul> <li>Immediate Updates: Any writes to OFF data should first go through automatic moderation on your end (see our tutorial about this). After successful submission to OFF, your local cache should be immediately refreshed.</li> <li>Real-Time Notifications (Future): Currently, there's no public API for real-time OFF updates stream. However, we have an internal system (REDIS) and are exploring options for a future 3rd party notification API. Express your interest by contacting reuse@openfoodfacts.org.</li> </ul>"},{"location":"api/tutorials/creating-a-local-cache-of-open-food-facts-data/#building-your-own-cache","title":"Building Your Own Cache","text":"<ol> <li>Choose Your Technology: Select a database or storage mechanism suitable for your language and project needs.</li> <li>Data Structure: Design a structure to efficiently store product information, categories, ingredients, etc.</li> <li>Synchronization: Develop processes to regularly fetch updates from the OFF API and refresh your cache.</li> <li>Data Validation: Implement mechanisms to validate the accuracy and integrity of the cached data.</li> <li>Sharing Back: Integrate the OFF WRITE API to automatically share any new or modified data.</li> </ol>"},{"location":"api/tutorials/creating-a-local-cache-of-open-food-facts-data/#get-involved","title":"Get Involved!","text":"<p>If you're building a local cache, we'd love to hear about it! Your contribution can benefit the entire OFF community. By sharing your solution, you have the opportunity to make it an official OFF backend.</p> <p>Let's work together to make Open Food Facts data even more accessible and useful!</p>"},{"location":"api/tutorials/finding-healthy-cereals/","title":"Finding healthy breakfast cereals","text":""},{"location":"api/tutorials/finding-healthy-cereals/#dave-wants-his-app-to-make-an-api-call-to-provide-stefano-healthy-plant-based-breakfast-cereals","title":"Dave wants his app to make an API call to provide Stefano healthy plant-based breakfast cereals.","text":"<ul> <li>This is a search usecase. Please note that search is not a good way to extract info from the database, and anyone trying to do that will be rate-limited and banned. Please use the https://world.openfoodfacts.org/data](https://world.openfoodfacts.org/data) for super convenient data export of the whole database and images that you can slice and dice easily.</li> <li>Also note that we have an elastic-based revamp of the Search API upcoming, called search-a-licious, and we need some more developper help to make it broadly available. You can join the effort at https://github.com/openfoodfacts/search-a-licious](https://github.com/openfoodfacts/search-a-licious) and on the Slack (https://slack.openfoodfacts.org](https://slack.openfoodfacts.org), #search channel)</li> </ul>"},{"location":"api/tutorials/finding-healthy-cereals/#authentication-and-header","title":"Authentication and Header","text":"<p>To make the API query that returns the products that might be interesting for Anna, Dave doesn't need to authenticate. However, he has to add a User-Agent HTTP Header with the name of his app, the version, system and a url (if any), not to be blocked by mistake.</p> <p>In this case, that would be: <code>User-Agent: HealthyFoodChoices - Android - Version 1.0</code></p>"},{"location":"api/tutorials/finding-healthy-cereals/#subdomain","title":"Subdomain","text":"<p>Since Stefano lives in Italy, Dave wants to define the subdomain for the query as us. The subdomain automatically defines the country code (<code>cc</code>) and language of the interface (<code>lc</code>).</p> <p>The country code determines that only the products sold in the Italy are displayed. The language of the interface for the country code <code>it</code> is Italian.</p> <p>In this case:</p> <p>https://it.openfoodfacts.org</p>"},{"location":"api/tutorials/finding-healthy-cereals/#query-parameters","title":"Query Parameters","text":"<p>Dave wants to fine-tune the query to provide Anna with the products that match her buying preferences. To do so, he wants to drill down the results to display only breakfast cereals.</p> <p>First, he adds the following sequence after the https call: <code>/cgi/search.pl?</code> (all search queries need to include this)</p> <p>Then, he defines some tags and the appropriate values: <code>action=process&amp;tagtype_0=categories&amp;tag_contains_0=contains&amp;tag_0=breakfast_cereals</code></p> <p>where:</p> <ul> <li><code>action</code> introduces the action to be performed (process)</li> <li><code>tagtype_0</code> adds the first search criterion (categories)</li> <li><code>tag_contains_0=contains</code> determines that the results should be included (note that you can exclude products from the search)</li> <li><code>tag_0</code> defines the category to be filtered by (breakfast_cereals)</li> </ul> <p>Note: The parameters are concatenated with <code>&amp;</code>.</p> <p>To retrieve breakfast cereals sold in the US, Dave makes the following: https://us.openfoodfacts.org/cgi/search.pl?action=process&amp;tagtype_0=categories&amp;tag_contains_0=contains&amp;tag_0=breakfast_cereals</p> <p>With this query, the nutrition facts of more than 200 products are displayed.</p> <p>Then, Dave wants to exclude the products that contain ingredients from palm oil. He adds a new parameter to the query:</p> <ul> <li><code>ingredients_from_palm_oil=without</code></li> </ul> <p>This parameter excludes the products that might contain palm oil ingredients from the search.</p> <p>https://us.openfoodfacts.org/cgi/search.pl?action=process&amp;tagtype_0=categories&amp;tag_contains_0=contains&amp;tag_0=breakfast_cereals&amp;ingredients_from_palm_oil=without</p> <p>Next, Dave adds another parameter to exclude the products that contain additives:</p> <ul> <li><code>additives=without</code></li> </ul> <p>The query is as follows:</p> <p>https://us.openfoodfacts.org/cgi/search.pl?action=process&amp;tagtype_0=categories&amp;tag_contains_0=contains&amp;tag_0=breakfast_cereals&amp;ingredients_from_palm_oil=without&amp;additives=without</p> <p>Finally, Dave adds another parameter to include only products with a nutriscore A. The nutriscore is a nutrition grade determined by the amount of healthy and unhealthy nutrients.</p> <ul> <li><code>tagtype_1=nutrition_grade</code></li> <li><code>tag_contains_1=contains</code></li> <li><code>tag_1=A</code></li> </ul> <p>The complete query looks like this:</p> <p>https://us.openfoodfacts.org/cgi/search.pl?action=process&amp;tagtype_0=categories&amp;tag_contains_0=contains&amp;tag_0=breakfast_cereals&amp;tagtype_1=nutrition_grades&amp;tag_contains_1=contains&amp;tag_1=A&amp;additives=without&amp;ingredients_from_palm_oil=without</p> <p>Add the json=true parameter to avoid scraping.</p> <p>https://us.openfoodfacts.org/cgi/search.pl?action=process&amp;tagtype_0=categories&amp;tag_contains_0=contains&amp;tag_0=breakfast_cereals&amp;tagtype_1=nutrition_grades&amp;tag_contains_1=contains&amp;tag_1=A&amp;additives=without&amp;ingredients_from_palm_oil=without&amp;json=true</p> <p>Anna can see now at a glance which products match her search criteria. In this case, around 20 brands of breakfast cereals.</p>"},{"location":"api/tutorials/folksonomy-engine/","title":"Folksonomy Engine","text":"<p>Folksonomy Engine API (Our K/V - Key-Value system to extend our data model in a collaborative way)</p> <ul> <li>The Experimental Folksonomy API allows you to add and read information beyond the traditional product format to Open Food Facts, Open Products Facts, Open Pet Food Facts and Open Beauty Facts.  </li> <li>The API is documented separately at https://api.folksonomy.openfoodfacts.org/docs</li> <li>You can see current key values at https://world.openfoodfacts.org/properties</li> <li>A reference implementation is available to logged in users on the website, and in DEV mode in the mobile app</li> <li>You can choose to implement a generic key value CRUD system, or have bespoke input and visualization interfaces, based on your usecase (for example a boolean toggle, or a date picker for introduction date\u2026 and a bespoke UI to show the value, with additional logic)</li> <li>Please be aware that there's a chance that all data added using this API could be deleted without notice, until we mark it as stable, due to unforeseen technical issues.</li> </ul>"},{"location":"api/tutorials/get-in-touch-with-openfoodfacts/","title":"Get in touch with OpenFoodFacts","text":""},{"location":"api/tutorials/get-in-touch-with-openfoodfacts/#tell-us-about-your-reuse","title":"Tell us about your reuse","text":"<ul> <li>We are very interested in learning what the Open Food Facts data is used for. It is not mandatory, but we would very much appreciate it if you tell us about your re-uses so that we can share them with the Open Food Facts community.</li> </ul>"},{"location":"api/tutorials/get-in-touch-with-openfoodfacts/#setting-up-a-dedicated-moderation-channel-for-apps-that-contribute","title":"Setting up a dedicated moderation channel for apps that contribute","text":"<ul> <li>We set up a moderation channel for apps that contribute, so that we can upstream any issues with your implementation (privately if you prefer).  Ask early for your channel if you're willing to send data, we will help you with implementation and refinements.</li> </ul>"},{"location":"api/tutorials/get-in-touch-with-openfoodfacts/#the-open-food-facts-reuse-showcase","title":"The Open Food Facts Reuse Showcase","text":"<ul> <li>You can fill this form to get an opportunity to get your app featured.</li> </ul>"},{"location":"api/tutorials/get-in-touch-with-openfoodfacts/#discussing-data-api-and-exports","title":"Discussing data, API and exports","text":"<ul> <li>You can look at\u00a0common FAQ questions about the API and Data Exports\u00a0and\u00a0common Open Food Facts questions</li> </ul> <ul> <li>You can\u00a0join the Open Food Facts Slack chatroom\u00a0which is the preferred way to ask questions and discuss the API. Please\u00a0ask your questions in the #api channel</li> </ul> <ul> <li>You can\u00a0open a thread on our API documentation repository</li> </ul> <ul> <li>For any question regarding the data, you can contact us at\u00a0reuse@openfoodfacts.org</li> </ul>"},{"location":"api/tutorials/get-ingredient-related-analysis/","title":"Get ingredient related analysis on new or existing products","text":""},{"location":"api/tutorials/get-ingredient-related-analysis/#dev-journey-6-get-ingredient-related-analysis-on-new-or-existing-products-presence-of-palm-oil-vegan-veggie-ultra-processed-foods-allergens-additives","title":"Dev Journey 6: Get ingredient related analysis on new or existing products (presence of palm oil, vegan, veggie, ultra-processed foods, allergens, additives\u2026)","text":"<p>https://docs.google.com/document/d/1avnxJr8_m6OjRBt0vgwBzlzaZB7Q6z14t0taMKIrkp0/edit</p>"},{"location":"api/tutorials/get-ingredient-related-analysis/#benefits","title":"Benefits","text":"<p>You can get information about absence or unawareness of the presence of:</p> <ul> <li>palm oil: <code>palm-oil-free</code>, <code>palm-oil</code>, <code>palm-oil-content-unknown</code>, <code>may-contain-palm-oil</code></li> <li>vegetarian ingredients: <code>vegetarian</code>, <code>non-vegetarian</code>, <code>vegetarian-status-unknown</code>, <code>maybe-vegetarian</code>.</li> <li>vegan ingredients: <code>vegan</code>, <code>non-vegan</code>, <code>vegan-status-unknown</code>, <code>maybe-vegan</code>.</li> <li>level of food processing (Nova)</li> <li>allergens</li> <li>additives</li> </ul> <p>Important! Parsing might not be perfect and the ingredient detection might have issues in some languages. For more information on how you can help improve it, read: https://github.com/openfoodfacts/openfoodfacts-server/blob/master/taxonomies/ingredients.txt</p>"},{"location":"api/tutorials/get-ingredient-related-analysis/#introduction","title":"Introduction","text":"<ul> <li>If you can't get the information on a specific product, you can get your user to send photos and data, that will then be processed by Open Food Facts AI and contributors to get the computed result you want to show them.</li> <li>You can implement the complete flow so that they get immediately the result with some effort on their side.</li> <li>That will ensure user satisfaction</li> <li>Most of the operations described below are implemented in the openfoodfacts-dart plugin, but as individual operations, not as a coherent pipe</li> </ul>"},{"location":"api/tutorials/get-ingredient-related-analysis/#flow","title":"Flow","text":""},{"location":"api/tutorials/get-ingredient-related-analysis/#the-product-does-not-exist","title":"The product does not exist","text":"<ul> <li>You can use our adding products tutorial</li> </ul>"},{"location":"api/tutorials/get-ingredient-related-analysis/#the-product-does-exist-get-the-status-of-the-product-and-show-prompts-in-case-of-incomplete-ingredients-or-category-also-required-for-nova-ultra-processing-levels","title":"The product does exist: Get the status of the product and show prompts in case of incomplete ingredients or category (also required for NOVA ultra-processing levels)","text":"<pre><code>if ( \nstatus= category-to-be-completed &amp;&amp; \nstatus = ingredients-to-be-completed \n)\nthen \"Add ingredients and a category to see the level of food processing and potential additives\"\n\nif ( \nstatus= category-to-be-completed\n)\nthen \"Add a category to see the level of food processing and potential additives\"\n\nif ( \nstatus = ingredients-to-be-completed \n)\nthen \"Add ingredients to see the level of food processing and potential additives\"\n</code></pre> <ul> <li>Once the user has entered once of your completion flow, proceed to the next step</li> </ul>"},{"location":"api/tutorials/get-ingredient-related-analysis/#upload-ingredient-photo","title":"Upload ingredient photo","text":"<ul> <li>Please follow our dedicated tutorial on photo upload</li> <li>The DART SDK is offering support for photo upload, and we encourage you to implement it in one of the official Open Food Facts SDKs if it's not supported yet.</li> <li>Ensure that your users crop language by language, or take all languages at once, but you perform server side cropping on one specific language before performing the OCR</li> <li>We're working on a ML solution to detect languages and performing auto-crops per language (reuse@openfoodfacts.org to learn more)</li> <li>If you want to skip the next step, try to get rotation, cropping right at this stage</li> </ul>"},{"location":"api/tutorials/get-ingredient-related-analysis/#adjusting-the-photo-selecting-rotating-and-cropping","title":"Adjusting the photo (Selecting, Rotating and Cropping)","text":"<ul> <li>Selecting, cropping and rotating photos are non-destructive actions. That means, the original version of the image uploaded to the system is kept as is. The subsequent changes made to the image are also stored as versions of the original image.</li> </ul> <ul> <li>The actions described in this topic do not modify the image, but provide metadata on how to use it (the data of the corners in the case of selection and the data of the rotation). That is, you send an image to the API, provide an id, you define, for example, the cropping and rotation parameters and as a response, the server generates a new image as requested and you can call this new version of the image.</li> </ul>"},{"location":"api/tutorials/get-ingredient-related-analysis/#selecting-photos","title":"Selecting photos","text":"<ul> <li>Please look at the specific tutorial</li> </ul>"},{"location":"api/tutorials/get-ingredient-related-analysis/#rotating-a-photo","title":"Rotating a photo","text":"<ul> <li>Please look at the reference</li> </ul>"},{"location":"api/tutorials/get-ingredient-related-analysis/#cropping-photos","title":"Cropping Photos","text":"<p>Note: Cropping is only relevant for editing already selected images. You need to upload it first to the system, select it, retrieve its id, and then crop it. This is a non destructive crop. If there's an issue with the image, you should report it using the dedicated NutriPatrol API.  Moderators will either perform a destructive crop, or more likely delete the image.</p> <ul> <li>Please look at the reference</li> </ul>"},{"location":"api/tutorials/get-ingredient-related-analysis/#unselecting-photos","title":"Unselecting photos","text":"<ul> <li>Please look at the reference</li> </ul>"},{"location":"api/tutorials/get-ingredient-related-analysis/#get-the-optical-character-recognition-ocr-output-of-the-ingredients-photo","title":"Get the Optical Character Recognition (OCR) output of the ingredients photo","text":"<p>Open Food Facts uses optical character recognition (OCR) to retrieve ingredient data and other information (using Robotoff) from the photos of the product labels. Notes:</p> <ul> <li>The OCR may contain errors. Encourage your users to correct the output using the ingredients WRITE API.</li> <li>You can also use your own on-device OCR, especially if you're superconfident about it performing better than the server's cloudvision and if you plan to send a high number of queries.</li> <li>Please DO NOT translate and send us the OCR output. We want to store only actual data. If you want translated version of the ingredient list, please send us an email to reuse@openfoodfacts.org</li> </ul>"},{"location":"api/tutorials/get-ingredient-related-analysis/#api-solution","title":"API solution","text":"<ul> <li>Please look at the reference</li> </ul>"},{"location":"api/tutorials/get-ingredient-related-analysis/#dart-sdk-solution","title":"Dart SDK solution","text":"<ul> <li>https://openfoodfacts.github.io/openfoodfacts-dart/model_OcrIngredientsResult/OcrIngredientsResult-class.html </li> <li>https://openfoodfacts.github.io/openfoodfacts-dart/utils_OcrField/OcrField-class.html</li> <li>https://openfoodfacts.github.io/openfoodfacts-dart/utils_OcrField/OcrFieldExtension.html</li> </ul>"},{"location":"api/tutorials/get-ingredient-related-analysis/#present-the-result-of-the-optical-character-recognition-ocr-output-to-your-user-for-human-review","title":"Present the result of the Optical Character Recognition (OCR) output to your user for human review","text":"<ul> <li>Create a UI that encourages careful review, and encourages dropping the output if it's not right</li> <li>Create a UI that encourages taking a less blurry, better framed photo to fix the output</li> <li>Create a UI that handles multilinguism well</li> </ul>"},{"location":"api/tutorials/get-ingredient-related-analysis/#send-the-ingredients","title":"Send the ingredients","text":"<ul> <li>Please look at the reference located</li> </ul>"},{"location":"api/tutorials/get-ingredient-related-analysis/#refresh-product-to-display-the-result-to-your-user","title":"Refresh product to display the result to your user","text":"<ul> <li>Please look at the reference</li> </ul>"},{"location":"api/tutorials/get-the-green-score/","title":"Helping your users get the Green-Score for any product","text":"<ul> <li>If you can't get the information on a specific product, you can get your user to send photos and data.</li> <li>That will then be processed by Open Food Facts to get the computed result you want to show them.</li> <li>You can implement the complete flow so that they get immediately the result with some effort on their side.</li> <li>That will ensure user satisfaction</li> <li>Please refer to the product addition tutorial for the technical way to do the required operations (such as category input), and to the high level workflow below for all the cases you have to handle.</li> </ul>"},{"location":"api/tutorials/get-the-green-score/#table-of-contents","title":"Table of contents","text":"<ul> <li>Getting your app ready for the Green-Score</li> <li>Implementing the basic display of the score</li> <li>Displaying the Green-Score outside France</li> <li>Ensuring a good user experience (even with data gaps)</li> <li>Adding disclaimers when we can't display the Green-Score</li> <li>Adding disclaimers when the Green-Score is computed with a data gap + Asking the users to photograph and/or complete missing information</li> <li>Adding value by explaining</li> <li>Knowledge panels API</li> <li>Onboarding producers you know</li> </ul>"},{"location":"api/tutorials/get-the-green-score/#implementing-the-basic-display-of-the-score","title":"Implementing the basic display of the score","text":""},{"location":"api/tutorials/get-the-green-score/#preferred-method-using-the-knowledge-panels-api","title":"Preferred method : Using the Knowledge Panels API","text":"<ul> <li>With Knowledge panels, you just have to implement a for-loop in your app. Translations, updates, and all the complexity will be handled</li> <li>The Open Food Facts official app uses this one, which is less initial work, and less maintenance work.</li> </ul>"},{"location":"api/tutorials/get-the-green-score/#using-the-raw-api","title":"Using the Raw API","text":"<ul> <li>The API is adding a new ecoscore_grade field from A to F. Technically wise, it behaves like the Nutri-Score, so you can clone part of your Nutri-Score implementation</li> <li>If (and only if) the server sends back a proper value (a+, a, b, c, d, e or f), display the new score, otherwise, display our gray placeholder</li> <li>https://world.openfoodfacts.org/api/v0/product/3414280980209.json?fields=environmental_score_grade</li> <li>Response: <code>{\"status_verbose\":\"product found\",\"product\":{\"ecoscore_grade\":\"b\"},\"status\":1,\"code\":\"3414280980209\"}</code></li> <li>https://world.openfoodfacts.org/api/v0/product/3414280980209.json?fields=ecoscore_grade</li> <li>Here are the visuals.<ul> <li>A+ Green Score visual</li> <li>A Green Score visual</li> <li>B Green Score visual</li> <li>C Green Score visual</li> <li>D Green Score visual</li> <li>E Green Score visual</li> <li>F Green Score visual</li> <li>Unknown Green Score visual</li> </ul> </li> </ul>"},{"location":"api/tutorials/get-the-green-score/#displaying-the-green-score-outside-france","title":"Displaying the Green-Score outside France","text":"<ul> <li>You need to ensure the country your users are in:<ul> <li>Asking them explicitly at startup, and storing the value</li> <li>Geofencing your app to just one country</li> <li>Using the phones or the IP address (using eg GeoIP) to infer a country</li> </ul> </li> <li>You need to serve the matching Green-Score value<ul> <li>You can ask for a country specific Green-Score</li> </ul> </li> <li>If your users are outside France, you need to clearly display the experimental disclaimer at least once.</li> </ul>"},{"location":"api/tutorials/get-the-green-score/#ensuring-a-good-user-experience-even-with-data-gaps","title":"Ensuring a good user experience (even with data gaps)","text":"<p>We can compute the Green-Score for most of the database, but we're missing some data on some products to make the computation exact, and it won't be computed on some products. In any case, you need to make sure your users won't be frustrated by implementing the following points:</p> <ul> <li>Adding disclaimers when we can\u2019t display the Green-Score<ul> <li>Add a message if we have a category but no Green-Score<ul> <li>if \"en:categories-completed\" _in states_tags AND ecoscoregrade=Null<ul> <li>We could not compute an Green-Score for this product. It might be that the category is not specific enough or that we don't have supporting data for this category. If you believe this is an error, you can email contact@example.com</li> <li>You can get states with https://world.openfoodfacts.org/api/v0/product/3414280980209.json?fields=environmental_score_grade,states_tags </li> </ul> </li> </ul> </li> <li>Help the user add the category if it is missing<ul> <li>You can use our Robotoff API to get your users to validate a prediction<ul> <li>Robotoff Questions</li> </ul> </li> </ul> </li> </ul> </li> <li>Adding disclaimers when the Green-Score is computed with a data gap + Asking the users to photograph and/or complete missing information<ul> <li>Add a message if no labels are available<ul> <li>if \"en:labels-to-be-completed\" in states_tags<ul> <li><code>\"The Green-Score takes into account environmental labels. Please take them into photo or edit the product so that they can be taken into account\"</code></li> </ul> </li> <li>Asking your users for a photo should be enough</li> <li>You can otherwise add toggles for Explicit labels (please add a photo of them to avoid mistakes)</li> <li>You can get states with https://world.openfoodfacts.org/api/v0/product/3414280980209.json?fields=environmental_score_grade,states_tags </li> </ul> </li> <li>Add a message if no origins are available<ul> <li>if \"en:origins-to-be-completed\" in states_tags<ul> <li><code>\"The Green-Score takes into account the origins of the ingredients. Please take them into a photo (ingredient list and/or any geographic claim or edit the product so that they can be taken into account. If it is not clear, you can contact the food producer.\"</code></li> <li>You can get states with https://world.openfoodfacts.org/api/v0/product/3414280980209.json?fields=environmental_score_grade,states_tags </li> </ul> </li> </ul> </li> <li>Add a message if recycling information is missing<ul> <li>if \"en:packaging-photo-to-be-selected\" in states_tags<ul> <li>Add a button to take a picture of the recycling instructions \u00b7 Issue #3531 \u00b7 openfoodfacts/openfoodfacts-androidapp</li> </ul> </li> <li>if \"en:packaging-to-be-completed\" in states_tags<ul> <li>you can get your users to type it, take a photo, or have a combinatory picker with packaging type, packaging material, packaging recyclability</li> <li>The field to input raw recycling instructions eg: \u201cPlastic bottle to recycle, Plastic cap to recycle\u201d is \u201cpackaging_text_en\u201d (change the language code accordingly)</li> <li>It will get automatically parsed and get used to compute the Green-Score</li> </ul> </li> <li>You can get states with https://world.openfoodfacts.org/api/v0/product/3414280980209.json?fields=environmental_score_grade,ecoscore_alpha,states_tags</li> </ul> </li> <li>Sharing some of your code<ul> <li>You are very welcome to implement data contribution in one of our SDKs. The more apps let their user add photos and data, the more Green-Scores we get.</li> </ul> </li> </ul> </li> </ul>"},{"location":"api/tutorials/get-the-green-score/#adding-value-by-explaining","title":"Adding value by explaining","text":"<ul> <li>Explanation of Green-Score computations using Knowledge panels: You can implement the Knowledge panels API that displays additional information with a minimum of coding (you can filter on Environment Knowledge Panels only if you wish)</li> <li>A Flutter implementation is available, and you are very welcome to contribute implementation in one of our existing SDKs (or create your own)</li> </ul>"},{"location":"api/tutorials/get-the-green-score/#if-you-have-relationships-or-connexions-with-food-producers","title":"If you have relationships or connexions with food producers","text":"<ul> <li>Onboarding producers you know to the Green-Score and the Open Food Facts Platform for Producers (Free)</li> <li>You can ask any producer you know to get in touch with us at producers@openfoodfacts.org so that their products are Green-Score ready in terms of data (we have easy ways to import their data using the Producer Platform: https://world.pro.openfoodfacts.org/ )</li> </ul>"},{"location":"api/tutorials/get-the-nutriscore/","title":"Get the Nutri-Score","text":""},{"location":"api/tutorials/get-the-nutriscore/#introduction","title":"Introduction","text":"<ul> <li>If you can't get the information on a specific product, you can get your user to send photos and data, that will then be processed by Open Food Facts AI and contributors to get the computed result you want to show them.</li> <li>You can implement the complete flow below so that they get immediately the result with some effort on their side.</li> <li>That will ensure user satisfaction</li> <li>Please refer to the product addition tutorial for the technical way to do the required operations (such as nutrition input), and to the high level workflow below for all the cases you have to handle.</li> </ul>"},{"location":"api/tutorials/get-the-nutriscore/#display-nutri-score-knowledge-panels-all-the-logic-below-in-5-lines-of-code","title":"Display Nutri-Score knowledge panels - All the logic below in 5 lines of code!","text":"<ul> <li>The Knowledge Panels are already implemented in the Dart package</li> <li>They are simple to implement from the JSON API</li> <li>They allow you to consume present and future knowledge from Open Food Facts</li> </ul>"},{"location":"api/tutorials/get-the-nutriscore/#using-the-official-visual-assets-of-the-nutri-score","title":"Using the official visual assets of the Nutri-Score","text":"<p>Please use only the official assets to display the Nutri-Score. You can get v1 logos here: NutriScore variants Those are v1 assets, and although they can be used during the transition period, we recommand using the blue banner version to avoid any ambiguity.</p> <ul> <li>https://static.openfoodfacts.org/images/attributes/dist/nutriscore-a.svg</li> <li>https://static.openfoodfacts.org/images/attributes/dist/nutriscore-b.svg</li> <li>https://static.openfoodfacts.org/images/attributes/dist/nutriscore-c.svg</li> <li>https://static.openfoodfacts.org/images/attributes/dist/nutriscore-d.svg</li> <li>https://static.openfoodfacts.org/images/attributes/dist/nutriscore-e.svg</li> <li>https://static.openfoodfacts.org/images/attributes/dist/nutriscore-unknown.svg</li> <li>https://static.openfoodfacts.org/images/attributes/dist/nutriscore-not-applicable.svg</li> </ul>"},{"location":"api/tutorials/get-the-nutriscore/#getting-ready-for-nutri-score-v2","title":"Getting ready for Nutri-Score V2","text":"<ul> <li>Nutri-Score V2 has a new computation method, which now requires the ingredient list, a category, and of course the nutrition table</li> <li>It also has a transition period new logo, to indicate you are using the new computation. It is not compulsory to use it, but it will save you from a lot of questions from your users (\"Do you have the new formula ?\")</li> <li>The assets for the transition period logo are language dependant. We have already loaded the official assets. If your language is not supported, please get in touch instead of trying to translate the assets on your own. We'll make sure to find solutions.</li> </ul>"},{"location":"api/tutorials/get-the-nutriscore/#new-transition-assets-for-nutri-score-v2","title":"New transition assets for Nutri-Score V2","text":"<ul> <li>https://static.openfoodfacts.org/images/attributes/dist/nutriscore-a-new-en.svg</li> <li>https://static.openfoodfacts.org/images/attributes/dist/nutriscore-b-new-en.svg</li> <li>https://static.openfoodfacts.org/images/attributes/dist/nutriscore-c-new-en.svg</li> <li>https://static.openfoodfacts.org/images/attributes/dist/nutriscore-d-new-en.svg</li> <li>https://static.openfoodfacts.org/images/attributes/dist/nutriscore-e-new-en.svg</li> <li>https://static.openfoodfacts.org/images/attributes/dist/nutriscore-unknown-new-en.svg</li> <li>https://static.openfoodfacts.org/images/attributes/dist/nutriscore-not-applicable-new-en.svg</li> </ul>"},{"location":"api/tutorials/get-the-nutriscore/#available-languages","title":"Available languages","text":"<ul> <li>Dutch (nl), French (fr), German (de), Luxembourgish (lb), English (en)</li> <li>Replace likeso <code>nutriscore-e-new-en.svg</code> &gt; <code>nutriscore-e-new-fr.svg</code></li> </ul>"},{"location":"api/tutorials/get-the-nutriscore/#manual-version-getting-the-nutri-score-v1-value-we-dont-recommand-the-manual-way-anymore-especially-with-v2-around-the-corner","title":"Manual version: Getting the Nutri-Score v1 value (we don't recommand the manual way anymore, especially with v2 around the corner)","text":""},{"location":"api/tutorials/get-the-nutriscore/#data-completion-flow","title":"Data completion flow","text":"<p>Here are the different messages to use according to the state:</p>"},{"location":"api/tutorials/get-the-nutriscore/#add-a-message-if-we-have-a-category-but-no-nutri-score","title":"Add a message if we have a category but no Nutri-Score","text":"Data completion flow<pre><code>if \"en:categories-completed\" in states_tags AND nutrition_grade=Null\n</code></pre> Data completion flow<pre><code>\"We could not compute an Nutri-Score for this product. It might be that the category is an exception. If you believe this is an error, you can email contact@thenameofyourapp.org\"\n</code></pre> <ul> <li>List of exceptions: https://www.santepubliquefrance.fr/content/download/150262/file/QR_scientifique_technique_150421.pdf</li> <li>You can get states with https://world.openfoodfacts.org/api/v0/product/3414280980209.json?fields=environmental_score_grade,states_tags</li> </ul>"},{"location":"api/tutorials/get-the-nutriscore/#add-a-message-if-we-have-a-category-but-no-nutrition","title":"Add a message if we have a category but no nutrition","text":"Data completion flow<pre><code>if \"en:categories-completed\" in states_tags  AND \"en:nutrition-facts-to-be-completed\" in states_tags\n</code></pre> <ul> <li>Prompt: \"Add nutrition facts to compute the Nutri-Score\"</li> </ul> <ul> <li>Add a one-click option to indicate no nutrition facts on the packaging<ul> <li>\"This product doesn't have nutrition facts\"</li> </ul> </li> </ul> <p>Note: We now have a convenient API to automatically extract nutrition from an image.</p>"},{"location":"api/tutorials/get-the-nutriscore/#add-a-message-if-we-have-nutrition-but-no-category","title":"Add a message if we have nutrition but no category","text":"Data completion flow<pre><code>if \"en:categories-to-be-completed\" in states_tags AND \"en:nutrition-facts-completed\" in states_tags\n</code></pre> <ul> <li>Prompt: \"Add a category to compute the Nutri-Score\"</li> </ul>"},{"location":"api/tutorials/get-the-nutriscore/#help-the-user-add-the-category-if-it-is-missing","title":"Help the user add the category if it is missing","text":"<ul> <li>You can use our Robotoff API to get your users to validate a prediction</li> </ul> <ul> <li>Robotoff Questions</li> </ul>"},{"location":"api/tutorials/get-the-nutriscore/#add-a-message-if-we-have-no-category-and-no-nutrition","title":"Add a message if we have no category and no nutrition","text":"Data completion flow<pre><code>if \"en:categories-to-be-completed\" in states_tags  AND \"en:nutrition-facts-to-be-completed\" in states_tags\n</code></pre> <ul> <li>Prompt: \"Add nutrition facts and a category to compute the Nutri-Score\"</li> </ul> <p>Note: We now have a convenient API to automatically extract nutrition from an image.</p>"},{"location":"api/tutorials/get-the-nutriscore/#add-a-one-click-option-to-indicate-no-nutrition-facts-on-the-packaging","title":"Add a one-click option to indicate no nutrition facts on the packaging","text":"<ul> <li>This product doesn't have nutrition facts</li> </ul>"},{"location":"api/tutorials/get-the-nutriscore/#add-a-message-if-the-nutrition-image-is-missing","title":"Add a message if the nutrition image is missing","text":"Data completion flow<pre><code>if \"en:nutrition-photo-to-be-selected\" in states_tags OR \"en:photos-to-be-uploaded\" in states_tags\n</code></pre>"},{"location":"api/tutorials/get-the-nutriscore/#add-a-message-if-the-nutrition-image-is-obsolete-using-the-image-refresh-api","title":"Add a message if the nutrition image is obsolete using the image refresh API","text":"<ul> <li>https://github.com/openfoodfacts/api-documentation/issues/15</li> </ul>"},{"location":"api/tutorials/get-the-nutriscore/#add-nutri-score-disclaimers","title":"Add Nutri-Score disclaimers","text":""},{"location":"api/tutorials/get-the-nutriscore/#a-message-if-fibers-are-missing","title":"a message if fibers are missing","text":"Data completion flow<pre><code>msgctxt \"nutrition_grade_fr_fiber_warning\"\nmsgid \"Warning: the amount of fiber is not specified, their possible positive contribution to the grade could not be taken into account.\"\n</code></pre>"},{"location":"api/tutorials/get-the-nutriscore/#a-message-if-fruitnuts-are-missing","title":"a message if fruit/nuts are missing","text":"Data completion flow<pre><code>msgctxt \"nutrition_grade_fr_no_fruits_vegetables_nuts_warning\"\nmsgid \"Warning: the amount of fruits, vegetables and nuts is not specified, their possible positive contribution to the grade could not be taken into account.\"\n</code></pre>"},{"location":"api/tutorials/get-the-nutriscore/#a-message-if-fruitsnuts-is-an-estimate-from-ingredients","title":"a message if fruits/nuts is an estimate from ingredients","text":"Data completion flow<pre><code>msgctxt \"nutrition_grade_fr_fruits_vegetables_nuts_estimate_warning\"\nmsgid \"Warning: the amount of fruits, vegetables and nuts is not specified on the label, it was estimated from the list of ingredients: %d%\"\n</code></pre>"},{"location":"api/tutorials/get-the-nutriscore/#a-message-if-fruitsnuts-is-an-estimate-from-category","title":"a message if fruits/nuts is an estimate from category","text":"Data completion flow<pre><code>msgctxt \"nutrition_grade_fr_fruits_vegetables_nuts_from_category_warning\"\nmsgid \"Warning: the amount of fruits, vegetables and nuts is not specified on the label, it was estimated from the category (%s) of the product: %d%\"\n</code></pre>"},{"location":"api/tutorials/how-to-create-data-quality-controls-in-your-app/","title":"How to create data quality controls in your app","text":""},{"location":"api/tutorials/how-to-create-data-quality-controls-in-your-app/#ensuring-data-quality-for-open-food-facts-contributions","title":"Ensuring Data Quality for Open Food Facts Contributions","text":"<p>This tutorial will guide you through best practices for maintaining high-quality data contributions to Open Food Facts through your app. As you know, Open Food Facts (and your app, since you have implemented or are implementing contributing back to Open Food Facts) leverages crowdsourcing, which is a fantastic way to gather a vast amount of information. However, it also necessitates measures to ensure data accuracy.</p>"},{"location":"api/tutorials/how-to-create-data-quality-controls-in-your-app/#prevention-is-key","title":"Prevention is Key","text":"<p>The most effective approach lies in prevention. Here's how your app's interface can play a crucial role:</p> <ul> <li>Instant Feedback:<ul> <li>Nutritional values: Implement checks that flag inconsistencies and prompt users to verify their entries.</li> <li>Ingredient language compatibility: Ensure users take legible photos of the ingredient list, and send them in the actual language they are written in.</li> <li>Selfie detection: On-device libraries like MLKit can detect whether the user is taking a selfie instead of a product, and can warn them about it.</li> </ul> </li> </ul> <ul> <li>Data Quality Facets: Utilize the data quality facets established by Open Food Facts and recode some (or all of) them within your app. These facets act as guidelines for your users to ensure comprehensive and accurate data collection.</li> </ul> <ul> <li>Non-Food Item Prevention: Implement functionalities that routes non-food items like cosmetics to the right database (just ask your users if it's a food or a cosmetic).</li> </ul>"},{"location":"api/tutorials/how-to-create-data-quality-controls-in-your-app/#addressing-errors-and-malicious-intent","title":"Addressing Errors and Malicious Intent","text":"<ul> <li>Acknowledging that Errors may happen: It's inevitable that some users might unintentionally or deliberately submit inaccurate data. Be prepared for such situations.</li> </ul> <ul> <li>Versioning and User Anonymization:\\   When sending data to Open Food Facts, include the app version used for the contribution along with an anonymized user identifier. This allows Open Food Facts to block repeat offenders (and not your app's global account) individually if necessary, without the need for them to create an Open Food Facts account.</li> </ul> <ul> <li>Collaboration:\\   If you suspect recurring issues with user-generated data potentially stemming from app functionalities, don't hesitate to reach out to the Open Food Facts team. We're happy to assist in troubleshooting, UI feedback\u2026</li> </ul>"},{"location":"api/tutorials/how-to-create-data-quality-controls-in-your-app/#cater-for-the-complexity-in-food-nutrition-data","title":"Cater for the complexity in Food &amp; Nutrition Data","text":"<ul> <li>Edge Cases:\\   Food and nutrition data can be intricate. Consider edge cases like dehydrated products that require rehydration for accurate nutritional value representation.</li> </ul> <ul> <li>Global Variations:\\   Nutritional facts tables differ internationally. Be mindful of these variations (e.g., US vs. European formats) and the need for appropriate labeling within your app.</li> </ul> <ul> <li>\"As Sold\" vs. \"As Prepared\" Values:\\   Nutritional information can be presented based on the product's state, \"as sold\" or \"as prepared.\" Ensure clarity within your app regarding these variations.</li> </ul> <ul> <li>A photo is better than nothing at all or bad data alone   Using a photo helps us cross-check the edits by your users, use artificial intelligence to compare the product to similar products in the same category. It also helps us complete the product at a later time if your users doesn't have the courage to input the data, or if he inputs bad data. A photo of the nutrition table and of the ingredients will go a very long way</li> </ul> <p>By following these guidelines and fostering a collaborative approach with Open Food Facts, your app can significantly contribute to a high-quality data collection effort, empowering informed consumer choices.</p>"},{"location":"api/tutorials/license-be-on-the-legal-side/","title":"License - be on the legal side","text":""},{"location":"api/tutorials/license-be-on-the-legal-side/#understanding-and-being-compliant-with-our-data-licences","title":"Understanding and being compliant with our data licences","text":"<ul> <li>The Open Food Facts database is available under the\u00a0Open Database License.</li> <li>The individual contents of the database are available under the\u00a0Database Contents License.</li> <li>Product images are available under the\u00a0Creative Commons Attribution ShareAlike\u00a0license. They may contain graphical elements subject to copyright or other rights that may, in some cases, be reproduced (quotation rights or fair use).</li> </ul> <ul> <li>Please read the\u00a0Terms and conditions of use and reuse\u00a0before reusing the data.</li> <li>Please read our simple summary of the OdBL and our licence on the wiki</li> <li>Please read our attribution guidelines (how to) on the wiki</li> <li>Please check that your app is not in the non-compliance shamelist. If so, please get in touch at reuse@openfoodfacts.org or on the Slack so that we can fix it together.</li> <li>Please read the API FAQ, which includes legal questions as well. If your question is not answered, please send it to reuse@openfoodfacts.org</li> </ul>"},{"location":"api/tutorials/license-be-on-the-legal-side/#getting-in-touch","title":"Getting in touch","text":"<ul> <li>We like learning what the Open Food Facts data is used for. It is not mandatory, but we would appreciate it if you would\u00a0tell us about your use case\u00a0so that we can share them with the Open Food Facts community.</li> <li>You can learn more on the getting in touch with Open Food Facts page of this document, which also covers the technical side.</li> </ul>"},{"location":"api/tutorials/product-prices/","title":"Product prices","text":""},{"location":"api/tutorials/product-prices/#open-prices","title":"Open Prices","text":"<ul> <li>Open Prices is a project to collect and share prices of food products around the world. It\u2019s a publicly available dataset that can be used for research, analysis, and more. Open Prices is developed and maintained by Open Food Facts.</li> <li>We are crowdsourcing an open-source dataset of food prices. Prices can be added by users through our web app. Retailers or third-party apps can contribute as well by using our API.</li> <li>We ask contributors to provide a proof of the price, in the form of a photo of the price tag or receipt. This is to make it easier to ensure data quality.</li> </ul>"},{"location":"api/tutorials/product-prices/#links","title":"Links","text":"<ul> <li>Please read the FAQ at https://prices.openfoodfacts.org/</li> <li>The API is located at https://prices.openfoodfacts.org/api/docs</li> </ul>"},{"location":"api/tutorials/reporting-issues-with-nutripatrol/","title":"Reporting issues with NutriPatrol","text":"<p>The NutriPatrol API is used to report and manage issues with products and images on Open Food Facts, Open Prices, Open Pet Food Facts, Open Beauty Facts. We call a report a \"flag\" and a report will be associated with a \"ticket\" if it does not exist for this product or image. Otherwise it will be associated with the existing ticket.</p> <ul> <li>Check the API documentation: https://nutripatrol.openfoodfacts.org/api/docs</li> <li>It's early days for this system. You can contribute to the development of the Backend API and of the Moderation Frontend</li> </ul>"},{"location":"api/tutorials/scanning-barcodes/","title":"Implementing a World-Class Barcode Scan Experience for Your App","text":"<p>Creating a seamless barcode scanning feature is more than just decoding a barcode; it's about crafting a user experience that feels fast, intuitive, and reliable. This guide covers how to build that experience for the entire Open \"Everything\" Facts ecosystem, including Food, Beauty, Pet Food, and general Products.</p>"},{"location":"api/tutorials/scanning-barcodes/#1-choose-the-right-barcode-scanning-sdk","title":"1. Choose the Right Barcode Scanning SDK","text":"<p>The choice of SDK is the foundation of the experience. Here's a breakdown of the main options:</p> SDK / Library Platform(s) Cost Pros \u2705 Cons \u274c ZXing (\"Zebra Crossing\") Java, with ports for many languages Free (Open Source) Truly Open. No reliance on Google/Apple services. Battle-tested over many years. Can be less performant than modern native SDKs, especially in poor lighting. Google ML Kit Android &amp; iOS Free Modern Standard. Excellent performance, on-device processing, part of a larger ML ecosystem. No data harvesting for ads. Part of the Google ecosystem, which might be a concern for some projects. Apple Vision iOS Free Native &amp; Optimized. The best performance on iOS. Seamlessly integrated into the OS (<code>VNDetectBarcodesRequest</code>). iOS only. Scandit Android &amp; iOS Paid Premium Performance. Often superior in challenging conditions (glare, damaged barcodes, distance). Dedicated support. Expensive. Their business model involves data collection. <p>For Cross-Platform Frameworks (React Native, Flutter, etc.): Developers using these frameworks will interact with an abstraction library. The key is to choose a package that is well-maintained and uses the native SDKs (ZXING and/or ML Kit and Apple Vision) under the hood.</p> <p>Recommendation: For most new apps, while not open, using Google ML Kit on Android and Apple Vision on iOS (or a cross-platform wrapper that uses them) provides the best balance of performance, features, and cost.</p>"},{"location":"api/tutorials/scanning-barcodes/#2-design-an-insanely-great-scan-uiux","title":"2. Design an \"Insanely Great\" Scan UI/UX","text":"<p>This is where you turn a functional feature into a delightful one. It's all about the details you build around the scanner.</p>"},{"location":"api/tutorials/scanning-barcodes/#the-viewfinder-guidance","title":"\ud83d\udca1 The Viewfinder &amp; Guidance","text":"<p>The user should know exactly what to do.</p> <ul> <li>Clear Target Area: Display a semi-transparent overlay on the camera feed with a clear, rectangular cutout in the center. A laser-like line or crosshairs can help guide the user's aim.</li> <li>Helpful Text: Add a simple instruction like \"Center the barcode in the frame.\"</li> <li>Automatic Focus: Ensure tap-to-focus is enabled, or even better, continuous auto-focus.</li> </ul>"},{"location":"api/tutorials/scanning-barcodes/#handle-poor-lighting","title":"\ud83d\udd26 Handle Poor Lighting","text":"<p>A significant portion of scan failures happen in poorly lit kitchens or stores.</p> <ul> <li>Manual Torch Button: Always include an easily accessible button to toggle the device's flashlight.</li> <li>(Advanced) Automatic Torch: You can even use the ambient light sensor to detect low-light conditions and proactively display a message like, \"It's dark, want to turn on the light?\"</li> </ul>"},{"location":"api/tutorials/scanning-barcodes/#provide-instant-feedback","title":"\u2705 Provide Instant Feedback","text":"<p>The user needs immediate confirmation that a scan was successful.</p> <ul> <li>Haptic Feedback: A short vibration is a powerful, non-intrusive signal.</li> <li>Auditory Cue: A quick, pleasant \"beep\" sound.</li> <li>Visual Confirmation: Briefly freeze the frame or animate the viewfinder box (e.g., it flashes green). Follow this immediately with a loading indicator so the user knows the app is fetching data.</li> </ul>"},{"location":"api/tutorials/scanning-barcodes/#the-escape-hatch-manual-entry","title":"\u270d\ufe0f The Escape Hatch: Manual Entry","text":"<p>Sometimes a barcode is damaged, or the camera fails. Always provide a fallback.</p> <ul> <li>Include a button on the scanner screen labeled \"Enter barcode manually.\" This builds user trust and handles edge cases gracefully.</li> </ul>"},{"location":"api/tutorials/scanning-barcodes/#3-master-the-api-interaction","title":"3. Master the API Interaction","text":"<p>Once you have a barcode string, you must normalize it before querying the correct database.</p>"},{"location":"api/tutorials/scanning-barcodes/#step-31-pre-process-the-barcode-normalization","title":"\u2714\ufe0f Step 3.1: Pre-process the Barcode (Normalization)","text":"<p>Barcode scanners can return codes in various formats (EAN-8, EAN-13, UPC-A, UPC-E). To ensure a match in the database, the Open Food Facts server will normalize the barcode on your behalf. You should not try to normalize barcodes**</p> <ol> <li>Padding with Zeros: If the scanned barcode has fewer than 13 digits, the Open Food Facts server will pad it with leading zeros until it reaches 13 digits. For example, <code>12345678</code> (EAN-8) becomes <code>0000012345678</code>.</li> <li>Calculate the Check Digit: to ensure your barcode is valid, you can calculate the check digits (instructions here, you will find the algorithm in many places, including Open Food Facts SDKs, barcode scanning SDKs\u2026). Please note that -sometimes- some producers make up barcodes without knowing about this (to avoid buying barcode ranges), and you may stump on edge cases.</li> </ol>"},{"location":"api/tutorials/scanning-barcodes/#step-32-choose-the-right-database-endpoint","title":"\ud83c\udf0d Step 3.2: Choose the Right Database Endpoint","text":"<p>The Open \"Everything\" Facts platform uses the same API structure across different domains. Simply change the domain in the URL to query the database you need. You can also make a universal call that will call all 4 databases for an answer, and you can display results however you like, mention you don't support specific data types, and help users add missing products by taking photos.</p> Project Domain for API Calls Open Food Facts <code>https://world.openfoodfacts.org</code> Open Beauty Facts <code>https://world.openbeautyfacts.org</code> Open Pet Food Facts <code>https://world.openpetfoodfacts.org</code> Open Products Facts <code>https://world.openproductsfacts.org</code>"},{"location":"api/tutorials/scanning-barcodes/#step-33-make-the-api-call","title":"\ud83d\udce1 Step 3.3: Make the API Call","text":"<p>Make a simple GET request to the appropriate v2 API endpoint with your normalized barcode: <code>GET https://{domain}/api/v2/product/{normalized_barcode}.json</code></p> <p>Crucial Best Practice:</p> <ul> <li>Set a Proper User-Agent: This is essential for API etiquette. Use the format: <code>User-Agent: MyAppName - Android - Version 2.1 - https://example.com - scan</code></li> </ul>"},{"location":"api/tutorials/scanning-barcodes/#step-34-handle-the-api-response","title":"\ud83d\udce5 Step 3.4: Handle the API Response","text":"<ul> <li>Product Found (<code>\"status\": 1</code>): The product exists. Parse the <code>\"product\"</code> object for the data you need (e.g., <code>product_name</code>, <code>image_front_url</code>, <code>nutriments</code>, <code>nutriscore_grade</code>, etc.).</li> <li>Product Not Found (<code>\"status\": 0</code>): The barcode is valid, but the product isn't in the database.     * Do not show an error! Display a friendly screen: \"Product Not Found.\"     * \ud83d\ude80 Empower the User: Add a button: \"Be the first to add this product!\" This can link to the appropriate Open Facts product creation form, turning a dead-end into a powerful contribution.</li> <li>Network Errors: Wrap your API call in a <code>try/catch</code> block to handle connection issues and show a clear error message to the user.</li> <li>Server Errors: Prepare for the case our or your servers are down, and handle those cases gracefully as well.</li> </ul>"},{"location":"api/tutorials/scanning-barcodes/#4-the-complete-flow-from-start-to-finish","title":"4. The Complete Flow from Start to Finish","text":"<ol> <li>User taps the \"Scan\" button in your app.</li> <li>The camera view opens instantly with the viewfinder UI and help text.</li> <li>The native SDK detects a barcode and returns a string.</li> <li>The app gives immediate feedback (vibration + sound).</li> <li>The app normalizes the barcode string (pads with zeros, calculates check digit if necessary).</li> <li>A loading spinner is displayed while the app makes the API call to the correct domain (Food, Beauty, etc.) with the normalized barcode and a proper <code>User-Agent</code>.</li> <li>The API response is received.     * If found: The app navigates to a beautifully formatted product page.     * If not found: The app shows a \"Product not found\" screen with a call-to-action to add it.     * If network error: The app shows a \"Connection error\" message.</li> </ol>"},{"location":"api/tutorials/scanning-barcodes/#bonus-i-am-doing-a-ai-app-how-can-i-handle-barcodes-as-well","title":"Bonus: I am doing a \"AI\" app, how can I handle barcodes as well ?","text":"<ul> <li>Add a barcode button beyond your AI viewfinder, that will start the barcode decoder. Benefits of using barcodes: reducing the cost of a query to 0 and a much faster answer.</li> <li>Make sure you allow users to send us photos so that the database stays competitive (more comprehensive) compared to purely AI solutions.</li> </ul>"},{"location":"api/tutorials/scanning-cosmetics-pet-food-and-other-products/","title":"Open Beauty Facts, Open Pet Food Facts, Open Products Facts experimental and specific APIs","text":"<ul> <li>Open Beauty Facts, Open Pet Food Facts, Open Products Facts behave mostly like Open Food Facts. Behaviours may change over time, as we tweak it.</li> </ul>"},{"location":"api/tutorials/scanning-cosmetics-pet-food-and-other-products/#specific-base-urls","title":"Specific base URLs","text":"<ul> <li>Cosmetics: The base URL is openbeautyfacts.org instead of openfoodfacts.org</li> <li>Pet Food: The base URL is openpetfoodfacts.org instead of openfoodfacts.org</li> <li>Other type of products: The base URL is openproductsfacts.org instead of openfoodfacts.org</li> </ul>"},{"location":"api/tutorials/scanning-cosmetics-pet-food-and-other-products/#different-behaviours-common-to-open-beauty-facts-open-pet-food-facts-open-products-facts","title":"Different behaviours common to Open Beauty Facts, Open Pet Food Facts, Open Products Facts","text":"<ul> <li>The same codebase: Knowledge panels are supported, the new packaging API is supported</li> <li>Search-a-licious, Open Prices, Folksonomy Engine, Nutri-Patrol not supported yet</li> <li>No Robotoff questions yet</li> </ul>"},{"location":"api/tutorials/scanning-cosmetics-pet-food-and-other-products/#specificities-of-open-beauty-facts","title":"Specificities of Open Beauty Facts","text":"<ul> <li>No nutrition table</li> <li>No Green-Score, Nutri-Score or NOVA groups for ultra-processing</li> </ul>"},{"location":"api/tutorials/scanning-cosmetics-pet-food-and-other-products/#specificities-of-open-pet-food-facts","title":"Specificities of Open Pet Food Facts","text":"<ul> <li>No Green-Score, Nutri-Score or NOVA groups for ultra-processing</li> </ul>"},{"location":"api/tutorials/scanning-cosmetics-pet-food-and-other-products/#specificities-of-open-products-facts","title":"Specificities of Open Products Facts","text":"<ul> <li>No nutrition table</li> <li>No Green-Score, Nutri-Score or NOVA groups for ultra-processing</li> <li>Most data will be modelled using the Folksonomy Engine</li> </ul>"},{"location":"api/tutorials/scanning-cosmetics-pet-food-and-other-products/#important-apis-if-you-want-to-scan-any-kind-of-product-or-help-your-users-avoid-adding-cosmetics-by-mistake-in-open-food-facts","title":"Important APIs if you want to scan any kind of product (or help your users avoid adding cosmetics by mistake in Open Food Facts)","text":"<ul> <li>We have a universal barcode scanning API, where you scan a barcode, and you get a result from either Open Food Facts, Open Pet Food Facts, Open Beauty Facts or Open Products Facts with a <code>product_type</code> (beauty \u2503 food \u2503 petfood \u2503 product), you can use the <code>product_type=all</code> parameter. Asked on any instance, it will redirect you to the right instance if a product exists and is on another instance (eg:\u00a0asking for a beauty barcode on food instance). See reference documentation.</li> <li>https://world.openfoodfacts.org/api/v2/product/3760044183738?product_type=all (will redirect you to the proper payload on Open Products Facts)</li> <li>If no result is found in any of the 4 databases, you will have to ask the type of product to your users, and use the classic product addition API on the right project.</li> <li>If (it can happen) the product appears on the wrong project, we suggest you use the NutriPatrol API to let your users report it to the moderators, and the proceed to a product addition on the right project. The moderators will then move the existing data to the right project. Eventually, project categorization errors should be infinitesimal.</li> </ul>"},{"location":"api/tutorials/scanning-cosmetics-pet-food-and-other-products/#api-roadmap-and-multi-project-behaviour","title":"API Roadmap and multi-project behaviour","text":"<ul> <li>We plan to bring the APIs mentionned above to Open Beauty Facts (Search-a-licious, Knowledge Panels, Open Prices, Robotoff, Folksonomy Engine)</li> </ul>"},{"location":"api/tutorials/scanning-cosmetics-pet-food-and-other-products/#sample-outputs","title":"Sample outputs","text":"<ul> <li>Please use the Open Food Facts API reference for most operations (data and photo addition, ingredient lists, categories, labels\u2026)</li> </ul>"},{"location":"api/tutorials/scanning-cosmetics-pet-food-and-other-products/#write-operations","title":"WRITE Operations","text":"<ul> <li>You can do WRITE operations on the right server, but normally all servers should forward operations automatically based on the <code>product_type</code></li> <li>For cosmetic, the crucial thing we need is an ingredient photo</li> <li>For pet food, the crucial thing we need is an ingredient photo and a nutrition photo</li> <li>For other products, you should encourage the users to take photos of all angles of the packaging of the product, since variability is high across categories and there's a lot of information.</li> </ul>"},{"location":"api/tutorials/scanning-cosmetics-pet-food-and-other-products/#product-in-open-beauty-facts","title":"Product in Open Beauty Facts","text":"<ul> <li>https://world.openbeautyfacts.org/api/v2/product/3560070791460.json</li> </ul>"},{"location":"api/tutorials/scanning-cosmetics-pet-food-and-other-products/#warning-on-specific-ingredients","title":"Warning on specific ingredients","text":"<ul> <li>Note: we'll soon have an elegant way to let your users block ingredients using product attributes.</li> </ul>"},{"location":"api/tutorials/scanning-cosmetics-pet-food-and-other-products/#ingredients-on-open-beauty-facts","title":"Ingredients on Open Beauty Facts","text":""},{"location":"api/tutorials/scanning-cosmetics-pet-food-and-other-products/#list-of-ingredients-on-open-beauty-facts","title":"List of ingredients on Open Beauty Facts","text":"<ul> <li>https://world.openbeautyfacts.org/ingredients.json</li> </ul>"},{"location":"api/tutorials/scanning-cosmetics-pet-food-and-other-products/#products-where-we-could-not-detect-aluminium-salts","title":"Products where we could not detect aluminium salts","text":"<ul> <li>https://world.openbeautyfacts.org/ingredient/-aluminum-salts.json</li> </ul>"},{"location":"api/tutorials/scanning-cosmetics-pet-food-and-other-products/#products-where-we-could-detect-aluminium-salts","title":"Products where we could detect aluminium salts","text":"<ul> <li>https://world.openbeautyfacts.org/ingredient/aluminum-salts.json</li> </ul>"},{"location":"api/tutorials/scanning-cosmetics-pet-food-and-other-products/#periods-after-opening","title":"Periods after Opening","text":"<p>[https://en.wiki.openbeautyfacts.org/Global_period_after_opening_taxonomy Periods after opening taxonomy]</p>"},{"location":"api/tutorials/working-with-facets/","title":"Providing knowledge panels for a particular Open Food Facts facet (category, brand, etc...)","text":"<p>The \"Knowledge Panel for Facets API\" is a standardized way for clients to get semi-structured but generic data that they can present to users on facets pages (or potentially on product pages, if you click on a faceted value).</p> <p>You can contribute to the development on this repository. This is a simple FastAPI Python backend.</p>"},{"location":"dev/","title":"Introduction to Product Opener developer documentation","text":"<p>This documentation is for developers who wants to understand technical aspects of Product Opener.</p> <p>To use the API, see API Documentation</p> <p>The repository for the project is at https://github.com/openfoodfacts/openfoodfacts-server/</p> <p>Some documentation to get you started:</p> <ul> <li>Quick start guide (Docker)</li> <li>Developer guide (Docker)</li> <li>Developer guide (Gitpod)</li> </ul> <p>Note: documentation follows the Di\u00e1taxis Framework</p>"},{"location":"dev/explain-javascript-usage-and-strategy/","title":"Explain JavaScript Usage and Strategy","text":"<p>While the core backend of the Open Food Facts server is built with Perl, JavaScript is crucial for creating a dynamic and interactive user experience. The project is currently in a transitional phase, moving from a legacy jQuery-based approach towards a modern, component-based architecture.</p>"},{"location":"dev/explain-javascript-usage-and-strategy/#legacy-front-end-jquery","title":"Legacy Front-end: jQuery","text":"<p>The project historically relied extensively on jQuery. This approach is now considered legacy, and the jQuery version in use is outdated. However, it still powers many existing functionalities:</p> <ul> <li>DOM Manipulation: Selecting and modifying elements on server-rendered pages.</li> <li>Event Handling: Managing user interactions like clicks and form submissions.</li> <li>AJAX Requests: Communicating asynchronously with the Perl backend to fetch data (e.g., search suggestions) or submit forms without a full page reload.</li> </ul>"},{"location":"dev/explain-javascript-usage-and-strategy/#nodejs-tooling","title":"Node.js Tooling","text":"<p>Node.js is used within the project, but not for running the main web server (which remains Perl-based). Its role is primarily for development and tooling, including:</p> <ul> <li>Running utility scripts.</li> <li>Managing dependencies for modern components.</li> <li>Powering build processes for newer front-end assets.</li> </ul>"},{"location":"dev/explain-javascript-usage-and-strategy/#modernization-the-web-component-strategy","title":"Modernization: The Web Component Strategy","text":"<p>To gradually modernize the front-end without a complete rewrite, the project has adopted a Web Component strategy. This allows for:</p> <ul> <li>Incremental Updates: New features can be developed as encapsulated, reusable Web Components.</li> <li>Interoperability: These components can be dropped into the existing Perl-rendered templates, allowing modern JavaScript (e.g., Lit) to coexist with the legacy jQuery code.</li> <li>Scoped Styles and Logic: Web Components prevent CSS and JS conflicts with the older parts of the application.</li> </ul>"},{"location":"dev/explain-javascript-usage-and-strategy/#the-next-generation-openfoodfacts-explorer","title":"The Next Generation: OpenFoodFacts-Explorer","text":"<p>The long-term vision for the Open Food Facts front-end is openfoodfacts-explorer. This will be a fully autonomous and modern JavaScript application, likely built with a framework like Vue.js or SvelteKit. It will communicate with the Perl backend via API and will eventually replace the server-rendered pages, offering a faster, richer, and more maintainable user experience.</p>"},{"location":"dev/explain-javascript-usage-and-strategy/#file-structure-and-build-process","title":"File Structure and Build Process","text":"<ul> <li>Legacy Location: Older JavaScript and jQuery plugins are located in the <code>htdocs/js/</code> directory and are included directly via <code>&lt;script&gt;</code> tags without a build step.</li> <li>Modern Location: Newer code, including Web Components, resides in separate directories and has its own modern build process (e.g., using Vite or Rollup) to bundle and optimize assets.</li> </ul>"},{"location":"dev/explain-nutrition-data/","title":"Explain nutrition data","text":"<p>Product fields:</p> <ul> <li>nutrition_data_per: Whether it is per \"serving\" or \"100g\"</li> <li>serving_size: Entered data from packaging</li> <li>serving_quantity: Computed value in g</li> </ul> <p>For each nutrient:</p> <ul> <li>_value: What was entered</li> <li>_unit: Unit of what was entered</li> <li>_100g: Amount per 100g in original unit</li> <li>_serving: Amount per serving normalised unit</li> <li>no suffix: What was entered in normalised unit</li> <li>_label: Entered label for an unknown nutrient?</li> </ul>"},{"location":"dev/explain-packaging-data/","title":"Explanation on packaging data","text":"<p>This document explains how packaging data is currently added, updated and structured in the Open Food Facts database, and how it could be improved.</p>"},{"location":"dev/explain-packaging-data/#introduction","title":"Introduction","text":""},{"location":"dev/explain-packaging-data/#types-of-packaging-data","title":"Types of packaging data","text":"<p>Food products typically have 1 or more packaging components (e.g. milk may have a bottle and a cap).</p> <p>For each product, we aim to have a comprehensive list of all its packaging components, with detailed information about each packaging component.</p>"},{"location":"dev/explain-packaging-data/#data-about-packaging-components","title":"Data about packaging components","text":"<p>For each packaging component, we want data for different attributes, like its shape (e.g. a bottle) and its material (e.g. plastic).</p> <p>There are many different attributes that can be interesting for specific uses. For instance, researchers in epidemiology are interested in knowing which packaging component is in contact with the food itself, and which one can be put in the microwave oven, so that they can study the long term effects of some plastics on health.</p>"},{"location":"dev/explain-packaging-data/#sources-of-packaging-data","title":"Sources of packaging data","text":"<p>We can get packaging data from different sources:</p>"},{"location":"dev/explain-packaging-data/#users","title":"Users","text":"<p>Users of the Open Food Facts website and app, and users of 3rd party apps, can enter packaging data.</p>"},{"location":"dev/explain-packaging-data/#manufacturers","title":"Manufacturers","text":"<p>Some manufacturers send product data through GS1, which currently has limited support for packaging information (but this is likely to be improved in the years to come).</p> <p>Some manufacturers send us more detailed packaging data (e.g. recycling instructions) through the Producers Platform.</p> <p>Some manufacturers send us data used to compute the Eco-Score using the Eco-Score spreadsheet template, which has fields like \"Packaging 1\", \"Material 1\", \"Packaging 2\", \"Material 2\" etc.</p>"},{"location":"dev/explain-packaging-data/#product-photos-and-machine-learning","title":"Product photos and machine learning","text":"<p>We can extract logos related to packaging, or parse the text recognized from product photos to recognize packaging information or recycling instructions.</p>"},{"location":"dev/explain-packaging-data/#how-packaging-data-is-currently-added-updated-and-structured-in-open-food-facts","title":"How packaging data is currently added, updated and structured in Open Food Facts","text":"<p>In Open Food Facts, we currently have a number of input fields related to packaging. The data in those fields is parsed and analyzed to create a structured list of packaging components with specific attributes.</p>"},{"location":"dev/explain-packaging-data/#current-input-fields","title":"Current input fields","text":""},{"location":"dev/explain-packaging-data/#packaging-tag-field-read-and-write","title":"Packaging tag field (READ and WRITE)","text":"<p>At the start of Open Food Facts in 2012, we had a \"packaging\" tag field where users could enter comma separated free text entries about the packaging (e.g. \"Plastic\", \"Bag\" or \"Plastic bag\") in different languages.</p> <p>In 2020, we made this field a taxonomized field. As a result, we now store the language used to fill this field, so that we can match its value to the multilingual packaging taxonomy. So \"plastique\" in French will be mapped to the canonical \"en:plastic\" entry.</p>"},{"location":"dev/explain-packaging-data/#packaging-information-recycling-instructions-text-field-read-and-write","title":"Packaging information / recycling instructions text field (READ and WRITE)","text":"<p>In 2020, we also added a language specific field (\"packaging_text_[language code]\" e.g. \"packaging_text_en\" for English) to store free text data about the packaging. It can contain the text of the recycling instructions printed on the packaging (e.g. \"bottle to recycle, cap to discard\"), or can be filled in by users (e.g. \"1 PET plastic bottle to recycle, 1 plastic cap\").</p>"},{"location":"dev/explain-packaging-data/#current-resulting-packagings-data-structure-read-only","title":"Current resulting packagings data structure (READ only)","text":"<p>The input fields are analyzed and combined to create the \"packagings\" data structure.</p> <p>The structure is an array of packaging components. Each packaging component can have values for different attributes:</p> <ul> <li>number: the number of units for the packaging component (e.g. a pack of beers may contain 6 bottles)</li> <li>shape: the general shape of the packaging component (e.g. \"bottle\", \"box\")</li> <li>material: the material of the packaging component</li> <li>quantity: how much product the packaging component contains (e.g. \"25 cl\")</li> <li>recycling: whether the packaging component should be recycled, discarded or reused</li> </ul> <p>The \"shape\" and \"material\" fields are taxonomized using the packaging_shapes and packaging_materials taxonomies.</p>"},{"location":"dev/explain-packaging-data/#how-the-resulting-packagings-data-structure-is-created","title":"How the resulting packagings data structure is created","text":""},{"location":"dev/explain-packaging-data/#extract-attributes-that-relate-to-different-packaging-components","title":"Extract attributes that relate to different packaging components","text":"<p>The values for each input field (\"packaging\" tag field and \"packaging_text_[language code]\" packaging information text field) are analyzed<sup>1</sup> to recognize packaging components and their attributes. One product may have multiple \"packaging_text_[language code]\" values in different languages. Only the value for the main language (\"lang\" field) of the product is currently analyzed.</p> <p>For instance, if the \"packaging\" field contains \"Plastic bottle, box, cardboard\", we will use the packaging shapes, materials and recycling taxonomies to create a list of 3 packaging components: <code>{shape:\"en:bottle\", material:\"en:plastic\"}, {shape:\"en:box\"}, {material:\"en:cardboard\"}</code>.</p> <p>And if the \"packaging_text_en\" field contains \"PET bottle to recycle, box to reuse\", we will create 2 more packaging components: <code>{shape:\"en:bottle\", material:\"en:pet-polyethylene-terephthalate\", recycling:\"en:recycle\"}, {shape:\"box\", recycling:\"reuse\"}</code>.</p>"},{"location":"dev/explain-packaging-data/#merge-packaging-components","title":"Merge packaging components","text":"<p>The 3 + 2 = 5 resulting packaging components are then added one by one in the packagings structure. When their attributes are compatible, the packaging units are merged<sup>2</sup>. For instance <code>{shape:\"en:box\"} and {material:\"en:cardboard\"} have non conflicting attributes, so they are merged into {shape:\"en:box\", material:\"en:cardboard\"}</code>. Note that it is possible that this is a mistake, and that the \"box\" and \"cardboard\" tags concern in fact different components.</p> <p>Similarly, as \"en:plastic\" is a parent of \"en:pet-polyethylene-terephthalate\" in the packaging_materials taxonomy, we can merge <code>{shape:\"en:bottle\", material:\"en:plastic\"} with {shape:\"en:bottle\", material:\"en:pet-polyethylene-terephthalate\", recycling:\"en:recycle\"} into {shape:\"en:bottle\", material:\"en:pet-polyethylene-terephthalate\", recycling:\"en:recycle\"}</code>.</p> <p>The resulting structure is:</p> How the resulting packagings data structure is created<pre><code>packagings: [\n    {\n        material: \"en:pet-polyethylene-terephthalate\",\n        recycling: \"en:recycle\",\n        shape: \"en:bottle\"\n    },\n    {\n        recycling: \"en:reuse\",\n        shape: \"en:box\"\n    },\n    {\n        shape: \"en:container\"\n    }\n]\n</code></pre>"},{"location":"dev/explain-packaging-data/#taxonomies","title":"Taxonomies","text":"<p>We have created a number of multilingual taxonomies related to packagings:</p> <ul> <li>Packaging shapes taxonomy : https://github.com/openfoodfacts/openfoodfacts-server/blob/main/taxonomies/packaging_shapes.txt</li> <li>Packaging materials taxonomy : https://github.com/openfoodfacts/openfoodfacts-server/blob/main/taxonomies/packaging_materials.txt</li> <li>Packaging recycling taxonomy : https://github.com/openfoodfacts/openfoodfacts-server/blob/main/taxonomies/packaging_recycling.txt</li> <li>Preservation methods taxonomy (related) : https://github.com/openfoodfacts/openfoodfacts-server/blob/main/taxonomies/preservation.txt</li> </ul> <p>Those taxonomies are used to structure packaging data in Open Food Facts, and to analyze unstructured input data.</p>"},{"location":"dev/explain-packaging-data/#how-we-could-improve-it","title":"How we could improve it","text":""},{"location":"dev/explain-packaging-data/#extend-the-attributes-of-the-packaging-components-in-the-packagings-data-structure","title":"Extend the attributes of the packaging components in the \"packagings\" data structure","text":""},{"location":"dev/explain-packaging-data/#weight","title":"Weight","text":"<p>We need to add an attribute for the weight of the packaging component. We might need to add different fields to distinguish values that have been entered by users that weight the packaging, versus values provided by the manufacturer, or average values that we have determined from other products, or that we got from external sources.</p>"},{"location":"dev/explain-packaging-data/#make-the-packagings-data-structure-read-and-write","title":"Make the \"packagings\" data structure READ and WRITE","text":"<p>The \"packagings\" data structure is currently a READ only field. We could create an API to make it a READ and WRITE field.</p> <p>For new products, clients (website and apps) could ask users to enter data about all packaging components of the product.</p> <p>For existing products, clients could display the packaging components and let users change them (e.g. adding or removing components, entering values for new attributes, editing attributes to add more precise values (e.g. which type of plastic) etc.).</p>"},{"location":"dev/explain-packaging-data/#add-a-way-to-indicate-that-the-packagings-data-structure-contains-all-the-packaging-components-of-the-product","title":"Add a way to indicate that the \"packagings\" data structure contains all the packaging components of the product","text":"<p>We currently have no way to know if the packaging data we have for a product is complete, or if we may be missing some packaging components.</p> <p>We could have a way (e.g. a checkbox) that users could use to indicate all components are accounted for. And we could also do the reverse, and indicate that it is very likely that we are missing some packaging components (e.g. if we have a \"cap\" but no other component to put the cap on).</p>"},{"location":"dev/explain-packaging-data/#deprecate-the-packaging-tags-field","title":"Deprecate the \"packaging\" tags field","text":"<p>We could discard the existing \"packaging\" tags field, and replace it with an API to allow clients to add partial information about packaging components.</p> <p>For instance, if Robotoff detects that the product is in a plastic bottle by analyzing a product photo, it could send <code>{shape:\"bottle\", material:\"en:plastic\"}</code> and it would be added / combined with the existing \"packagings\" data.</p>"},{"location":"dev/explain-packaging-data/#keep-the-packaging_text_language-code-field","title":"Keep the \"packaging_text_[language code]\" field","text":"<p>It is important to keep this field, as we can display it as-is, use it as input data, and it may contain interesting data that we do not analyze yet.</p> <p>When filled, the values for this field can be analyzed and added to / combined with the \"packagings\" data structure. Similarly to ingredient text analysis, we could keep information about which parts of the text were recognized as attributes of a packaging component, and which parts were not recognized and were therefore ignored.</p> <p>Changing the \"packagings\" value will not change the \"packaging_text_[language code]\" values.</p>"},{"location":"dev/explain-packaging-data/#challenges","title":"Challenges","text":""},{"location":"dev/explain-packaging-data/#incomplete-lists-of-packaging-components","title":"Incomplete lists of packaging components","text":""},{"location":"dev/explain-packaging-data/#slightly-mismatched-data-from-different-sources","title":"Slightly mismatched data from different sources","text":"<p>For a single product, we might get partial packaging data from different sources that we map to similar but distinct shapes, like \"bottle\", \"jar\" and \"jug\". It may be difficult to determine if the data concerns a single packaging component, or different components.</p>"},{"location":"dev/explain-packaging-data/#products-with-packaging-changes","title":"Products with packaging changes","text":""},{"location":"dev/explain-packaging-data/#resources","title":"Resources","text":"<ul> <li>2020 project to start structuring packaging data: https://wiki.openfoodfacts.org/Packagings_data_structure</li> </ul> <ol> <li> <p>parse_packaging_from_text_phrase() function in /lib/ProductOpener/Packagings.pm \u21a9</p> </li> <li> <p>analyze_and_combine_packaging_data() function in /lib/ProductOpener/Packagings.pm \u21a9</p> </li> </ol>"},{"location":"dev/explain-personal-search/","title":"Explain personal search","text":"<p>Personal search is a feature to let users rank and score products according to their preferences.</p> <p>It can be applied on the website and the mobile.</p> <p>This is a very distinctive feature of Open Food Facts and close to our goal of enabling personalized usage of the data.</p> <p>Bear in mind that user preferences for food is sensitive information that must not be exposed.</p>"},{"location":"dev/explain-personal-search/#preferences","title":"Preferences","text":"<p>Setting preferences happens client-side and is stored in browser or app local storage.</p> <p>The user can enter, for different attributes, how important each is according to their preferences.</p> <p>Attributes are grouped into sections (called groups).</p> <p>The attributes are accessible using <code>/api/v1/attribute_groups_&lt;language_code&gt;[^attributes_code]</code>, eg <code>https://world.openfoodfacts.org/api/v1/attribute_groups_en</code>.</p> <p>A panel is displayed in the web page using javascript to let users set their preferences<sup>1</sup>.</p>"},{"location":"dev/explain-personal-search/#scoring","title":"Scoring","text":""},{"location":"dev/explain-personal-search/#computing-product-match-for-each-attribute","title":"Computing product match for each attribute","text":"<p>On a product, for each attribute, we compute a match score for each requirement.</p> <p>This matching could depend on the country and maybe other data, for example for environmental impact.</p> <p>Each attribute has a specific algorithm for computing the match score.</p> <p>The Attributes.pm module contains functions to compute those attributes. It is exposed in the API in the <code>attribute_groups</code> properties (not returned by default, you have to explicitly ask for it).</p> <p>See also: https://wiki.openfoodfacts.org/Product_Attributes</p>"},{"location":"dev/explain-personal-search/#computing-product-match-according-to-user-preferences","title":"Computing product match according to user preferences","text":"<p>We first compute a numerical score as follow:</p> <ul> <li>all \"not important\" attributes according to user preferences are ignored</li> <li>for each remaining attributes:<ul> <li>we take the weight based upon users preferences (2 for mandatory and very important, 1 for important)</li> <li>we take the \"match\" score of the product for this attribute</li> </ul> </li> <li>the score is the weighed average of individual attribute scores; it is between 0 and 100 (as match)</li> <li>we also keep track of weights of unknown attributes vs weights of all attributes</li> </ul> <p>The final match status is computed as follow:</p> <ul> <li>very_good_match   score &gt;= 75</li> <li>good_match        score &gt;= 50</li> <li>poor_match        score &lt; 50</li> <li>unknown_match     at least one mandatory attribute is unknown, or unknown attributes weigh more than 50% of the total weight</li> <li>may_not_match     at least one mandatory attribute score is <code>&lt;=</code> 50 (e.g. may contain traces of an allergen)</li> <li>does_not_match    at least one mandatory attribute score is <code>&lt;=</code> 10 (e.g. contains an allergen, is not vegan)</li> </ul> <p>For the web, this is implemented in <code>product-search.js</code>, in function <code>match_product_to_preferences</code></p> <p>Note: Currently, preferences_factors are hardcoded in <code>product-search.js</code>,   while we have a preference api /api/v2/preferences which should be used   but does not seem up to date.   See issue #10406</p> <p>When personal search is activated, the match status is displayed on product pages, and on search for each item.</p>"},{"location":"dev/explain-personal-search/#ranking","title":"Ranking","text":"<p>On the website main search page, users can sort products of the current page according to their preferences. This is done in javascript.</p> <p>In the mobile app, this is possible on lists.</p> <p>The comparison is not based upon match status, but upon computed score, with an extra malus for does_not_match.</p> <p>We guarantee this order:</p> <ol> <li>very_good_match</li> <li>good_match</li> <li>poor_match</li> <li>does_not_match</li> </ol> <p>But unknown_match and may_not_match may be in-between those values.</p> <ol> <li> <p>see product-preferences.js\u00a0\u21a9</p> </li> <li> <p>See <code>product-search.js</code> function <code>rank_products</code> \u21a9</p> </li> </ol>"},{"location":"dev/explain-pro-dev-setup/","title":"Explanation on Docker Setup of pro platform for development","text":"<p>This explains how we setup docker file for pro platform development. For explanations on how to use it, see: how-to-guides/pro-development</p> <p>off is the public facing application (world.openfoodfacts.org) off-pro is the producers platform (world.pro.openfoodfacts.org)</p> <p>When we work on the pro platform for development we want:</p> <ul> <li>off containers to talk to each other, and have their own volumes</li> <li>off-pro containers to talk to each other, and, generally, have their own volumes</li> <li>minion and backend from both apps to access the same postgres database   (which stores tasks queues)</li> <li>off and off-pro backends / minion needs to share some volumes:   orgs, users ands some files living in podata</li> </ul> <p>Still we would like to avoid having different clones of the repository, but we can isolate projects thanks to <code>COMPOSE_PROJECT_NAME</code>, which will prefix containers names, volumes and default network, thus isolate each projects.</p> <p>This is achieved by sourcing .env-pro which sets up some environment variables that will supersede the .env variables. The main one being setting <code>COMPOSE_PROJECT_NAME</code> and <code>PRODUCERS_PLATFORM</code>, but also others like <code>MINION_QUEUE</code>.</p> <p>On the volume side, we will simply give hard-coded names to volumes that should be shared between off and pro platform, thus they will be shared. Ideally we should not have to share single files but this is a work in progress, we will live without it as a first approx.</p> <p>To satisfy the access to the same database, we will use postgres database from off as the common database.</p> <p>In order to achieve that:</p> <ul> <li>we use profiles, so we won't start postgres in pro docker compose</li> <li>we connect <code>postgres</code>, <code>backend</code> and <code>minion</code> services to a shared network, called <code>minion_db</code> Fortunately this works, but note that there is a pitfall: on the <code>minion_db</code> network both <code>backend</code> services (<code>off</code> and <code>off-pro</code>) will respond to the same name. For the moment it is not a problem for we don't need to communicate directly between instances. If it were, we would have to define custom aliases for those services on the <code>minion_db</code> network.</li> </ul> <pre><code>network    OFF              network       PRO              network\npo_default containers       minion_db     containers       po_pro_default\n    |                          |                              |\n    +------postgres------------+                              |\n    |                          |                              |\n    |                          |                              |\n    +-----backend--------------+                              |\n    |                          +----------backend-------------+\n    |                          |                              |\n    +------minion--------------+                              |\n    |                          +----------minion--------------+\n    |                          |                              |\n    |                          |                              |\n    +------frontend            |          frontend------------+\n    +------mongodb             |          mongodb-------------+\n    |                          |                              |\n</code></pre>"},{"location":"dev/explain-taxonomy-build-cache/","title":"Explanation on Taxonomy Build Cache","text":"<p>Taxonomies have a significant impact on OFF processing and automated test results so need to be rebuilt before running any tests. However, this process takes some time, so the built taxonomy files are cached in a GitHub repository so that they only need to be rebuilt when there is a genuine change.</p>"},{"location":"dev/explain-taxonomy-build-cache/#how-it-works","title":"How it works","text":"<p>A hash is calculated for all of the source files used to build a particular taxonomy and GitHub is then checked to see if a cache already exists for that hash.</p> <p>If no cached build is found then the taxonomy is rebuilt and cached locally.</p> <p>If the GITHUB_TOKEN environment variable is set then the cached build is also uploaded to the https://github.com/openfoodfacts/openfoodfacts-build-cache repository.</p> <p>The token is a personal access token, created here: https://github.com/settings/tokens. Only the public_repo scope is needed.</p> <p>Note that no token is required to download previous cached builds from the repo.</p>"},{"location":"dev/explain-taxonomy-build-cache/#storage","title":"Storage","text":"<p>Cached copies of taxonomy build results are stored in <code>build-cache/taxonomies</code>.</p> <p>If no local cache is available then https://github.com/openfoodfacts/openfoodfacts-build-cache is checked for a copy.</p>"},{"location":"dev/explain-taxonomy-build-cache/#obtaining-a-token","title":"Obtaining a token","text":"<p>The GITHUB_TOKEN is a personal access token, created here: https://github.com/settings/tokens. Only the public_repo scope is needed.</p>"},{"location":"dev/explain-taxonomy-build-cache/#considerations","title":"Considerations","text":"<p>In maintaining this code be aware of the following complications...</p>"},{"location":"dev/explain-taxonomy-build-cache/#circular-dependencies","title":"Circular Dependencies","text":"<p>There is a circular dependency between taxonomies, languages and foods. The foods library is used to create the source for the nutrient_levels taxonomy, which uses translations from languages. However, languages depends on the languages taxonomy...</p> <p>This is currently resolved by building the taxonomy on the fly if it is requested but not currently built.</p>"},{"location":"dev/explain-taxonomy-build-cache/#taxonomy-dependencies","title":"Taxonomy Dependencies","text":"<p>Some taxonomies perform lookups on others, e.g. additives_classes are referenced by additives, so the referenced taxonomy needs to be built first. The build order is determined in the Config_off.pm file.</p>"},{"location":"dev/how-to-add-a-translation/","title":"How to add a translation","text":""},{"location":"dev/how-to-add-a-translation/#how-to-add-a-translation","title":"How to add a translation","text":"<p>You can translate Open Food Facts at https://translate.openfoodfacts.org thanks to the Crowdin platform. Please do not translate directly in the code, or your translations will be overwritten.</p> <p>If you want to add a translatable string in the code:</p> <ul> <li>modify the file with the <code>.pot</code> extension related to your context. Eg.   <pre><code>msgctxt \"name_of_your_string\"\nmsgid \"Hello world!\"\nmsgstr \"\"\n</code></pre></li> <li>modify the file <code>en.po</code> related to your context, to be sure at least an english string will be displayed before Crowdin send back all <code>.po</code> files (which can take several days). It should be the same code as the one from <code>.pot</code> + the english transaltion (see <code>msgstr</code> field). Eg.   <pre><code>msgctxt \"name_of_your_string\"\nmsgid \"Hello world!\"\nmsgstr \"Hello world!\"\n</code></pre></li> <li>use your new string with the <code>lang()</code> function. Eg. in a template file: <code>[% lang('name_of_your_string') %]</code></li> <li>if you want to test your modifications in your dev environnement:<ul> <li>modify the <code>fr.po</code> files if you want to test in French; be aware it's just for test: these files will be overwritten by Crowdin. Eg. in French:   <pre><code>msgctxt \"name_of_your_string\"\nmsgid \"Hello world!\"\nmsgstr \"Salut le monde!\"\n</code></pre></li> <li>don't forget to <code>make build_lang</code> to let docker take your modifications into account</li> </ul> </li> </ul>"},{"location":"dev/how-to-debug-minion-import-and-export-tasks/","title":"How to debug Minion import and export tasks","text":"<p>For imports on the pro platform, and exports from the pro platform and imports on the public platform, we use Minion tasks.</p> <p>Those tasks are run by a Minion worker service, which is configured in /etc/systemd/system/minion\\@off.service</p>"},{"location":"dev/how-to-debug-minion-import-and-export-tasks/#log-files","title":"Log files","text":"<p>in the logs directory, we have:</p> <ul> <li>minion.log - states which tasks are started</li> <li>minion_log4perl.log - debug messages from the Perl code that implements the Minion tasks</li> </ul>"},{"location":"dev/how-to-debug-minion-import-and-export-tasks/#checking-the-status-of-minion-tasks-jobs","title":"Checking the status of Minion tasks (jobs)","text":"<pre><code>off@off:/srv/off$ (off) ./scripts/minion_producers.pl minion job \n[..]\n132132  inactive  pro.openfoodfacts.org  update_export_status_for_csv_file\n132131  failed    openfoodfacts.org      import_csv_file\n132130  finished  pro.openfoodfacts.org  export_csv_file\n</code></pre>"},{"location":"dev/how-to-debug-minion-import-and-export-tasks/#debugging-failed-import-of-pro-platform-data-on-public-platform","title":"Debugging failed import of pro platform data on public platform","text":"<p>The following are notes on how a specific issue was debugged in production:</p> <p>We now are loading automatically Systeme U (a big French retailer) imports in the producers platform.</p> <p>The checkbox in the Systeme U organization (admin field) to automatically export new products is checked, but the products have not been loaded on the producers platform.</p> <p>We can launch the export and import manually:</p> <p>off@off-pro:/srv/off-pro$ (off-pro) scripts/export_and_import_to_public_database.pl --query states_tags=en:to-be-exported --owner org-systeme-u</p> <p>And we can see the details of the corresponding minion jobs:</p> <pre><code>off@off-pro:/srv/off-pro$ (off-pro) ./scripts/minion_producers.pl minion job\n[..]\n132132  inactive  pro.openfoodfacts.org  update_export_status_for_csv_file\n132131  failed    openfoodfacts.org      import_csv_file\n132130  finished  pro.openfoodfacts.org  export_csv_file\n</code></pre> <p>In the off container, there is little useful information in the logs:</p> <p>/srv/off/logs/minion.log:</p> <pre><code>import_csv_file_task - job: 132131 started - args: {\"comment\":\"Import from producers platform\",\"csv_file\":\"/srv/off-pro/export_files/org-systeme-u/export.1741792171.exported.csv\",\"global_values\":{\"data_sources\":\"Producers, Producer - systeme-u\"},\"query\":{\"owner\":\"org-systeme-u\",\"states_tags\":\"en:to-be-exported\",\"data_quality_errors_producers_tags.0\":{\"$exists\":false},\"code\":\"3256221408515\"},\"export_job_id\":132130,\"source_id\":\"org-systeme-u\",\"manufacturer\":1,\"org_id\":\"systeme-u\",\"export_id\":1741792171,\"include_images_paths\":1,\"user_id\":\"org-systeme-u\",\"source_name\":\"systeme-u\",\"include_obsolete_products\":1,\"exported_t\":1741792171,\"owner_id\":\"org-systeme-u\"}\n</code></pre> <p>To get more data (debug level) in minion_log4perl.log:</p> <p>We can stop the minion daemon</p> <p>as the root user: <code>systemctl stop minion@off.service</code></p> <p>And run it manually as a normal process</p> <p>as the off user: <pre><code>sudo -u off bash\nsource env/setenv off\nTAP_LOG_FILTER=none perl scripts/minion_producers.pl minion worker -m production\n``` bash\n\nThe `TAP_LOG_FILTER` environment variable is used to set the log level for Log4Perl. Setting it to `none` prints messages for all log levels.\n\nI added a print STDERR in Import.pm to see if a specific product is causing the problem:\n\n``` bash\nImport.pm - org: systeme-u - code: 3256221408515\n</code></pre></p> <p>Trying to export this single product indeed fails.</p> <p>Last lines in minion_log4perl.log:</p> <pre><code>[24193] /srv/off/lib/ProductOpener/TaxonomiesEnhancer.pm 257 ProductOpener.TaxonomiesEnhancer {} check_ingredients_between_languages &gt; detect_missing_stop_words_before_list -   first ingredient in ingredients1 (fr:ble-dur-precuit-concasse) is unknown (is_in_taxonomy =&gt; 1) or first ingredient in ingredients2 is known (is_in_taxonomy =&gt; 1)\n[24193] /srv/off/lib/ProductOpener/TaxonomiesEnhancer.pm 356 ProductOpener.TaxonomiesEnhancer {} check_ingredients_between_languages &gt; detect_missing_stop_words_after_list - start, lang1: fr, lang2: en\n[60104] scripts/minion_producers.pl 87 main {minion_backend =&gt; [..] minion producers workers stopped\n</code></pre> <p>Unfortunately there's no clearer error message.</p> <p>To debug it, I added print STDERR statements in TaxonomiesEnhancer.pm, to try to see where it stopped.</p> <p>The following line is the error:</p> <pre><code>                $log-&gt;debug(\n                        \"check_ingredients_between_languages &gt; detect_missing_stop_words_after_list -   too much difference between languages to raise warning. diff/total &gt; tolerance: $translation_difference_count / $#$ingredients1 = \"\n                                . $translation_difference_count / $#$ingredients1 . \" &gt; \"\n                                . $translation_difference_accepted_percentage)\n                        if $log-&gt;is_debug();\n</code></pre> <p><code>$#array</code> is equal to <code>0</code> when <code>@array</code> contains 1 element, so it makes a <code>division by 0 error</code> and the task fails. But unfortunately I could not find any log where this division by zero error was reported, the only thing we get from Minion is that the task failed...</p> <p>Finally: don't forget to restart the minion service !</p> <p>```bash sudo systemctl start minion@off.service</p>"},{"location":"dev/how-to-develop-producer-platform/","title":"How to develop on the producers platform","text":"<p>Here is how to develop for the producers platform using docker.</p>"},{"location":"dev/how-to-develop-producer-platform/#prerequisites","title":"Prerequisites:","text":"<ul> <li>Docker should already be set up for development.</li> </ul>"},{"location":"dev/how-to-develop-producer-platform/#shell-setup","title":"Shell Setup:","text":"<p>You will need two types of shells:</p> <ul> <li>Shell for OpenFoodFacts:<ul> <li>Use this shell for general development on the OpenFoodFacts platform.</li> </ul> </li> <li>Shell for OpenFoodFacts-Pro: Use this shell when working on the OpenFoodFacts-Pro platform.<ul> <li>To set up the shell, run the command: <code>. env/setenv.sh off-pro</code> (this simply sets some environment variables that will override the ones in <code>.env</code>).</li> <li>Once the shell is set up, your prompt will show <code>(pro)</code> to indicate that you are in the producers environment.</li> </ul> </li> </ul>"},{"location":"dev/how-to-develop-producer-platform/#development-workflow","title":"Development Workflow:","text":"<p>To develop on the producers platform, follow these steps:</p> <ul> <li>Open a shell for OpenFoodFacts-Pro.</li> <li>Run the command <code>make dev</code> to start the development environment. This command functions as usual.<ul> <li>If you encounter any issues with CSS not showing up, you can run <code>make build_lang</code> in the pro shell.</li> </ul> </li> </ul>"},{"location":"dev/how-to-develop-producer-platform/#working-with-product-importexport-and-interacting-with-the-public-platform","title":"Working with Product Import/Export and Interacting with the Public Platform:","text":"<p>If you need to work on product import/export or interact with the public platform, you must start the following services: <code>PostgreSQL</code>, <code>MongoDB</code>, and the <code>Minion</code>. Here's how:</p> <ul> <li>In a non-pro shell (OpenFoodFacts shell), run the command <code>docker compose up postgres minion mongodb</code>.<ul> <li>This command starts the necessary services in the background.</li> </ul> </li> </ul>"},{"location":"dev/how-to-develop-producer-platform/#note-the-setup-does-not-currently-support-running-the-http-server-for-both-public-and-pro-platform-at-the-same-time-therefore-to-access-the-public-platform-you-need-to-follow-these-steps","title":"Note: The setup does not currently support running the http server for both public and pro platform at the same time. Therefore, to access the public platform, you need to follow these steps:","text":"<ul> <li>in your pro shell, run a <code>docker compose stop frontend</code></li> <li>in your non pro shell, run a <code>docker compose up frontend</code> Now, the public database can be accessed at <code>openfoodfacts.localhost</code>.If you need to access the pro HTTP server, reverse these steps.</li> </ul> <p>Note that if you use direnv, the setup should work seamlessly without redefining the variables set by <code>setenv.sh</code>.</p> <p>An explanation of the setup can be found at explain-pro-dev-setup.md</p> <ul> <li>If you want to see the state of tasks, you can run:</li> </ul> <p><pre><code>docker compose exec minion /opt/product-opener/scripts/minion_producers.pl  minion job\n</code></pre> (add --help to see all options), or refer to https://docs.mojolicious.org/Minion/Command/minion/job</p> <ul> <li>You may also inspect the database by running: <pre><code>docker compose exec  postgres psql -U productopener -W minion\n</code></pre> The password is given by the <code>POSTGRES_PASSWORD</code> variable in the <code>.env</code> file and defaults to <code>productopener</code>.  Inspecting the minion table can be helpful in understanding the database structure and contents.</li> </ul>"},{"location":"dev/how-to-develop-using-docker/","title":"How to use Docker to Develop - a guide","text":"<p>This guide is for developers and newcomers to help them debug and explore Docker.</p> <p>This page describes how to test and debug your changes once you have set up the project, Product Opener with Docker using dev environment quick start guide.</p>"},{"location":"dev/how-to-develop-using-docker/#checking-logs","title":"Checking logs","text":""},{"location":"dev/how-to-develop-using-docker/#tail-docker-compose-logs","title":"Tail Docker Compose logs","text":"<pre><code>make log\n</code></pre> <p>You will get logs from nginx, mongodb, postgres, etc.</p>"},{"location":"dev/how-to-develop-using-docker/#tail-other-logs","title":"Tail other logs","text":"<p>Most logs from perl are not (yet ?) displayed on the docker logs, but are instead available in specific directories.</p> <p>To see them use:</p> <pre><code>make tail\n</code></pre> <p>It will <code>tail -f</code> all the files present in the <code>logs/</code> directory:</p> <ul> <li><code>apache2/error.log</code></li> <li><code>apache2/log4perl.log</code></li> <li><code>apache2/modperl_error.log</code></li> <li><code>apache2/other_vhosts_access.log</code></li> <li><code>nginx/access.log</code></li> <li><code>nginx/error.log</code></li> </ul> <p>You can also simply run: <pre><code>tail -f &lt;FILEPATH&gt;\n</code></pre> to check a specific log.</p> <p>One of the most important is <code>log4perl.log</code>.</p>"},{"location":"dev/how-to-develop-using-docker/#increasing-log-verbosity","title":"Increasing log verbosity","text":"<p>By default, the <code>log4perl</code> configuration <code>conf/log.conf</code> matches production settings. You can tweak that file with your own dev configuration settings and run <code>make restart</code> to reload the changes.</p> <p>A setting useful for local environments is to set <code>TRACE</code> log level: <pre><code>log4perl.rootLogger=TRACE, LOGFILE\n</code></pre></p>"},{"location":"dev/how-to-develop-using-docker/#opening-a-shell-in-a-docker-container","title":"Opening a shell in a Docker container","text":"<p>Run the following to open a bash shell within the <code>backend</code> container:</p> <pre><code>docker compose exec backend bash\n</code></pre> <p>You should see <code>root@&lt;CONTAINER_ID&gt;:/#</code> (opened root shell): you are now within the Docker container and can begin typing some commands!</p>"},{"location":"dev/how-to-develop-using-docker/#checking-permissions","title":"Checking permissions","text":"<p>Navigate to the specific directory and run</p> <p><pre><code>ls -lrt\n</code></pre> It will list all directories and their permissions.</p>"},{"location":"dev/how-to-develop-using-docker/#creating-directory","title":"Creating directory","text":"<p>Navigate to your specific directory using <code>cd</code> and run</p> <pre><code>mkdir directory-name\n</code></pre>"},{"location":"dev/how-to-develop-using-docker/#running-minion-jobs","title":"Running minion jobs","text":"<p>Minion is a high-performance job queue for Perl, used in openfoodfacts-server for time-consuming import and export tasks. These tasks are processed and queued using the minion jobs queue. Therefore, they are called minion jobs.</p> <p>Go to <code>/opt/product-opener/scripts</code> and run</p> <pre><code>./minion_producers.pl minion job\n</code></pre> <p>The above command will show the status of minion jobs. Run the following command to launch the minion jobs.</p> <pre><code>./minion_producers.pl minion worker -m production -q pro.openfoodfacts.org\n</code></pre>"},{"location":"dev/how-to-develop-using-docker/#restarting-apache","title":"Restarting Apache","text":"<p>Sometimes restarting the whole <code>backend</code> container is overkill, and you can just restart <code>Apache</code> from inside the container:</p> <pre><code>apache2ctl -k restart\n</code></pre>"},{"location":"dev/how-to-develop-using-docker/#exiting-the-container","title":"Exiting the container","text":"<p>Use <code>exit</code> to exit the container.</p>"},{"location":"dev/how-to-develop-using-docker/#making-code-changes","title":"Making code changes","text":"<p>In the dev environment, any code change to the local directory will be written  to the container. That said, some code changes require a restart of the <code>backend</code>  container, or rebuilding the NPM assets.</p>"},{"location":"dev/how-to-develop-using-docker/#getting-away-from-make-up","title":"Getting away from make up","text":"<p><code>make up</code> is a good command for starters, but it's not the right one to use if you develop on a daily basis, because it may be slow, as it does a full rebuild, which, in dev mode, should only be necessary in a few cases.</p> <p>On a daily basis you could better run those:</p> <ul> <li><code>docker compose up</code> to start and monitor the stack.</li> <li><code>docker compose restart backend</code> to account for a code change in a <code>.pm</code> file   (cgi <code>pl</code> files do not need a restart)</li> <li><code>docker compose stop</code> to stop them all</li> </ul> <p>If some important file changed (like Dockerfile or cpanfile, etc.), or if in doubt, you can run <code>docker compose build</code> (or maybe it's a good time to use <code>make up</code> once)</p> <p>You should explore the docker compose commands. Most are useful!</p>"},{"location":"dev/how-to-develop-using-docker/#live-reload","title":"Live reload","text":"<p>To automate the live reload on code changes, you can install the Python package <code>when-changed</code>: <pre><code>pip3 install when-changed\nwhen-changed -r docker/ docker-compose.yml .env -c \"make restart\"                                         # restart backend container on compose changes\nwhen-changed -r lib/ -r docker/ docker-compose.yml -c \"docker compose backend restart\" # restart Apache on code changes\nwhen-changed -r html/ Dockerfile Dockerfile.frontend package.json -c \"make up\" # rebuild containers on asset or Dockerfile changes\n</code></pre></p> <p>An alternative to <code>when-changed</code> is <code>inotifywait</code>.</p>"},{"location":"dev/how-to-develop-using-docker/#run-queries-on-mongodb-database","title":"Run queries on MongoDB database","text":"<pre><code>docker compose exec mongodb mongo\n</code></pre> <p>The above command will open a MongoDB shell, allowing you to use all the <code>mongo</code>  commands to interact with the database:</p> <pre><code>show dbs\nuse off\ndb.products.count()\ndb.products.find({_id: \"5053990155354\"})\ndb.products.deleteOne({_id: \"5053990155354\"})\n</code></pre> <p>See the <code>mongo</code> shell docs for more commands.</p>"},{"location":"dev/how-to-develop-using-docker/#adding-environment-variables","title":"Adding environment variables","text":"<p>If you need some value to be configurable, it is best to set it as an environment variable.</p> <p>To add a new environment variable <code>TEST</code>:</p> <ul> <li>In a <code>.env</code> file, add <code>TEST=test_val</code> [local].</li> <li>In <code>.github/workflows/container-deploy.yml</code>, add <code>echo \"TEST=${{ secrets.TEST }}\" &gt;&gt; .env</code> to the \"Set environment variables\" build step [remote]. Also add the corresponding GitHub secret <code>TEST=test_val</code>.</li> <li>In <code>docker-compose.yml</code> file, add it under the <code>backend</code> &gt; <code>environment</code> section.</li> <li>In <code>conf/apache-2.4/modperl.conf</code> file, add <code>PerlPassEnv TEST</code>.</li> <li>In <code>lib/Config2.pm</code>, add <code>$test = $ENV{TEST};</code>. Also add <code>$test</code> to the <code>EXPORT_OK</code> list at the top of the file to avoid a compilation error.</li> </ul> <p>The call stack goes like this:</p> <pre><code>stateDiagram-v2\n  make_up: make up\n  docker_compose: docker compose\n  env_file:.env\n  docker_compose_service_definition: docker compose service definition\n  make_up  --&gt; docker_compose:launch\n  docker_compose --&gt; env_file:loads\n  env_file --&gt; docker_compose_service_definition:pass variables\n  docker_compose_service_definition --&gt; docker_container:define env variables to pass\n  docker_container --&gt; mod_perl:pass env variables\n  mod_perl --&gt; Config2pm:initialize variables from env\n</code></pre> <p>Important: Note that when you change environment variables, a restart of docker containers is not sufficient. You must destroy and re-create the container. The best way to do it, most of the time, is <code>docker compose down &amp;&amp; docker compose up -d</code> (you can also destroy individual container with <code>docker compose rm -sf &lt;service_name&gt; &amp;&amp; docker compose ud -d &lt;service_name&gt;</code>)</p>"},{"location":"dev/how-to-develop-using-docker/#managing-multiple-deployments","title":"Managing multiple deployments","text":"<p>To juggle between multiple local deployments (e.g: to run different flavors of Open Food Facts on the same host), there are different possible strategies.</p>"},{"location":"dev/how-to-develop-using-docker/#a-set-env-script","title":"a set env script","text":"<p>docker compose takes its settings from, in decreasing priority:</p> <ul> <li>the environment</li> <li>the <code>.env</code> file</li> </ul> <p>So one strategy to have a different instance, can be to keep the same <code>.env</code> file, but override some env variables to tweak the configuration. This is a good strategy for the pro platform.</p> <p>For this case we have a  <code>setenv.sh</code> script.</p> <p>To use it, open a terminal, where you want to be in pro environment and simply use:</p> <pre><code>. setenv.sh off-pro\n</code></pre> <p>then you can use whatever docker compose command.</p> <p>Note: This terminal will remain in <code>pro</code> mode until you end its session.</p> <p>See also Developing on the producers platform</p>"},{"location":"dev/how-to-develop-using-docker/#different-env-file","title":"different .env file","text":"<p>This strategy might be the right one if your settings differ a lot.</p> <p>You will need:</p> <ul> <li> <p>Multiple <code>.env</code> files (one per deployment), such as:</p> <ul> <li><code>.env.off</code> : configuration for Open Food Facts dev env.</li> <li><code>.env.off-pro</code> : configuration for Open Food Facts Producer's Platform dev env.</li> <li><code>.env.obf</code>: configuration for Open Beauty Facts dev env.</li> <li><code>.env.opff</code>: configuration for Open Pet Food Facts dev env.</li> </ul> </li> </ul> <ul> <li><code>COMPOSE_PROJECT_NAME</code>, <code>COMPOSE_PROFILES</code>,  <code>PRODUCT_OPENER_DOMAIN</code>, <code>PRODUCT_OPENER_PORT</code>, <code>PRODUCT_OPENER_FLAVOR</code> and <code>PRODUCT_OPENER_FLAVOR_SHORT</code> set to different values in each <code>.env</code> file, so that container names across deployments are unique and frontend containers don't port-conflict with each other. See example below.</li> </ul> <p>To switch between configurations, set <code>ENV_FILE</code> before running <code>make</code> commands, (or <code>docker compose</code> command):</p> <pre><code>ENV_FILE=.env.off-pro make up # starts the OFF Producer's Platform containers.\nENV_FILE=.env.obf     make up # starts the OBF containers.\nENV_FILE=.env.opff    make up # starts the OPFF containers.\n</code></pre> <p>or export it to keep it for a while:</p> <pre><code>export ENV_FILE=.env.off # going to work on OFF for a while\nmake up\nmake restart\nmake down\nmake log\n</code></pre> <p>A good strategy is to have multiple terminals open, one for each deployment:</p> <ul> <li><code>off</code> [Terminal 1]:   <pre><code>export ENV_FILE=.env.off\nmake up\n</code></pre></li> </ul> <ul> <li><code>off-pro</code> [Terminal 2]:   <pre><code>export ENV_FILE=.env.off-pro\nmake up\n</code></pre></li> </ul> <ul> <li><code>obf</code> [Terminal 3]:   <pre><code>export ENV_FILE=.env.obf\nmake up\n</code></pre></li> </ul> <ul> <li><code>opff</code> [Terminal 3]:   <pre><code>export ENV_FILE=.env.opff\nmake up\n</code></pre></li> </ul> <p>Note: the above case of 4 deployments is a bit ambitious, since ProductOpener's <code>backend</code> container takes about ~6GB of RAM to run, meaning that the above 4 deployments would require a total of 24GB of RAM available.</p> <p>Example: if you already have Open Food Facts up and running and you would like to have Open Beauty Facts as well. Then, copy <code>.env</code> to <code>.env.obf</code> and modify the following variables: <pre><code>COMPOSE_PROJECT_NAME=po_off\nCOMPOSE_PROFILES=off\nPRODUCT_OPENER_DOMAIN=openfoodfacts.localhost\nPRODUCT_OPENER_PORT=80\nPRODUCT_OPENER_FLAVOR=openfoodfacts\nPRODUCT_OPENER_FLAVOR_SHORT=off\n</code></pre> to <pre><code>COMPOSE_PROJECT_NAME=po_obf\nCOMPOSE_PROFILES=obf\nPRODUCT_OPENER_DOMAIN=openbeautyfacts.localhost\nPRODUCT_OPENER_PORT=81\nPRODUCT_OPENER_FLAVOR=openbeautyfacts\nPRODUCT_OPENER_FLAVOR_SHORT=obf\n</code></pre> Run: <pre><code>export ENV_FILE=.env.obf\nmake dev\n</code></pre> If you have error like <code>Errors in the labels taxonomy definition at /opt/product-opener/lib/ProductOpener/Tags.pm line 1622.</code>, due to conflict between taxonomies, a small hack is to comment the lines (it appears 2 times in the file) raising error in the Tags.pm file. </p>"},{"location":"dev/how-to-develop-with-webcomponents/","title":"How to use WebComponents","text":"<ul> <li>We have a variety of Web Components to do the hard work for you: explore them at openfoodfacts-webcomponents</li> <li>Nutrition extraction, Ingredient extraction, Robotoff questions, spellcheck, barcode scanner for PWA, Product card, and more.</li> </ul>"},{"location":"dev/how-to-develop-with-webcomponents/#how-to-develop-with-webcomponents","title":"How to develop with WebComponents","text":"<p>If you are developing a new WebComponent in openfoodfacts-webcomponents project, you might want to test its integration immediately.</p> <p>To do this you can use the following steps:</p> <ol> <li> <p>Define the <code>WEBCOMPONENTS_DIR</code> in your .env file (or better .envrc if you use that)    to point to  the relative location corresponding to your webcomponents project.    For example: <code>../openfoodfacts-webcomponents</code>.</p> </li> <li> <p>Modify the <code>package.json</code> file so that the webcomponents dependency    is not a version anymore but instead <code>/opt/webcomponents</code>:</p> <pre><code>-    \"@openfoodfacts/openfoodfacts-webcomponents\": \"1.12.3\"\n+    \"@openfoodfacts/openfoodfacts-webcomponents\": \"/opt/webcomponents\",\n</code></pre> </li> <li> <p>Don't forget to build your webcomponents (got to webcomponents directory and run <code>npm build</code>)</p> </li> <li> <p>Restart the dynamicfront container (<code>docker-compose restart dynamicfront</code>)</p> </li> </ol> <p>BEWARE: not to commit your <code>.env</code>, <code>package.json</code>  and <code>package-lock.json</code> changes !</p>"},{"location":"dev/how-to-learn-perl/","title":"How can I learn the Perl programming language?","text":"<p>Here are some introductory resources to learn Perl:</p>"},{"location":"dev/how-to-learn-perl/#quick-start","title":"Quick start","text":"<ul> <li>Perl Youtube Tutorial - Perl Enough to be dangerous // FULL COURSE 3 HOURS.</li> <li>Perl - Introduction - Introduction to perl from tutorialspoint</li> <li>Impatient Perl - PDF document for people interested in learning perl.</li> <li>Perl Fish also has a lot of resources</li> </ul>"},{"location":"dev/how-to-learn-perl/#official-documentation","title":"Official Documentation","text":"<ul> <li>Perl.org - Official Perl website with documentation, tutorials, and community resources.</li> <li>Learn Perl - Perl programming language tutorials for beginners.</li> <li>Perl Maven - Perl programming tutorials, tips, and code examples.</li> </ul>"},{"location":"dev/how-to-learn-perl/#some-useful-docs","title":"Some useful docs","text":"<ul> <li>Perl.org special variables - if you search for meaning of special variables (like <code>$'</code> or <code>$#</code> etc.)</li> <li>Perl.org regular expression - we use it quite a lot in ProductOpener's code</li> </ul>"},{"location":"dev/how-to-quick-start-guide/","title":"How to setup the Dev environment (quick start guide)","text":"<p>This guide will allow you to rapidly build a ready-to-use development environment for Product Opener running in Docker. As an alternative to setting up your environment locally, follow the Gitpod how-to guide to instantly provision a ready-to-code development environment in the cloud.</p> <p>First setup time estimate is <code>~10min</code> with the following specs:</p> <ul> <li><code>8 GB</code> of RAM dedicated to Docker client</li> <li><code>6</code> cores dedicated to Docker client</li> <li><code>12 MB/s</code> internet speed</li> </ul>"},{"location":"dev/how-to-quick-start-guide/#1-prerequisites","title":"1. Prerequisites","text":"<p>Docker is the easiest way to install the Open Food Facts server, play with it, and even modify the code.</p> <p>Docker provides an isolated environment, very close to a Virtual Machine. This environment contains everything required to launch the Open Food Facts server. There is no need to install Perl, Perl modules, Nginx, or Apache separately.</p> <p>NOTE:  New to Perl? Check how to learn perl!</p> <p>Installation steps:</p> <ul> <li>GIT version &gt;= 2.25.0</li> <li>Install Docker CE <p>If you run e.g. Debian, don't forget to add your user to the <code>docker</code> group!  </p> </li> </ul>"},{"location":"dev/how-to-quick-start-guide/#macos-prerequisites-installing-gnu-grep-for-full-regex-support","title":"MacOS Prerequisites: Installing GNU grep for Full Regex Support","text":"<p>On macOS, the default version of grep is BSD grep, which does not support certain GNU-specific options\u2014most notably, the <code>-P</code> flag for Perl-compatible regular expressions. If you encounter errors like:</p> <pre><code>grep: invalid option -- P\nusage: grep [-abcdDEFGHhIiJLlMmnOopqRSsUVvwXxZz] [-A num] [-B num] [-C[num]] \u2026\n</code></pre> <p>You can resolve the issue by installing GNU grep and prioritizing it in your shell's PATH.</p>"},{"location":"dev/how-to-quick-start-guide/#steps-to-install-gnu-grep","title":"Steps to Install GNU grep","text":"<ol> <li> <p>Install GNU grep via Homebrew:</p> <pre><code>brew install grep\n</code></pre> </li> <li> <p>Update Your PATH:</p> <p>Add the following line to your <code>~/.zshrc</code> (or your shell\u2019s configuration file):</p> <pre><code>export PATH=\"$(brew --prefix grep)/libexec/gnubin:$PATH\"\n</code></pre> <p>This ensures that the GNU version (often available as <code>ggrep</code>) is used by default instead of BSD grep.</p> </li> <li> <p>Apply the Changes:</p> <p>Restart your terminal or run:</p> <pre><code>source ~/.zshrc\n</code></pre> </li> <li> <p>Verify Installed Version:</p> </li> </ol> <p>Run the following command to ensure that GNU grep is installed and properly configured:</p> <pre><code>grep --version\n</code></pre> <p>You should see an output similar to the example below, indicating that GNU grep (with Homebrew packaging) is active and supports the <code>-P</code> option via PCRE2:</p> <pre><code>grep (GNU grep) 3.11\nPackaged by Homebrew\nCopyright (C) 2023 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later &lt;https://gnu.org/licenses/gpl.html&gt;.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\nWritten by Mike Haertel and others; see\n&lt;https://git.savannah.gnu.org/cgit/grep.git/tree/AUTHORS&gt;.\n\ngrep -P uses PCRE2 10.44 2024-06-07\n</code></pre> <p>After completing these steps, running grep commands (for example, as part of <code>make log</code>) will use GNU grep with full support for options like <code>-P</code>.</p>"},{"location":"dev/how-to-quick-start-guide/#windows-prerequisites","title":"Windows Prerequisites","text":"<p>When running with Windows, install Docker Desktop which will cover all of the above.</p> <p>The Make tasks use a number of Linux commands, such as rm and nproc, so it is recommended to run Make commands from the Git Bash shell. In addition, the following need to be installed and included in the PATH:</p> <ul> <li>Make for Windows</li> <li>wget for windows (In order to download the full product database). If you want to download wget with the executable, copy the wget.exe file to C:/Windows/System32 and you are done.</li> </ul> <p>The process of cloning the repository will create a number of symbolic links which require specific permissions under Windows. In order to do this you can use any one of these alternatives:</p> <ul> <li>Use an Administrative command prompt for all Git commands</li> <li>Completely disable UAC</li> <li>Specifically grant the Create symbolic links permission to your user</li> </ul> <p>Make sure you also activated the Developer mode on your device.</p>"},{"location":"dev/how-to-quick-start-guide/#windows-subsystem-for-linux-wsl-prerequisites","title":"Windows Subsystem for Linux (WSL) Prerequisites","text":"<p>Ensure that you have WSL installed on your Windows machine. For instructions on how to do so, you can follow Microsoft's guide to install WSL.</p> <p>After successfully installing WSL, you need to set up your Linux distribution and install Docker on it:</p> <ul> <li>Go to the Microsoft Store and install Ubuntu as your Linux distribution</li> <li>Open Ubuntu and execute the commands/instructions specified in Installing Docker Engine on Ubuntu (**NOTE: this is NOT the same thing as Docker for Desktop)</li> <li>Restart your computer to ensure all changes take effect and WSL can properly integrate with Docker</li> </ul>"},{"location":"dev/how-to-quick-start-guide/#docker-desktop-prerequisite","title":"Docker Desktop Prerequisite","text":"<p>If you use Docker Desktop:</p> <ul> <li>ensure you allow enough memory for your VMs (at least 4G)</li> <li>ensure you Enabled host networking (in Resources / Network)</li> </ul>"},{"location":"dev/how-to-quick-start-guide/#2-fork-and-clone-the-repository-from-github","title":"2. Fork and clone the repository from GitHub","text":"<p>You must have a GitHub account and fork the project if you want to contribute to Open Food Facts development, but it\u2019s not required if you just want to see how it works.</p> <p>Cloning Open Food Facts server with the default options downloads 2.23 GiB (as of 2024-03). See Shallow Clone if this might be a problem for you.</p>"},{"location":"dev/how-to-quick-start-guide/#fork-the-repository","title":"Fork the repository","text":"<p>If you want to collaborate you will need to fork the repository. (See Creating a pull request from a fork in Github documentation for an explanation.)</p> <p>Go to https://github.com/openfoodfacts/openfoodfacts-server and click the \"Fork\" button.</p> <p>This will create a new repository in your GitHub account. eg. (for an hypothetical my-user-id user): https://github.com/my-user-id/openfoodfacts-server.</p> <p>This is the url you have to use in the following instructions.</p> <p>Very important: always work in new branches, never in \"main\", otherwise it will be difficult to sync your project with the upstream repository (the openfoodfacts original repository).</p> <p>From time to time (before starting a new branch), it's a good idea to sync your fork, either using the github interface and then pulling \"main\" locally, or from the command line.</p>"},{"location":"dev/how-to-quick-start-guide/#clone","title":"Clone","text":"<p>Choose your preferred way to clone, either:</p>"},{"location":"dev/how-to-quick-start-guide/#on-windows","title":"On Windows:","text":"<p>If you are running Docker on Windows, please use the following git clone command:</p> <p><pre><code># replace my-user-id with your user id if you forked the repository, otherwise use openfoodfacts\ngit clone -c core.symlinks=true https://github.com/my-user-id/openfoodfacts-server.git\n</code></pre> or (if you want to use ssh) <pre><code># replace my-user-id with your user id if you forked the repository, otherwise use openfoodfacts\ngit clone -c core.symlinks=true git@github.com:my-user-id/openfoodfacts-server.git\n</code></pre></p>"},{"location":"dev/how-to-quick-start-guide/#on-other-systems","title":"On other systems:","text":"<pre><code># replace my-user-id with your user id if you forked the repository, otherwise use openfoodfacts\ngit clone git@github.com:my-user-id/openfoodfacts-server.git\n</code></pre> <p>or</p> <pre><code># replace my-user-id with your user id if you forked the repository, otherwise use openfoodfacts\ngit clone https://github.com/my-user-id/openfoodfacts-server.git\n</code></pre> <p>Go to the cloned directory:</p> <pre><code>cd openfoodfacts-server/\n</code></pre>"},{"location":"dev/how-to-quick-start-guide/#shallow-clone","title":"Shallow Clone","text":"<p>A full clone of the <code>openfoodfacts-server</code> repository can consume a significant amount of your PC's resources. It will download over 2 GiB of data and take up over 3 GiB of drive space.</p> <pre><code>git clone --single-branch --depth=1 https://github.com/openfoodfacts/openfoodfacts-server.git\n</code></pre> <p>To save your PC's resources, consider using a shallow clone by only cloning the <code>main</code> branch combined with a shallow fetch. This reduces the downloaded data to approximately 333 MiB and the repo will only use around 350 MiB of drive space.</p> <p>You will still be able to contribute PRs based on the <code>main</code> branch. However, you will not be able to view the full Git version history of any files, and you need to use an additional branch from GitHub, e.g., <code>gh-pages</code>, you can do it like this:</p> <pre><code>git remote set-branches --add origin gh-pages\ngit fetch --depth=1 origin gh-pages:gh-pages\ngit checkout gh-pages\n</code></pre> <p>Note: you can skip this step for the first setup since the default <code>.env</code> in the repo contains all the default values required to get started.</p> <p>Before running the <code>docker compose</code> deployment, you can review and configure Product Opener's environment (<code>.env</code> file).</p> <p>The <code>.env</code> file contains ProductOpener default settings:</p> Field Description <code>PRODUCT_OPENER_DOMAIN</code> Can be set to different values based on which OFF flavor is run. <code>PRODUCT_OPENER_PORT</code> can be modified to run NGINX on a different port. Useful when running multiple OFF flavors on different ports on the same host.  Default port: <code>80</code>. <code>PRODUCT_OPENER_FLAVOR</code> Can be modified to run different flavors of OpenFoodFacts, amongst <code>openfoodfacts</code> (default), <code>openbeautyfacts</code>, <code>openpetfoodfacts</code>, <code>openproductsfacts</code>. <code>PRODUCT_OPENER_FLAVOR_SHORT</code> can be modified to run different flavors of OpenFoodFacts, amongst <code>off</code> (default), <code>obf</code>, <code>oppf</code>, <code>opf</code>. <code>PRODUCERS_PLATFORM</code> can be set to <code>1</code> to build / run the producer platform. <code>ROBOTOFF_URL</code> can be set to connect with a Robotoff instance. <code>QUERY_URL</code> can be set to connect with a Query instance. <code>REDIS_URL</code> can be set to connect with a Redis instance for populating the search index. <code>GOOGLE_CLOUD_VISION_API_KEY</code> can be set to enable OCR using Google Cloud Vision. <code>CROWDIN_PROJECT_IDENTIFIER</code> and <code>CROWDIN_PROJECT_KEY</code> can be set to run translations. <code>GEOLITE2_PATH</code>, <code>GEOLITE2_ACCOUNT_ID</code> and <code>GEOLITE2_LICENSE_KEY</code> can be set to enable Geolite2. <code>TAG</code> Is set to <code>latest</code> by default, but you can specify any Docker Hub tag for the <code>frontend</code> / <code>backend</code>images.  Note that this is useful only if you use pre-built images from the Docker Hub (<code>docker/prod.yml</code> override); the default dev setup (<code>docker/dev.yml</code>) builds images locally <p>The <code>.env</code> file also contains some useful Docker Compose variables:</p> <ul> <li><code>COMPOSE_PROJECT_NAME</code> is the compose project name that sets the prefix to every container name. Do not update this unless you know what you're doing.</li> <li><code>COMPOSE_FILE</code> is the <code>;</code>-separated list of Docker compose files that are included in the deployment:<ul> <li>For a development-like environment, set it to <code>docker-compose.yml;docker/dev.yml</code> (default)</li> <li>For a production-like environment, set it to <code>docker-compose.yml;docker/prod.yml;docker/mongodb.yml</code></li> <li>For more features, you can add:<ul> <li><code>docker/admin-uis.yml</code>: add the Admin UIS container</li> <li><code>docker/geolite2.yml</code>: add the Geolite2 container</li> <li><code>docker/perldb.yml</code>: add the Perl debugger container</li> </ul> </li> </ul> </li> <li><code>COMPOSE_SEPARATOR</code> is the separator used for <code>COMPOSE_FILE</code>.</li> </ul> <p>Note: Instead of modifying <code>.env</code> (and risk committing it inadvertently), you can also set needed variables in your shell; they will override <code>.env</code> values. Consider creating a <code>.envrc</code> file that you source each time you need to work on the project. On linux and macOS, you can automatically do it if you use direnv.</p>"},{"location":"dev/how-to-quick-start-guide/#3-build-your-dev-environment","title":"3. Build your dev environment","text":"<p>From the repository root, run:</p> <pre><code>make dev\n</code></pre> <p>Note:</p> <p>If you are using Windows, you may encounter issues regarding this command. Take a look at the Troubleshooting section further in this tutorial.</p> <p>Note:</p> <p>If docker complains about <pre><code>ERROR: could not find an available, non-overlapping IPv4 address pool among the defaults to assign to the network\n</code></pre> It can be solved by adding <code>{\"base\": \"172.80.0.0/16\",\"size\": 24}, {\"base\": \"172.90.0.0/16\",\"size\": 24}</code> to <code>default-address-pools</code> in <code>/etc/docker/daemon.json</code> and then restarting the docker daemon. Credits to https://theorangeone.net/posts/increase-docker-ip-space/ for this solution.</p> <p>The command will run 2 subcommands:</p> <ul> <li><code>make up</code>: Build and run containers from the local directory and bind local code files, so that you do not have to rebuild everytime.</li> <li><code>make import_sample_data</code>: Load sample data into <code>mongodb</code> container (~100 products).</li> </ul> <p>Notes:</p> <ul> <li>The first build can take between 10 and 30 minutes depending on your machine and internet connection (broadband connection heavily recommended, as this will download Docker base images, install Debian and Perl modules in preparation of the final container image).</li> </ul> <ul> <li>You might not immediately see the test products: create an account, login, and they should appear.</li> </ul> <ul> <li>For a full description of available make targets, see Docker / Makefile commands</li> </ul> <p>Hosts file:</p> <p>Since the default <code>PRODUCT_OPENER_DOMAIN</code> in the <code>.env</code> file is set to <code>openfoodfacts.localhost</code>, add the following to your hosts file (Windows: <code>C:\\Windows\\System32\\drivers\\etc\\hosts</code>; Linux/MacOSX: <code>/etc/hosts</code>):</p> <pre><code>127.0.0.1 world.openfoodfacts.localhost fr.openfoodfacts.localhost static.openfoodfacts.localhost ssl-api.openfoodfacts.localhost fr-en.openfoodfacts.localhost\n</code></pre> <p>You're done! Check <code>http://openfoodfacts.localhost/</code>.</p>"},{"location":"dev/how-to-quick-start-guide/#going-further","title":"Going further","text":"<p>To learn more about developing with Docker, see the Docker developer's guide.</p> <p>To have all site pages on your dev instance, see Using pages from openfoodfacts-web</p> <p>Using Repl offers you a way to play with perl.</p> <p>Specific notes are provided on applying AGRIBALYSE updates to support the Ecoscore calculation.</p>"},{"location":"dev/how-to-quick-start-guide/#visual-studio-code","title":"Visual Studio Code","text":"<p>WARNING: Devcontainer support is currently experimental. It's recommended to run the normal docker commands before, and stop the containers: <code>make dev down</code>. Note that <code>make dev</code>, <code>make test</code>, and so on may currently conflict with the devcontainer.</p> <p>This repository comes with a configuration for Visual Studio Code (VS Code) development containers (devcontainer). This enables some Perl support in VS Code without the need to install the correct Perl version and modules on your local machine.</p> <p>To use the devcontainer, install prerequisites, clone the repository from GitHub, and (optionally) review Product Opener's environment. Additionally, install Visual Studio Code. VS Code will automatically recommend some extensions, but if you don't want to install all of them, please do install Remote - Containers manually. You can then use the extension command Remote-Containers: Reopen Folder in Container, which will automatically build the container and start the services. No need to use <code>make</code>!</p>"},{"location":"dev/how-to-quick-start-guide/#troubleshooting","title":"Troubleshooting","text":""},{"location":"dev/how-to-quick-start-guide/#make-dev-error-make-command-not-found","title":"make dev error: make: command not found","text":"<p>When running <code>make dev</code>:</p> <pre><code>bash: make: command not found\n</code></pre> <p>Solution (if using Windows): Click the Windows button, then type \u201cenvironment properties\u201d into the search bar and hit Enter. Click Environment Variables, then under System variables choose Path and click Edit. Click New and insert C:\\Program Files (x86)\\GnuWin32\\bin, then save the changes. Open a new terminal and test that the command works. (See Make Windows for more.)</p> <p>Solution (if using a Linux distro): Check that your bash PATH setting is correct. If it is, your Linux distro doesn't include <code>make</code> by default. For Debian (which I had that problem with --Pau Amma), use</p> <pre><code>sudo apt-get install make\n</code></pre> <p>For other distros, consult your distro's documentation or support resources for the command to use.</p>"},{"location":"dev/how-to-quick-start-guide/#make-dev-error-build_lang-error-2-could-not-load-taxonomy-mntpodatataxonomiestracesresultjson","title":"make dev error: [build_lang] Error 2 - Could not load taxonomy: /mnt/podata/taxonomies/traces.result.json","text":"<p>When running <code>make dev</code>:</p> <pre><code>&lt;h1&gt;Software error:&lt;/h1&gt;\n&lt;pre&gt;Could not load taxonomy: /mnt/podata/taxonomies/traces.result.json at /opt/product-opener/lib/ProductOpener/Tags.pm line 1976.\nCompilation failed in require at /opt/product-opener/scripts/build_lang.pl line 31, &amp;lt;DATA&amp;gt; line 2104.\nBEGIN failed--compilation aborted at /opt/product-opener/scripts/build_lang.pl line 31, &amp;lt;DATA&amp;gt; line 2104.\n&lt;/pre&gt;\n&lt;p&gt;\nFor help, please send mail to this site's webmaster, giving this error message\nand the time and date of the error.\n&lt;/p&gt;\n[Tue Apr  5 19:36:40 2022] build_lang.pl: Could not load taxonomy: /mnt/podata/taxonomies/traces.result.json at /opt/product-opener/lib/ProductOpener/Tags.pm line 1976.\n[Tue Apr  5 19:36:40 2022] build_lang.pl: Compilation failed in require at /opt/product-opener/scripts/build_lang.pl line 31, &lt;DATA&gt; line 2104.\n[Tue Apr  5 19:36:40 2022] build_lang.pl: BEGIN failed--compilation aborted at /opt/product-opener/scripts/build_lang.pl line 31, &lt;DATA&gt; line 2104.\nmake: *** [build_lang] Error 2\n</code></pre> <p>Solution: Project needs Symlinks to be enabled. traces.result.json is a symlink to allergens.result.json</p> <p>You have to enable the 'Developer Mode' in order to use the symlinks. To enable Developer Mode:</p> <ul> <li>on windows 10: Settings &gt; Update &amp; Security &gt; 'For developers' \u2026</li> <li>on windows 11: Settings &gt; Privacy &amp; Security &gt; 'For developers' \u2026</li> </ul> <p>and turn on the toggle for Developer Mode.</p> <p>On Windows systems, the git repository needs to be cloned with symlinks enabled.</p> <p>You need to remove the directory where you cloned the project, and clone the project again, using the right options:</p> <pre><code># replace my-user-id with your user id if you forked the repository, otherwise use openfoodfacts\ngit clone -c core.symlinks=true git@github.com:my-user-id/openfoodfacts-server.git\n</code></pre>"},{"location":"dev/how-to-quick-start-guide/#make-dev-error-open-dockerbuildxcurrent-permission-denied","title":"make dev error: open /.docker/buildx/current: permission denied","text":"<p>On macOS When running <code>make dev</code>: <pre><code>docker compose --env-file=.env  build   2&gt;&amp;1\nopen /.docker/buildx/current: permission denied\nmake: *** [build] Error 1\nopenfoodfacts-server %\n</code></pre></p> <p>Solution: Check for permissions by <pre><code>ls -la /.docker/buildx\n</code></pre> If there is a file that is not owned by user with root instead of USER: <pre><code>-rw-------   1 root    staff   48 Apr 28 17:04 current\n</code></pre> Then Run <pre><code>sudo chown -R USER:USER /Users/USER/.docker/buildx\n</code></pre> Replacing USER with current user</p>"},{"location":"dev/how-to-quick-start-guide/#rm-is-not-recognized-as-an-internal-or-external-command","title":"'rm' is not recognized as an internal or external command","text":"<p>When running <code>make import_prod_data</code> or some other commands.</p> <p>Solution:</p> <p>Use the Git Bash shell to run the make commands in windows so that programs like nproc and rm are found.</p>"},{"location":"dev/how-to-quick-start-guide/#system-cannot-find-wget","title":"System cannot find wget","text":"<p>When running <code>make import_prod_data</code>.</p> <pre><code>process_begin: CreateProcess(NULL, wget --no-verbose https://static.openfoodfacts.org/data/openfoodfacts-mongodbdump.gz, ...) failed.\nmake (e=2): The system cannot find the file specified.\n</code></pre> <p>You need to install wget for windows. The referenced version is able to use the Windows Certificate Store, whereas the standard gnuwin32 version will give errors about not being able to verify the server certificate.</p>"},{"location":"dev/how-to-quick-start-guide/#make-makefile154-import_sample_data-error-22","title":"make: *** [Makefile:154: import_sample_data] Error 22","text":"<p>When running <code>make import_sample_data</code></p> <pre><code>&lt;hl&gt;Software error:&lt;/h1&gt;\n&lt;pre&gt;MongoDB: :SelectionError: No writable server available. MongoDB server status:\nTopology type: Single; Member status:\nmongodb:27017 (type: Unknown, error: MongoDB::NetworkError: Could not connect to 'mongodb:27017': Temporary failure in name resolution )\n&lt;/pre&gt;\n&lt;p&gt;\nFor help, please send mail to this site's webmaster, giving this error message\nand the time and date of the error.\n&lt;p&gt;\n[Sat Dec 17 19:52:21 2022] update_all_products from_dir_in_mongodb.pl: MongoDB::SelectionError: No writable server available. MongoDB server status:\n\n[Sat Dec 17 19:52:21 2022] update_all_products from_dir_in_mongodb.pl: Topology type: Single; Member status:\n\n[Sat Dec 17 19:52:21 2022] update_all_products from_dir_in_mongodb.pl: mongodb:27017 (type: Unknown, error: MongoDB::NetworkError: Could not connect to 'mongodb:27017': Temporary failure in name resolution )\n\nmake: *** [Makefile:154: import_sample data] Error 22\n</code></pre> <p>Solution: The cause of this issue is that you already have the mongodb database server running on your local machine at port 27017.</p> <p>For Linux users:</p> <p>First stop the MongoDB server from your OS <pre><code>sudo systemctl stop mongod\n</code></pre></p> <p>Then check that mongod is stopped with: <pre><code>systemctl status mongod | grep Active\n</code></pre></p> <p>Note: The output of this command should be:   <code>Active: inactive (dead)</code></p> <p>Then, execute this: <pre><code>docker compose up\n</code></pre></p> <p>Note: To know more about docker compose commands do read this guide</p>"},{"location":"dev/how-to-quick-start-guide/#make-dev-error-build_lang-error-13-cant-write-into-mntpodatadatalangopenfoodfactslocalhoststo","title":"make dev error: [build_lang] Error 13 - can't write into /mnt/podata/data/Lang.openfoodfacts.localhost.sto","text":"<p>When running <code>make dev</code>:</p> <pre><code>&lt;h1&gt;Software error:&lt;/h1&gt;\n&lt;pre&gt;can't write into /mnt/podata/data/Lang.openfoodfacts.localhost.sto: Permission denied at /opt/product-opener/lib/ProductOpener/Store.pm line 234.\n&lt;/pre&gt;\n&lt;p&gt;\nFor help, please send mail to this site's webmaster, giving this error message\nand the time and date of the error.\n\n&lt;/p&gt;\nmake: *** [Makefile:126: build_lang] Error 13\n</code></pre> <p>Solution:</p> <p>Use the powershell/cmd to run the make dev commands in windows.</p>"},{"location":"dev/how-to-quick-start-guide/#make-dev-error-build-error-1-failed-to-solve-process-binsh-c-usermod-uid-user_uid-www-data-groupmod-gid-user_gid-www-data-did-not-complete-successfully-exit-code-4","title":"make dev error: [build] Error 1 - failed to solve: process \"/bin/sh -c usermod --uid $USER_UID www-data &amp;&amp; groupmod --gid $USER_GID www-data\" did not complete successfully: exit code: 4","text":"<p>On WSL(for root user) When using <code>make dev</code>:</p> <pre><code>&lt;p&gt;\n------\n &gt; [backend modperl 5/5] RUN usermod --uid 0 www-data &amp;&amp;     groupmod --gid 1000 www-data:\n0.492 usermod: UID '0' already exists\n------\nfailed to solve: process \"/bin/sh -c usermod --uid $USER_UID www-data &amp;&amp;     groupmod --gid $USER_GID www-data\" did not complete successfully: exit code: 4\n&lt;/p&gt;\nmake: *** [Makefile:147: build] Error 1\n</code></pre> <p>Solution:</p> <p>Reason for the error:  \"usermod: UID '0' already exists\" means that the user is being assigned UID 0, which is already used by the root user.</p> <p>To solve it create an environment variable(USER_UID=1000) inside .envrc using direnv. Steps to do that:</p> <p>Install direnv <pre><code>sudo apt install direnv\n</code></pre></p> <p>Enable direnv for Your Shell <pre><code>echo 'eval \"$(direnv hook bash)\"' &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n</code></pre></p> <p>Create a .envrc File in Your Project <pre><code>echo 'USER_UID=1000' &gt; .envrc\n</code></pre></p> <p>Finally, run this to allow .envrc: <pre><code>direnv allow\n</code></pre></p>"},{"location":"dev/how-to-quick-start-guide/#make-dev-error-permission-denied-while-trying-to-connect-to-the-docker-daemon-socket-at-unixvarrundockersock-head-http2fvar2frun2fdockersock_ping-dial-unix-varrundockersock-connect-permission-denied-make-makefile147-build-erreur-1","title":"make dev error: permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Head \"http://%2Fvar%2Frun%2Fdocker.sock/_ping\": dial unix /var/run/docker.sock: connect: permission denied make: *** [Makefile:147 : build] Erreur 1","text":"<p>Solution:</p> <p>Add the user to docker group : <pre><code>sudo usermod -aG docker $USER\n</code></pre></p>"},{"location":"dev/how-to-release/","title":"How to deploy a release","text":""},{"location":"dev/how-to-release/#staging-environment","title":"Staging environment","text":"<p>This is automatically done by the CI of github, see <code>.github/workflows/container-build.yml</code>.</p> <p>The deployment uses docker compose with specific environments variables and the <code>docker/prod.yml</code> overlay.</p> <p>As soon as you merge a pull request in the <code>main</code> branch, the action is triggered. You can see it at https://github.com/openfoodfacts/openfoodfacts-server/actions/workflows/container-build.yml</p>"},{"location":"dev/how-to-release/#production-environment","title":"Production environment","text":"<p>Product Opener is deployed on a container in Proxmox. The container is a debian server, it must follow the <code>backend</code> container version.</p> <p>In the command lines, I use $SERVICE and $VERSION variables, corresponding to the service short name (off, off-pro, obf, opf, opff) and the version tag (including the letter \"v\", e.g. \"v2.55.0\")</p> <p>To deploy you need to execute the following steps:</p> <ol> <li>merge the Release Please pull request.    This will create a new release / version tag on github</li> <li>verify there is no unreleased code on the server:    <pre><code>sudo -u off bash\ncd /srv/$SERVICE\ngit status\n</code></pre></li> <li>update the code:    <pre><code>sudo -u off bash\ncd /srv/$SERVICE\ngit fetch\ngit checkout $VERSION\n</code></pre></li> <li>verify every needed symlink is in place    <pre><code>sudo /srv/$SERVICE/scripts/deploy/verify-deployment.sh $SERVICE\n</code></pre></li> <li>rebuild taxonomies and lang    <pre><code>sudo -u off bash\ncd /srv/$SERVICE\nsource env/setenv.sh $SERVICE\n./scripts/taxonomies/build_tags_taxonomy.pl\n./scripts/build_lang.pl\n</code></pre></li> <li>on the PRO platform, also rebuild the fields columns names    <pre><code>sudo -u off bash\ncd /srv/$SERVICE\nsource env/setenv.sh $SERVICE\n./scripts/build_pro_platform_fields_columns_names.pl\n</code></pre></li> <li>update the frontend assets you just downloaded    <pre><code>sudo -u off /srv/$SERVICE/scripts/deploy/install-dist-files.sh $VERSION $SERVICE\n</code></pre></li> <li>restart services    <pre><code>sudo systemctl daemon-reload\nsudo systemctl restart nginx\nsudo systemctl stop apache2 cloud_vision_ocr@$SERVICE.service minion@$SERVICE.service; \\\nsudo systemctl start apache2 cloud_vision_ocr@$SERVICE.service minion@$SERVICE.service\n# On off\nsudo systemctl stop apache2@priority; sudo systemctl start apache2@priority\n</code></pre></li> </ol>"},{"location":"dev/how-to-update-agribalyse-ecoscore/","title":"How to update Agribalyse (Ecoscore)","text":"<p>Open Food Facts calculates the Ecoscore of a product from the Categories taxonomy where this has been linked to an AGRIBALYSE food code or proxy.</p> <p>New versions of the AGRIBALYSE database are released from time to time and this document explains how to apply updates. The high-level steps are as follows:</p>"},{"location":"dev/how-to-update-agribalyse-ecoscore/#obtain-and-convert-the-agribalyse-spreadsheet","title":"Obtain and Convert the AGRIBALYSE Spreadsheet","text":"<p>Download the AGRIBALYSE food spreadsheet from the AGRIBALYSE web site (use the French site rather than English as updates on the English site may be delayed), and save it as AGRIBALYSE_vf.xlsm\" in the ecoscore/agribalyse folder.</p> <p>In a backend shell run the ssconvert.sh script. This will re-generate the CSV files, including the AGRIBALYSE_version and AGRIBALYSE_summary files. The AGRIBALYSE_summary file is sorted to make for easier comparison with the previous version.</p> <p>The Ecoscore calculation just uses the data from the \"Detail etape\" tab, which is converted to AGRIBALYSE_vf.csv.2 by ssconvert. The Ecoscore.pm module skips the first three lines of this file to ignore headers. This should be checked for each update as the number of header lines has previously changed. Also check that none of the column headings have changed.</p>"},{"location":"dev/how-to-update-agribalyse-ecoscore/#review-and-fix-any-changed-categories","title":"Review and fix any changed Categories","text":"<p>Review the changes to AGRIBALYSE_summary to determine if any codes have been removed or significantly edited and update the Categories taxonomy accordingly.</p> <p>Once the Categories have been updated you will need to build the taxonomies. You can then update unit test results with the update_tests_results.sh script to see if any have been affected.</p> <p>It is also worth checking the impact the update has had on the main product database. This can be downloaded locally and the differences determined by running the update_all_products script.</p> <p>The previous values of the Ecoscore are stored in the previous_data section under ecoscore_data. Before applying an update you will need to delete this section with the following MongoDB script:</p> <pre><code>db.products.update({}, { $unset: { \"ecoscore_data.previous_data\": 0 } });\n</code></pre> <p>You can then use the following script from a backend bash shell to update products:</p> <pre><code>./update_all_products.pl --fields categories --compute-ecoscore\n</code></pre> <p>The process will set the <code>en:ecoscore_grade_changed</code> and <code>en:ecoscore_changed</code> misc_tags, which can be queried to analyse the results. For example, the following script generates a CSV file that summaries all the categories where the grade has changed:</p> <pre><code>var results = db.products\n  .aggregate([\n    {\n      $match: {\n        misc_tags: \"en:ecoscore-grade-changed\",\n      },\n    },\n    {\n      $group: {\n        _id: {\n          en: \"$ecoscore_data.agribalyse.name_en\",\n          fr: \"$ecoscore_data.agribalyse.name_fr\",\n          code_before: \"$ecoscore_data.previous_data.agribalyse.code\",\n          code_after: \"$ecoscore_data.agribalyse.code\",\n          before: \"$ecoscore_data.previous_data.grade\",\n          after: \"$ecoscore_data.grade\",\n        },\n        count: { $sum: 1 },\n      },\n    },\n  ])\n  .toArray();\nprint(\"en.Name,fr.Name,Code Before,Code After,Grade Before,Grade After,Count\");\nresults.forEach((result) =&gt; {\n  // eslint-disable-next-line no-underscore-dangle\n  var id = result._id;\n  print(\n    '\"' +\n      (id.en || \"\").replace(/\"/g, '\"\"') +\n      '\",\"' +\n      (id.fr || \"\").replace(/\"/g, '\"\"') +\n      '\",' +\n      id.code_before +\n      \",\" +\n      id.code_after +\n      \",\" +\n      id.before +\n      \",\" +\n      id.after +\n      \",\" +\n      result.count\n  );\n});\n</code></pre> <p>The following script fetches the specific products that have changed:</p> <pre><code>var products = db.products\n  .find(\n    {\n      misc_tags: \"en:ecoscore-grade-changed\",\n    },\n    {\n      _id: 1,\n      \"ecoscore_data.agribalyse.name_en\": 1,\n      \"ecoscore_data.agribalyse.name_fr\": 1,\n      \"ecoscore_data_main.agribalyse.code\": 1,\n      \"ecoscore_data.previous_data.agribalyse.code\": 1,\n      \"ecoscore_data.agribalyse.code\": 1,\n      \"ecoscore_data_main.grade\": 1,\n      \"ecoscore_data.previous_data.grade\": 1,\n      \"ecoscore_data.grade\": 1,\n      \"ecoscore_data_main.score\": 1,\n      \"ecoscore_data.previous_data.score\": 1,\n      \"ecoscore_data.score\": 1,\n      \"ecoscore_data_main.agribalyse.ef_total\": 1,\n      \"ecoscore_data.previous_data.agribalyse.ef_total\": 1,\n      \"ecoscore_data.agribalyse.ef_total\": 1,\n      categories_tags: 1,\n    }\n  )\n  .toArray();\n\nprint(\n  \"_id,en.Name,fr.Name,Code Before Main,Code Before Change,Code After,Grade Before Main,Grade Before Change,Grade After,Score Before Main,Score Before Change,Score After,ef_total Before Main,ef_total Before Change,ef_total After,Categories Tags\"\n);\nproducts.forEach((result) =&gt; {\n  var ecoscore_data_main = result.ecoscore_data_main || {};\n  var ecoscore_data_main_agribalyse = ecoscore_data_main.agribalyse || {};\n  // eslint-disable-next-line no-underscore-dangle\n  print(\n    result._id +\n      ',\"' +\n      (result.ecoscore_data.agribalyse.name_en || \"\").replace(/\"/g, '\"\"') +\n      '\",\"' +\n      (result.ecoscore_data.agribalyse.name_fr || \"\").replace(/\"/g, '\"\"') +\n      '\",' +\n      ecoscore_data_main_agribalyse.code +\n      \",\" +\n      result.ecoscore_data.previous_data.agribalyse.code +\n      \",\" +\n      result.ecoscore_data.agribalyse.code +\n      \",\" +\n      ecoscore_data_main.grade +\n      \",\" +\n      result.ecoscore_data.previous_data.grade +\n      \",\" +\n      result.ecoscore_data.grade +\n      \",\" +\n      ecoscore_data_main.score +\n      \",\" +\n      result.ecoscore_data.previous_data.score +\n      \",\" +\n      result.ecoscore_data.score +\n      \",\" +\n      ecoscore_data_main_agribalyse.ef_total +\n      \",\" +\n      result.ecoscore_data.previous_data.agribalyse.ef_total +\n      \",\" +\n      result.ecoscore_data.agribalyse.ef_total +\n      ',\"' +\n      result.categories_tags.join(\" \") +\n      '\"'\n  );\n});\n</code></pre>"},{"location":"dev/how-to-update-agribalyse-ecoscore/#link-existing-categories-to-new-agribalyse-codes","title":"Link existing Categories to new AGRIBALYSE codes","text":"<p>If a new AGRIBALYSE category matches an existing OFF Category then the two can be linked by adding an <code>agribalyse_food_code:en</code> tag. If there is no precise match then add an <code>agribalyse_proxy_food_code:en</code> tag along with the <code>agribalyse_proxy_food_name:en</code> and <code>agribalyse_proxy_food_name:fr</code> tags.</p> <p>Re-run the <code>update_all_products</code> script after doing this to assess how many products now have an Ecoscore when they did not previously. Use the above scripts to analyse the MongoDB, the new categories will have previous values of <code>undefined</code>.</p>"},{"location":"dev/how-to-update-agribalyse-ecoscore/#add-new-categories-for-new-agribalyse-codes","title":"Add new Categories for new AGRIBALYSE codes","text":"<p>For any new categories, review the AGRIBALYSE category descriptions to ensure they are concise and unambiguous such that an OFF user is most likely to get a match on a type-ahead search. Give notice of the change on the taxonomies channel in Slack so that additional translations can be added for the new categories.</p> <p>It is not necessary to add a category for every single AGRIBALYSE entry. For example, AGRIBALYSE has over 80 codes for different mineral waters but these all have almost exactly the same environmental impact. In cases like this it is acceptable to pick a single representative AGRIBALYSE code as a proxy for the Category in general.</p> <p>It may be worth doing a final check to see how many category combinations still do not have a match in AGRIBALYSE:</p> <pre><code>var missing = db.products\n  .aggregate([\n    {\n      $match: {\n        \"ecoscore_data.grade\": null,\n      },\n    },\n    {\n      $group: {\n        _id: \"$categories_tags\",\n        count: { $sum: 1 },\n      },\n    },\n  ])\n  .toArray();\nprint(\"Category,Count\");\nmissing.forEach((result) =&gt; {\n  // eslint-disable-next-line no-underscore-dangle\n  var id = result._id;\n  print('\"' + (id.join(\",\") || \"\").replace(/\"/g, '\"\"') + '\",' + result.count);\n});\n</code></pre>"},{"location":"dev/how-to-use-automated-pr-actions/","title":"How to use automated pull request actions","text":"<p>We have a github actions workflow that tries to help with tedious tasks on pull requests (see <code>pr_actions.yml</code>).</p>"},{"location":"dev/how-to-use-automated-pr-actions/#important-if-you-are-on-a-pr-from-a-fork","title":"(IMPORTANT) If you are on a PR from a fork","text":"<p>The actions will try to commit changes to your PR as the openfoodfacts-bot user. For this to happen you must let maintainers commit to your PR (see github documentation).</p>"},{"location":"dev/how-to-use-automated-pr-actions/#linting","title":"Linting","text":"<p>We try to keep the same format for perl files and taxonomies.</p> <p>Enter <code>/lint</code> in a comment on the PR; the linting actions will be launched in the background.</p> <p>Of course you can also run <code>make lint</code> locally and commit changes. </p>"},{"location":"dev/how-to-use-automated-pr-actions/#updating-tests-results","title":"Updating tests results","text":"<p>If you make a change that affects the API\u00a0or HTML rendering, the tests may fail because they compare old stored results with the newly generated one and find a difference.</p> <p>Enter <code>/update_tests_results</code> in a comment to have the tests refresh their expectations.</p> <p>Be careful to check the changes after that, to make sure they are correct and you didn't introduce a bug.</p>"},{"location":"dev/how-to-use-automated-pr-actions/#troubleshooting","title":"Troubleshooting","text":"<p>Normally, after the action finishes, it commits to your PR and it restarts the checks.</p> <p>If that does not happen, you can see the result of actions in the actions tab, selecting the pr_actions workflow</p>"},{"location":"dev/how-to-use-direnv/","title":"How to use direnv","text":"<p>As a developer, it can be better not to think too much about setting the right env variables as you enter a project. <code>direnv</code> aims at providing a solution.</p> <p>As a quick guide as an openfoodfacts developer:</p> <ul> <li>install direnv on your system using the usual package manager</li> <li>for Mac users you need to know if you are in zsh, bash, or something else; since 10.15 (Catalina) zsh is set by default, but to be sure type in terminal:   <pre><code>echo $SHELL\n</code></pre></li> </ul> <ul> <li>you have to adapt the direnv line according to what you use -&gt; follow this official direnv doc.</li> <li>in your project directory add a file, where you override variables from <code>.env</code>   that you want to:</li> </ul> <pre><code>echo \"setting up docker compose env\"\nexport DOCKER_BUILDKIT=1\n# The next two lines do the same thing in different ways; choose one.\nexport USER_UID=${UID}\nexport USER_UID=$(id -g)\n</code></pre> <ul> <li>in your project directory, run <code>direnv allow .</code></li> <li>in a new shell:<ul> <li>go to the project directory</li> <li>direnv should trigger and load your variables</li> </ul> </li> </ul>"},{"location":"dev/how-to-use-gitpod/","title":"How to use Gitpod for Remote Development","text":"<p>If your computer performance restricts you from developing, you can use Gitpod.  Gitpod allows you to do the devs on an ephemeral environment. It is free up to 50 hours per month (https://www.gitpod.io/pricing).</p> <p>Gitpod provides a robust ready-to-code developer environment in the cloud eliminating the friction of setting up local environments and IDEs with Perl, Docker and plugins, making it possible for even new contributors to OpenFoodFacts Server to get started in minutes instead of hours!</p> <p>Note that while this how-to is tailored for Gitpod, using alternatives like GitHub Codespaces should be similar.</p> <p>For the most part, development on Gitpod is similar to developing locally as documented in the quickstart guide and docker-developer-guide; however accessing your dev-deployment of <code>openfoodfacts-server</code> requires an extra step.</p>"},{"location":"dev/how-to-use-gitpod/#connect-github-and-gitpod","title":"Connect GitHub and Gitpod","text":"<p>When you use Gitpod, you allow Gitpod to use your GitHub account.</p> <p>In GitHub, you can review (and revoke if you stop using Gitpod) the access granted to Gitpod: click on your avatar on top right of the screen, then, Settings. In the left panel, under Integrations, click on Applications, then, Authorized OAuth Apps.</p> <p>On the Gitpod side, you can also update what Gitpod is allowed to do with your GitHub account: click on your avatar on the top right of the screen, then, Settings. In the left panel, click on Integrations. The line for GitHub should be green. At the end of this line, click on the three dots, then Edit Permissions. '''If you want to create a pull request via Gitpod, you need to grant public_repo access.'''</p>"},{"location":"dev/how-to-use-gitpod/#get-started","title":"Get Started","text":"<p>Gitpod will automatically clone and open the repository for you in VSCode by default. It will also automatically build the project for you on opening and comes with Docker and other tools pre-installed making it one of the fastest ways to spin up an environment for <code>openfoodfacts-server</code>.</p> <p>Once the repository is open in Gitpod, other instructions in the quick-start guide can be generally followed.</p>"},{"location":"dev/how-to-use-gitpod/#accessing-your-development-instance-of-openfoodfacts-server","title":"Accessing your development instance of openfoodfacts-server","text":"<p>Since Gitpod runs your code in a remote machine, your dev-deployment spun up with <code>make dev</code> or <code>make up</code> is not accessible when you open the default http://openfoodfacts.localhost in your browser. This happens because the server running on the remote machine is not accessible on your local network interface.</p> <p>To overcome this, we can use a SSH tunnel that listens to your local port 80 and forwards traffic to port 80 of the remote machine. Gitpod makes it really simple to SSH into your dev environment by letting you copy the <code>ssh</code> command required to reach your remote environment. To start, follow the ssh instructions on Gitpod's official guide: SSH for workspaces as easy as copy/paste.  Once you have copied the ssh command and ensure it works as-is, add a <code>-L 80:localhost:80</code> to the command to make it look like: <code>ssh -L 80:localhost:80 'openfoodfac-openfoodfac-tok-openfoodfac-r9f61214h9vt.ssh.ws-c.gitpod.io'</code>.</p> <p>Once you execute the altered command in your terminal, you should be able to access Open Food Facts on http://openfoodfacts.localhost just as documented in the quickstart guide!</p> <p>Remark: you will need to trust the fingerprint at first connection. </p> <p>Remark: for some Linux distributions, port 80 is reserved. A workaround is to switch to port 8080: in gitpod, open the .env file and replace the line PRODUCT_OPENER_PORT=80 by PRODUCT_OPENER_PORT=8080, then replace -L 80:localhost:80 by -L 8080:localhost:8080. Rollback the changes on .env before making a pull request!</p> <p>Remark: on MacOS or Linux, when trying to bind, you might see a bind fail. Remember that any port below 1024 is reserved for the root user.</p> <ul> <li>The easiest fix is to add <code>sudo</code> just before the ssh command.</li> <li>Another way is to switch to port 8080: in gitpod, open the .env file (or better user direnv) and change PRODUCT_OPENER_PORT=80 by PRODUCT_OPENER_PORT=8080, then replace <code>-L 80:localhost:80</code> by <code>-L 8080:localhost:8080</code> in the ssh command and connect to world.openfoodfacts.localhost:8080. Rollback the changes on .env before making a pull request!</li> </ul> <p>Remark: the address to connect with ssh can change after a few days. If you get a <code>Connection closed by ... port 22</code> simply go back to https://gitpod.io/workspaces and copy the new address.  </p> <p>Remark: if you load the page after some changes but get a <code>502 Bad Gateway</code>, check again your code. Something may be wrong with it. Just in case, try commenting out the part you just coded to see if it works. </p> <p>Create an account to be able to edit products.</p>"},{"location":"dev/how-to-use-gitpod/#some-commands","title":"Some commands","text":"<p>After you made devs and want to apply changes and see them on the website, you can run: <pre><code>$ docker compose restart \n</code></pre> <pre><code>$ make up  \n</code></pre></p> <p>If you face some difficulties, you can always look at the logs (use ctrl + c, to quit): <pre><code>$ make log  \n</code></pre></p> <p><pre><code>$ make tail  \n</code></pre> After development, before opening a pull request, run the following command: <pre><code>$ make checks  \n</code></pre></p>"},{"location":"dev/how-to-use-pages-from-openfoodfacts-web/","title":"How to use pages from openfoodfacts-web","text":"<p>To avoid messing the product-opener repository with translations of web pages, we moved most pages in  openfoodfacts-web repository specifically in the lang/ directory.</p> <p>This repo only has a really minimal lang directory named lang-default.</p> <p>If you want to have all contents locally,  you should first clone openfoodfacts-web repo locally,  and then:</p> <ul> <li>if you are using docker,    you can set the <code>WEB_RESOURCES_PATH</code> env variable to a relative or absolute path   leading to openfoodfacts-web directory.</li> <li>else, make symlink <code>lang</code> point to openfoodfacts-web <code>lang</code> directory, and <code>html/off_web_html</code> point to openfoodfacts-web <code>html</code> directory.</li> </ul>"},{"location":"dev/how-to-use-repl/","title":"How to use Perl REPL (re.pl)","text":"<p>NOTE:  New to Perl? Check how to learn perl!</p> <p>On your local dev instance, the \"backend\" container comes with Devel::REPL installed.</p> <p>This is a handy package to try out perl expressions and learn.</p> <p>Thanks to <code>PERL5LIB</code> variable which is already configured, you can load any module of <code>ProductOpener</code> from within it.</p>"},{"location":"dev/how-to-use-repl/#launch-repl","title":"Launch Repl","text":"<p>Just run</p> <pre><code>docker compose run --rm backend re.pl\n</code></pre> <p>If you want to access external services (like mongodb), do not forget to start them.</p> <p>NOTE: If you get \"exec: re.pl: not found\", it means you may not have dev tools installed. Try going in your .env (or .envrc) file and add the line:</p> <p><pre><code>CPANMOPTS=--with-develop --with-feature=off_server_dev_tools\n</code></pre> then just make build and retry, you will then be able to run re.pl</p>"},{"location":"dev/how-to-use-repl/#testing-perl-code","title":"Testing perl code","text":"<p>It can be a handy way to get your hand into perl by testing some code patterns, or seeing how they react.</p> <p>For example one can test a regular expression:</p> <pre><code>$ my $text = \"Hello World\";\nHello World\n$ $text =~ /Hello (\\w+)/i\nWorld\n</code></pre>"},{"location":"dev/how-to-use-repl/#reading-a-sto","title":"Reading a sto","text":"<p>Another use case is reading a <code>.sto</code> file to see what it contains.</p> <p>Eg. for a user:</p> <pre><code>$ use ProductOpener::Store qw/:all/;\n$ my $product_ref = retrieve_object(\"/mnt/podata/products/007/107/917/0260/product\");\n</code></pre>"},{"location":"dev/how-to-use-vscode/","title":"How to use VSCode","text":"<p>VSCode (or better the open source version VSCodium) may be used to edit files.</p> <p>Here are some useful tricks.</p>"},{"location":"dev/how-to-use-vscode/#perlcritic","title":"Perlcritic","text":"<p>One way to have perlcritic work is the following:</p> <ul> <li>install the perlcritic extension</li> <li>add a <code>perlcritic.sh</code> at the root of your project with following content:   <pre><code>#!/usr/bin/env bash\n. .envrc &gt;/dev/null 2&gt;&amp;1\ndocker compose run --rm --no-deps backend perlcritic \"$@\" 2&gt;/dev/null\n</code></pre>   the second line is useful only if you use direnv</li> <li><code>chmod +x perlcritic.sh</code></li> <li>patch perlcritic by editing its files, following sfodje/perlcritic issue #26</li> <li>edit the perlcritic configuration in workspace to set the value (after adjusting the pathname for your own OFF setup):<ul> <li>Executable: <code>/path/to/your/own/OFF-server/perlcritic.sh</code></li> </ul> </li> </ul>"},{"location":"dev/how-to-use-vscode/#perl-language-server","title":"Perl Language Server","text":"<p>The extension Language Server and Debugger is harder to work with!</p> <p>Note: This setup does not work yet, but might be getting close. It is probably due to https://github.com/richterger/Perl-LanguageServer/issues/131.</p> <ul> <li>install the extension</li> <li>add a script <code>shell-into-appserver.sh</code> in the project:   <pre><code>#!/usr/bin/env bash\ndeclare -x PATH=$PATH:/usr/local/bin/\nsource .envrc\nCOMMAND=$(echo \"$@\" | sed 's/^.*perl /perl /')\n&gt;&amp;2 echo \"launching $COMMAND\"\ndocker compose run --rm --no-deps -T -p 127.0.0.  1:13603:13603 backend $COMMAND\n</code></pre>   Note: the second line is useful only if you use direnv</li> <li><code>chmod +x shell-into-appserver.sh</code></li> <li>Edit workspace settings to have those settings:   <pre><code>    \"perl\": {\n        \"enable\": true,\n        \"perlInc\": [\"/opt/product-opener/lib\", \"/opt/perl/local/lib/perl5\"],\n        \"ignoreDirs\": [\"/opt/perl/local/lib/perl5\", \".  vscode\"],\n        \"fileFilter\": [\".pm\", \".pl\", \".t\"],\n        \"sshAddr\": \"dummy\",\n        \"sshUser\": \"dummy\",\n        \"sshCmd\": \"./shell-into-appserver.sh\",\n        \"sshWorkspaceRoot\": \"/opt/product-opener\",\n        \"logLevel\": 2\n    },\n</code></pre></li> </ul>"},{"location":"dev/how-to-use-vscode/#remote-container","title":"Remote container ?","text":"<p>Note: at the moment we do not support the Remote Container extension. While we can consider using it, it has some drawbacks because not all the project is contained within the \"backend\" container. For example everything related to nodejs is in the \"frontend\" container. So it means making a quite complete Docker image on its own with all the tooling necessary.</p>"},{"location":"dev/how-to-write-and-run-tests/","title":"How to write and run tests","text":"<p>If you are a developer you are really encouraged to write tests as you fix bugs or develop new features.</p> <p>Having a test is also a good way to debug a particular piece of code.</p> <p>We would really love to see our test coverage grow.</p> <p>If you are new to tests, please read:</p> <ul> <li>introduction to test pyramids to understand importance of unit tests and integration tests</li> <li>perldoc on test</li> <li>Test::More module doc</li> </ul>"},{"location":"dev/how-to-write-and-run-tests/#unit-and-integration-tests","title":"Unit and Integration tests","text":"<p>Unit tests are located in <code>tests/unit/</code>.</p> <p>Integration tests are in <code>tests/integration/</code>.</p> <p>Most integration tests issue queries to an open food facts</p> <p>For some tests, we store expected results in form of HTML and JSON files (and some other formats like CSV). See below on how you can use this mechanism and how to regenerate those files in case your modification affect them (for example if you change the HTML of product pages).</p>"},{"location":"dev/how-to-write-and-run-tests/#integration-with-docker-compose","title":"Integration with docker compose","text":"<p>Using Makefile targets, tests are run</p> <ul> <li>with a specific `COMPOSE_PROJECT_NAME\u00b0 to avoid crashing your development data while running tests (as the project name changes container, network and volumes names)</li> <li>with a specific exposed port for Mongodb, to avoid clashes with the dev instance.</li> </ul>"},{"location":"dev/how-to-write-and-run-tests/#writing-tests","title":"Writing tests","text":"<p>You can read other tests to understand how we write them (get inspiration from recently created tests).</p> <p>One effective way is to create a list of tests each represented by a hashmap with inputs and expected outputs and run them in a loop. Add an <code>id</code> and/or a <code>desc</code> (description) and use it as last argument to check functions (like <code>ok</code>, <code>is</code>, \u2026) to easily see tests running and identify failing tests.</p>"},{"location":"dev/how-to-write-and-run-tests/#helpers","title":"Helpers","text":"<p>We have some helper functions for tests.</p> <p>See mainly:</p> <ul> <li>Test.pm (notably <code>init_expected_results</code> and <code>compare_to_expected_results</code>)</li> <li>APITest.pm</li> </ul> <p>and other modules with Test in their name!</p>"},{"location":"dev/how-to-write-and-run-tests/#using-json-files-to-save-expected-results-of-tests","title":"Using JSON files to save expected results of tests","text":"<p>If the output of the function you are testing is small (e.g. a function that returns one single value), the expected return value can be stored in the .t test file.</p> <p>If your outputs are complex and/or large (e.g. for unit tests of functions that return a complex structure, or for API integration tests that return a JSON response), you can use json files to store the expected result of each test.</p> <p>Test.pm contains helper functions to compare results to expected results and to update the expected results. For instance if your function returns a reference $results_ref to a complex object (like a product):</p> <p><code>compare_to_expected_results($results_ref, \"$expected_result_dir/$testid.json\", $update_expected_results);</code></p> <p>After writing the test, you need to use <code>init_expected_results</code> (see below) once to create a JSON file that contains the resulting object.</p> <p>Then the next time you run the test, the results will be compared to the stored expected results.</p> <p>You can also use <code>init_expected_results</code> to generate new expected results file and easily see what has changed using <code>git diff</code>. If the changes are expected, you can commit the new expected results.</p>"},{"location":"dev/how-to-write-and-run-tests/#running-tests","title":"Running tests","text":"<p>The best way to run all tests is to run:</p> <pre><code>make tests\n</code></pre> <p>To run a single test you can use:</p> <ul> <li>for a unit test:    <pre><code>make test-unit test=\"filename.t\"\n</code></pre></li> <li>for an integration test:    <pre><code>make test-int test=\"filename.t\"\n</code></pre></li> </ul>"},{"location":"dev/how-to-write-and-run-tests/#regenerating-tests-results","title":"Regenerating tests results","text":"<p>If you made a change that affects stored expected results, you can use:</p> <ul> <li>to regenerate all expected results:   <pre><code>make update_tests_results\n</code></pre></li> <li>or to generate expected results for a single test   (here for an integration test, <code>test-unit</code> otherwise)   <pre><code>make test-int test=\"filename.t :: --update-expected-results\"\n</code></pre>   (the <code>::</code> tell the yath test runner that following arguments are for the test, not for yath)</li> </ul> <p>If you regenerate test results, be sure to check carefully that the changes in your commit are expected.</p> <p>NOTE: When making changes to language files (.pot, .po), make sure to run <code>make build_lang_test</code> so that the language files are rebuild in the test environment, before regenerating expected results for integration tests.</p>"},{"location":"dev/how-to-write-and-run-tests/#github-action-helper","title":"Github action helper","text":"<p>You can trigger an update of tests results using a special comment on your PR. See How to use automated PR actions - updating tests-results</p>"},{"location":"dev/how-to-write-and-run-tests/#debugging-with-tests","title":"Debugging with tests","text":"<p>Starting a test is a very effective way to understand what's going on in the code using the debugger.</p> <p>This is done by running the test with <code>perl -d</code>. You can also use a \"TEST_CMD\" argument with the make target:</p> <pre><code>make test-unit test=\"my-test.t\" TEST_CMD=\"perl -d\"\n</code></pre> <p>Most often, you will have to use the next command \"n\" four times before landing in your test, where you can easily set a breakpoint with <code>b &lt;line-number&gt;</code>.</p> <p>Read perldoc about debugger to learn more.</p> <p>:pencil: Note: With this method, in integration tests that issue requests to the server, you won't be able to run the debugger inside the server code, only in the test.</p>"},{"location":"dev/how-to-write-and-run-tests/#some-known-errors","title":"Some known errors","text":""},{"location":"dev/how-to-write-and-run-tests/#test-stops-with-error-137","title":"test stops with Error 137","text":"<p>Sometimes you may get a test failing with no output but error 137. It may simply means that the backend container was stopped. Most of the time this is due to a fatal error that makes apache ends.</p> <p>Beware that you may also have a completely unrelated message when running with the debugger, mostly due to the fact that it is an abrupt kill of the process. For example it can be a misleading message from <code>SSLeay.pm</code> (because your test stop while waiting for the apache server to be ready)</p> <p>The right reflex is to look at last logs in logs/apache (<code>ls -ltr logs/apache</code>) and understand what is missing.</p> <p>It might be as simple as a  <code>make build_taxonomies_test</code> or <code>make build_lang_test</code> is needed (it is not run automatically for the single test targets)</p>"},{"location":"dev/ref-docker-commands/","title":"Reference Docker / Makefile commands","text":"<p>See also Docker best practice at Open Food Facts</p> <p>The docker/ directory contains <code>docker compose</code> overrides for running Product Opener on Docker. The main docker compose file <code>docker-compose.yml</code> is located in the root of the repository.</p> <p>The step-by-step guide to setup the Product Opener using Docker is available on dev environment quick start guide.</p>"},{"location":"dev/ref-docker-commands/#makefile-targets","title":"Makefile targets","text":"<p>Makefile targets are handy for beginners to start the project and for some usual tasks.</p> <p>It's better though, as you progress, if you understand how things work and be able to use targeted docker compose commands.</p> <p>See also targets to run tests</p> Command Description Notes <code>make dev</code> Setup a fresh dev environment. Run only once, then use the <code>up</code>, <code>down</code>, <code>restart</code> commands. <code>make build</code> build containers. Add <code>container=name</code> to build a specific container args=\"--progress log\" keeps all log in console (to debug failing build) <code>make up</code> Start containers. <code>make down</code> Stop containers and keep the volumes. Products and users data will be kept. <code>make hdown</code> Stop containers and delete the volumes (hard down). Products and users data will be lost ! <code>make restart</code> Restart <code>frontend</code> and <code>backend</code> containers. <code>make reset</code> Run <code>hdown</code> and <code>up</code>. <code>make status</code> Get containers status (up, down, fail). <code>make log</code> Get logs. Include only logs written to container's <code>stdout</code>. <code>make tail</code> Get other logs (<code>Apache</code>, <code>mod_perl</code>, ...) bound to the local <code>logs/</code> directory. <code>make prune</code> Save space by removing unused Docker artifacts. Next build will take time (no cache) ! <code>make prune_cache</code> Remove Docker build cache. Next build will take time (no build cache) ! <code>make clean</code> Clean up your dev environment: removes locally bound folders, run <code>hdown</code> and <code>prune</code>. Run <code>make dev</code> to recreate a fresh dev env afterwards. <code>make import_sample_data</code> Load sample data (~100 products) into the MongoDB database. <code>make import_prod_data</code> Load latest prod data (~2M products, 1.7GB) into the MongoDB database. Takes up to 10m. Not recommended for dev setups ! <code>make lint</code> Indent and reformat your code<sup>1</sup> <ol> <li> <p>If you are having permission issues with <code>make lint</code> try writing the following commands : <code>export MSYS_NO_PATHCONV=1 docker compose run --rm --no-deps -u root backend chown www-data:www-data -R /opt/product-opener/</code> then run again <code>make lint</code> and you should be good to go\u00a0\u21a9</p> </li> </ol>"},{"location":"dev/ref-perl-pod/","title":"Perl reference documentation","text":"<p>Do not write anything here, it is meant to be overwritten by html generated by perl pod.</p>"},{"location":"dev/ref-perl/","title":"Reference Perl code documentation","text":"<p>The documentation in Plain Old Format (aka POD) for perl module is compiled from in file documentation.</p> <p>See the Perl reference documentation</p>"},{"location":"events/","title":"Event Schemas","text":"<p>This folder contains the schema definitions for the Redis events that Product Opener generates.</p> <p>You can preview the schema in VSCode using the asyncapi-preview extension.</p> <p>A pre-build HTML version of the document can be found here</p>"}]}