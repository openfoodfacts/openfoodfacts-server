openapi: 3.0.1
info:
  title: Open Food Facts Open API
  description: |
    As a developer, the Open Food Facts API allows you to get information 
    and contribute to the products database. You can create great apps to 
    help people make better food choices and also provide data to enhance the database.
  termsOfService: 'https://openweathermap.org/terms'
  contact:
    name: Open Food Facts
    url: 'https://slack-ssl-openfoodfacts.herokuapp.com/'
    email: contact@openfoodfacts.org
  license:
    name: 'License (MIT, Apache 2.0, etc)'
    url: 'https://opendatacommons.org/licenses/odbl/summary/index.html'
  version: '2'
servers:
  - url: 'https://world.openfoodfacts.org'
    description: prod
  - description: dev
    url: 'https://off:off@world.openfoodfacts.net'
paths:
  '/api/v2/product/{barcode}':
    get:
      tags:
        - Read Requests
      summary: Get for a specific product by barcode
      parameters:
        - name: barcode
          in: path
          description: |
            The barcode of the product to be fetched
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: '3017620422003'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./schemas/product.yaml
      description: |
        A product can be fetched via its unique barcode.
        It returns all the details of that product response.
      operationId: get-product-by-barcode
  /cgi/product_image_upload.pl:
    post:
      tags:
        - Write Requests
      summary: Add a Photo to an Existing Product
      operationId: get-cgi-product_image_upload.pl
      description: |
        Photos are source and proof of data. 
        The first photo uploaded for a product is 
        auto-selected as the product’s “front” photo.'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./responses/add_photo_to_existing_product.yaml
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: ./requestBodies/add_photo_to_existing_product.yaml
            examples: {}
        description: ''
  /cgi/ingredients.pl:
    parameters: []
    get:
      summary: Performing OCR on a Product
      operationId: get-cgi-ingredients.pl
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./responses/ocr_on_product.yaml
      description: |
        Open Food Facts uses optical character recognition (OCR) to retrieve nutritional data and other information from the product labels.
      parameters:
        - schema:
            type: string
            example: ingredients_en
          in: query
          name: id
          required: true
        - schema:
            type: string
            example: '4251105501381'
          in: query
          name: code
          description: Barcode of the product
          required: true
        - schema:
            type: string
            example: '1'
          in: query
          name: process_image
          required: true
        - schema:
            type: string
            example: google_cloud_vision
          in: query
          name: ocr_engine
          description: Open Food Facts uses optical character recognition (OCR) to retrieve nutritional data and other information from the product labels.
          required: true
  /cgi/product_image_crop.pl:
    post:
      summary: Crop A Photo
      operationId: post-cgi-product_image_crop.pl
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: {}
      description: |
        Cropping is only relevant for editing existing products. You cannot crop an image the first time you upload it to the system.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: ./requestBodies/crop_a_photo.yaml
    get:
      summary: Rotate A Photo
      operationId: get-cgi-product_image_crop.pl
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./responses/rotate_a_photo.yaml
      description: |
        Although we recommend rotating photos manually and uploading a new version of the image, the OFF API allows you to make api calls to automate this process.
        You can rotate existing photos by setting the angle to 90º, 180º, or 270º clockwise.
      parameters:
        #TODO: Describe these parameters
        - schema:
            type: string
            example: '3266110700910'
          in: query
          name: code
          description: Barcode of the product
          required: true
        - schema:
            type: string
            example: nutrition_fr
          in: query
          name: id
          required: true
        - schema:
            type: string
            example: '1'
          in: query
          name: imgid
          required: true
        - schema:
            type: string
            example: '90'
          in: query
          name: angle
          required: true
  /cgi/product_jqm2.pl:
    post:
      summary: Add a New Product
      #TODO: Explain auth in openapi and extensively in gitbooks.
      operationId: post-cgi-product_jqm2.pl
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                #TODO: Explain the different response fields
                $ref: ./responses/add_new_product.yaml
      parameters: []
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              #TODO: Include all possible request body like comment, brand , label etc. Are they all required? 
              $ref: ./requestBodies/add_new_photo.yaml
components:
  schemas:
    Product:
      $ref: ./schemas/product.yaml
  parameters: {}
