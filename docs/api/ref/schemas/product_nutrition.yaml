type: object
title: product_nutrition
description: |
  Nutrition fields of a product

  Most of these properties are read-only.

  See [how to add nutrition data](https://openfoodfacts.github.io/openfoodfacts-server/api/ref-cheatsheet/#add-nutrition-facts-values-units-and-base)
properties:
  no_nutrition_data:
    type: string
    description: |
      When a product does not have nutrition data displayed on the
      packaging, the user can check the field "Nutrition facts are
      not specified on the product".
      By doing so, the no_nutrition_data field takes the value "on".
      This case is frequent (thousands of products).
    example: "on"
  nutrition_data_per:
    type: string
    enum:
      - serving
      - 100g
    description: |
      The nutrition data on the package can be per serving or per 100g.

      This is essential to understand if `<nutrient>_value` and `<nutrient>`
      values in `nutriments` applies for a serving or for 100g.

      **IMPORTANT:**
      When writing products,
      this setting applies to all existing nutrients values for the product,
      not only the nutrient values sent in the write request.
      So it should not be changed unless all nutrients values are provided
      with values that match the nutrition_data_per field.
  nutrition_data_prepared_per:
    type: string
    enum:
      - serving
      - 100g
    description: |
      The nutrition data for prepared product on the package (if any) can be per serving or per 100g.

      This is essential to understand if `<nutrient>_prepared_value` and `<nutrient>_prepared`
      values in `nutriments` applies for a serving or for 100g.

      See also important note on `nutrition_data_per`.
  nutriments:
    type: object
    description: |
      All known nutrients for the product.

      Note that each nutrients are declined with a variety of suffixes like `_100g`, `_serving`,
      see patternProperties below.

      A specific `_unit` is the unit of the value that was entered by the contributor (a user or the manufacturer).
      It is not necessarily the unit that is printed on the product, as some apps may force specific units when writing nutrient values.

      Beware that some properties are to be interpreted based upon `nutrition_data_per` value.

      For most use cases, you should use the `<nutrient>_100g` or `<nutrient>_serving` fields, as they are always in the same standard unit, for a specific quantity (100g or 1 serving).

      For products that have a nutrition table for prepared product
      (eg. the nutrition facts for a bowl of milk with cocoa powder),
      a `_prepared` suffix is added (before other suffixes).

      You can get all possible nutrients from the
      [nutrients taxonomy](https://static.openfoodfacts.org/data/taxonomies/nutrients.json)

      **FIXME** add more nutrients with description.
    properties:
      alcohol:
        description: |
          Quantity of alcohol

          (per 100g or per serving) in a standard unit (g or ml)
        type: number
      carbohydrates:
        description: This is the available carbohydrates (excluding fiber), also known as net carbohydrates
        type: number
      carbohydrates-total:
        description: This follows the US / Canada definition of carbohydrates which includes fiber, also known as gross carbohydrates
        type: number
      energy:
        type: number
        description: |
          It is the same as `energy-kj` if we have it, or computed from `energy-kcal` otherwise

          (per 100g or per serving) in kj
      energy_value:
        type: number
        description: |
          energy_value will be equal to energy-kj_value if we have it or to energy-kcal_value otherwise
      energy_unit:
        type: string
        enum: ["kcal", "kJ"]
        description: |
          Equal to energy-kj_unit if we have it or to energy-kcal_unit otherwise
      energy-kcal:
        type: number
        description: |
          energy in kcal, if it is specified

          (per 100g or per serving) in a standard unit (g or ml)
      energy-kj:
        type: number
        description: |
          energy in kj, if it is specified

          (per 100g or per serving) in a standard unit (g or ml)
      fat:
        type: number
      fruits-vegetables-legumes-estimate-from-ingredients:
        type: number
        description: |
          An estimate, from the ingredients list of the percentage of fruits, vegetable and legumes.
          This is an important information for Nutri-Score (2023 version) computation.
      fruits-vegetables-nuts-estimate-from-ingredients:
        type: number
        description: |
          An estimate, from the ingredients list of the percentage of fruits, vegetable and nuts.
          This is an important information for Nutri-Score (2021 version) computation.
      nova-group:
        type: integer
      nutrition-score-fr:
        description: |
          Experimental nutrition score derived from
          the UK FSA score and adapted for the French market
          (formula defined by the team of Professor Hercberg).
      proteins:
        type: number
      salt:
        type: number
      saturated-fat:
        type: number
      sodium:
        type: number
      sugars:
        type: number
      carbon-footprint-from-known-ingredients_product:
        type: integer
      carbon-footprint-from-known-ingredients_serving:
        type: number
      erythritol:
        type: number
        description: |
          erythritol is a polyol which is not providing any energy.
          As such, it needs not be taken into account when computing
          the energy of a product. Eryhtritol is now displayed on
          nutrition facts sheet of some products, mainly in the USA.
          This value is entered either by contributors, either by
          imports.
        example: 12.5
    patternProperties:
      '(?<nutrient>[\w-]+)_unit':
        description: |
          The unit of the value entered by the contributor (a user or the manufacturer), for the product as sold (not prepared).
          In most cases, this unit is the unit displayed on the product for the nutrient, but it is not guaranteed, as some apps may force specific units when writing nutrient values.          

          The possible values depends on the nutrient.

          * `g` for grams
          * `mg` for milligrams
          * `Œºg` for micrograms
          * `cl` for centiliters
          * `ml` for mililiters
          * `dv` for recommended daily intakes (aka [Dietary Reference Intake](https://en.wikipedia.org/wiki/Dietary_Reference_Intake))
          * `% vol` for alcohol vol per 100 ml

          ü§ì code: see the [Units module][units-module],
          and [Food:default_unit_for_nid function][default-unit]

          [units-module]: https://openfoodfacts.github.io/openfoodfacts-server/dev/ref-perl-pod/ProductOpener/Units.html
          [default-unit]: https://openfoodfacts.github.io/openfoodfacts-server/dev/ref-perl-pod/ProductOpener/Food.html#default_unit_for_nid_(_%24nid)

          **Note**: For most use cases, you should not use this unit, as it can change depending on how the value was entered.
          Instead use the `<nutrient>_100g` or `<nutrient>_serving` fields, and convert them to the unit you need.
        type: string
        enum:
          [
            "ÂÖ¨Êñ§",
            "ÂÖ¨Âçá",
            "kg",
            "–∫–≥",
            "l",
            "–ª",
            "ÊØ´ÂÖã",
            "mg",
            "–º–≥",
            "mcg",
            "¬µg",
            "oz",
            "fl oz",
            "dl",
            "–¥–ª",
            "cl",
            "–∫–ª",
            "Êñ§",
            "g",
            "",
            " ",
            "kJ",
            "ÂÖã",
            "ÂÖ¨ÂÖã",
            "–≥",
            "–º–ª",
            "ml",
            "mmol/l",
            "ÊØ´Âçá",
            "% vol",
            "ph",
            "%",
            "% dv",
            "% vol (alcohol)",
            "iu",
            "mol/l",
            "mval/l",
            "ppm",
            "ÔøΩrh",
            "ÔøΩfh",
            "ÔøΩe",
            "ÔøΩdh",
            "gpg",
          ]
      '(?<nutrient>[\w-]+)_100g':
        description: |
          The normalized value of the nutrient for 100g (or 100ml for liquids), in a standard unit, for the product as sold (not prepared):
          * g for all nutrients that are measured by weight (e.g. fat, proteins, carbohydrates, sodium, vitamins, minerals etc.)
          * % vol for nutrients that are percentages by volume (e.g. alcohol)
          * kJ for energy and energy-kj
          * kcal for energy-kcal
          * no unit for pH

          This is computed from the `nutrient` property,
          the serving size (if `nutrient` is per serving), and the `nutrient`_unit field.

          **Note**:
          For most use cases, this is the only value you should use, as it is always in the same unit, and always per 100g or 100ml.
        type: number
        readOnly: true
      '(?<nutrient>[\w-]+)_serving':
        description: |
          The normalized value of the nutrient for one serving, in a standard unit:
          - g for most nutrients
          - % for nutrients that are percentages (e.g. alcohol)
          - kJ for energy and energy-kj
          - kcal for energy-kcal

          This is computed from the `nutrient` property,
          the serving size (if `nutrient` is per 100g), and the `nutrient`_unit field.
        type: number
        readOnly: true
      '(?<nutrient>[\w-]+)_value':
        description: |
          The value entered by the contributor (a user or the manufacturer).
          In most cases, the unit of the value is the unit displayed on the product for the nutrient, but it is not guaranteed, as some apps may force specific units when writing nutrient values.          

          * per 100g or serving, depending on `nutrition_data_per` field.
          * in the unit of the corresponding <nutrient>_unit field.

          **Note**: For most use cases, you should not use this value, as it can be in different units, and can be per 100g or per serving.
        type: number
        readOnly: true
      '(?<nutrient>[\w-]+)_prepared':
        description: |
          Same as '(?<nutrient>[\w-]+)', for the prepared product (not as sold).
        type: number
      '(?<nutrient>[\w-]+)_prepared_unit':
        description: |
          Same as '(?<nutrient>[\w-]+)_unit', for the prepared product (not as sold).
        type: string
      '(?<nutrient>[\w-]+)_prepared_100g':
        description: |
          Same as '(?<nutrient>[\w-]+)_100g', for the prepared product (not as sold).
        type: number
        readOnly: true
      '(?<nutrient>[\w-]+)_prepared_serving':
        description: |
          Same as '(?<nutrient>[\w-]+)_serving', for the prepared product (not as sold).
        type: number
        readOnly: true
      '(?<nutrient>[\w-]+)_prepared_value':
        description: |
          Same as '(?<nutrient>[\w-]+)_value', for the prepared product (not as sold).
        type: number
        readOnly: true

  #TODO: migrated on product_nutriscore.yaml (if *_ratio fields are not available anymore, remove this)
  nutriscore_data:
    description: |
      Detail of data the Nutri-Score was computed upon.

      **Note**: this might not be stable, don't rely too much on this, or, at least, tell us !

      **TODO** document each property
    type: object
    properties:
      # **TODO** "*_ratio" are still available?
      saturated_fat_ratio:
        type: number
      saturated_fat_ratio_points:
        type: integer
      saturated_fat_ratio_value:
        type: number
  nutrition_grade_fr:
    type: string
    description: |
      Nutrition grade (‚Äòa‚Äô to ‚Äòe‚Äô),
      https://world.openfoodfacts.org/nutriscore.
  nutrition_grades:
    description: |
      Nutrition grades as a comma separated list.

      Some products with multiple components might have multiple Nutri-Score
    type: string
  nutrition_grades_tags:
    type: array
    items:
      type: string
  nutrition_score_beverage:
    type: integer
  nutrition_score_warning_fruits_vegetables_nuts_estimate_from_ingredients:
    type: integer
  nutrition_score_warning_fruits_vegetables_nuts_estimate_from_ingredients_value:
    type: integer
  nutrition_score_warning_no_fiber:
    type: integer
  other_nutritional_substances_tags:
    type: array
    items:
      type: object
  unknown_nutrients_tags:
    type: array
    items:
      type: object
  vitamins_tags:
    type: array
    items:
      type: object
