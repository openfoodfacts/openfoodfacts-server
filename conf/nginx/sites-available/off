# Default server configuration - nginx_status
#
server {
	listen 80 default_server;
	listen [::]:80 default_server;
	server_name _;

	# nginx_status configuration, need for Munin
	location /nginx_status {
			stub_status on;
			access_log   off;
			allow all;
	}
}

# map to decide if we go to the priority (8002) or standard service (8001)
map $uri $apache_port {
	default 8001;

	# home pages
	"~*^/$" 8002;
	# product read / write (note that nginx does not support direct utf-8)
	"~*^/(mountaj|m\xc9\x99hsul|\xd0\xbf\xd1\x80\xd0\xbe\xd0\xb4\xd1\x83\xd0\xba\xd1\x82|gynnyrch|produkt|product|product|product|produkto|producto|toode|produkto|produit|produto|term\xc3\xa9k|produk|\xe8\xa3\xbd\xe5\x93\x81|afaris|\xd3\xa9\xd0\xbd\xd1\x96\xd0\xbc|\xec\x83\x9d\xec\x84\xb1\xeb\xac\xbc|berhem|\xe0\xa4\x89\xe0\xa4\xa4\xe0\xa5\x8d\xe0\xa4\xaa\xe0\xa4\xbe\xe0\xa4\xa6\xe0\xa4\xa8|produk|produkt|\xe0\xa4\x89\xe0\xa4\xa4\xe0\xa5\x8d\xe0\xa4\xaa\xe0\xa4\xbe\xe0\xa4\xa6\xe0\xa4\xa8|product|product|product|produkt|produkt|produit|produto|produto|produto|\xd0\xbf\xd1\x80\xd0\xbe\xd0\xb4\xd1\x83\xd0\xba\xd1\x82|product|proizvod|produkto|\xc3\xbcr\xc3\xbcn|\xd0\xbf\xd1\x80\xd0\xbe\xd0\xb4\xd1\x83\xd0\xba\xd1\x82|\xe4\xba\xa7\xe5\x93\x81|\xe7\x94\xa2\xe5\x93\x81|\xe7\x94\xa2\xe5\x93\x81)/" 8002;
	"~*^/cgi/product.pl" 8002;
	# product API read / write
	"~*^/api/v./product/" 8002;
        # whitelist most cgi (but display and search)
        "~*^/cgi/(?!display\.pl|search\.pl)" 8002;
        # whitelist most api (but search)
        "~*^/api/v./(?!search\b)" 8002;
}

# variables definitions for expiry headers are loaded from /etc/nginx/conf.d/expires-no-json-xml.conf

server {

	listen 80;
	listen [::]:80;

	# Product Opener needs a root domain + a wildcard for all subdomains
	server_name openfoodfacts.org *.openfoodfacts.org;

	root /srv/off/html;

	# enable large uploads
	client_max_body_size 20M;
	client_body_timeout 120s;
	client_header_timeout 120s;

	# logs location: default is static-off, will be changed to proxy-off
	# for requests passed to Apache
	access_log /var/log/nginx/static-off-access.log proxied_requests buffer=256K flush=1s;
	error_log /var/log/nginx/static-off-error.log;

	# some redirection for specific subdomains
	include snippets/off.domain-redirects.include;

	gzip on;
	gzip_min_length 1000;
	gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript text/csv;

	index index.html index.htm index.nginx-debian.html;

	location ~ ^/images/products/ {
        # 2024/10/03 - temporary redirects as we changed the path of images
        # for barcodes that are 8 digits or less
        rewrite ^/images/products/(....)/([^/]*)$ /images/products/000/000/000/$1/$2 break;
        rewrite ^/images/products/(.)(....)/([^/]*)$ /images/products/000/000/00$1/$2/$3 break;
        rewrite ^/images/products/(..)(....)/([^/]*)$ /images/products/000/000/0$1/$2/$3 break;
        rewrite ^/images/products/(...)(....)/([^/]*)$ /images/products/000/000/$1/$2/$3 break;
        rewrite ^/images/products/(.)(...)(....)/([^/]*)$ /images/products/000/00$1/$2/$3/$4 break;
        rewrite ^/images/products/(..)(...)(....)/([^/]*)$ /images/products/000/0$1/$2/$3/$4 break;
		
		include snippets/off.cors-headers.include;
		include snippets/expiry-headers.include;
		add_header Link "<http://creativecommons.org/licenses/by-sa/3.0/>; rel='license'; title='CC-BY-SA 3.0'";
		# optimize gzip compressed content (like OCR .json stored next to .jpg files)
		gzip_static always;
		gunzip on;
	}

	# Add an HTTP 302 redirect to AWS S3 bucket for specific dump files
	location = /data/openfoodfacts_recent_changes.jsonl.gz {
		return 302 https://openfoodfacts-ds.s3.eu-west-3.amazonaws.com/openfoodfacts_recent_changes.jsonl.gz;
	}
	location = /data/openfoodfacts-mongodbdump.gz {
		return 302 https://openfoodfacts-ds.s3.eu-west-3.amazonaws.com/openfoodfacts-mongodbdump.gz;
	}
	location = /data/openfoodfacts-products.jsonl.gz {
		return 302 https://openfoodfacts-ds.s3.eu-west-3.amazonaws.com/openfoodfacts-products.jsonl.gz;
	}
	location = /data/en.openfoodfacts.org.products.csv {
		return 302 https://openfoodfacts-ds.s3.eu-west-3.amazonaws.com/en.openfoodfacts.org.products.csv;
	}
	location = /data/en.openfoodfacts.org.products.csv.gz {
		return 302 https://openfoodfacts-ds.s3.eu-west-3.amazonaws.com/en.openfoodfacts.org.products.csv.gz;
	}
	location = /data/fr.openfoodfacts.org.products.csv {
		return 302 https://openfoodfacts-ds.s3.eu-west-3.amazonaws.com/fr.openfoodfacts.org.products.csv;
	}
	location = /data/fr.openfoodfacts.org.products.csv.gz {
		return 302 https://openfoodfacts-ds.s3.eu-west-3.amazonaws.com/fr.openfoodfacts.org.products.csv.gz;
	}

	# the app requests /1.json to get the product count...
	# the commented code below is to serve a static copy
	# if there is a spike of installs
	location ~ ^/1.json$ {
			root /srv/off/html/static;
	try_files /1.json = 404;
	}

	# Static files are served directly by NGINX

	location ~ ^/(favicon.ico) {
		# First attempt to serve request as file, then
		# as directory, then fall back to displaying a 404.
		try_files $uri $uri/ =404;
	}

	# Static files are served directly by NGINX
	location ~ ^/(.well-known|files|data|exports|dump)/ {
		include snippets/off.cors-headers.include;
		include snippets/expiry-headers.include;
		# First attempt to serve request from resource, then as file,
		# then as directory, then fall back to displaying a 404.
		try_files resources/$uri $uri $uri/ =404;
		gzip_static always;
		gunzip on;
	}
	location ~ ^/(images|fonts|css|js|donate|resources)/ {
		include snippets/off.cors-headers.include;
		include snippets/expiry-headers.include;
		# First attempt to serve request as file, off_web_html acting as an override,
		# then as directory, then fall back to displaying a 404.
		try_files /off_web_html$uri $uri $uri/ =404;
		gzip_static always;
		gunzip on;
	}

	# Redirect to the change password form
	location = /.well-known/change-password {
		return 307 https://$host/cgi/change_password.pl;
	}

	# GoogleAssociationService made 2500 requests/min to assetlinks.json
	# and much less when caching headers are sent
	location = /.well-known/assetlinks.json {
		include snippets/off.cors-headers.include;
		include snippets/expiry-headers.include;
		try_files $uri =404;
	}

	include snippets/off.locations-redirects.include;

	# Dynamically generated files and CGI scripts are passed
	# to the Apache + mod_perl server running on a different
	# port than port 80 (e.g. 8001)

	location / {
		proxy_set_header Host $host;
		# recursive hosts as we are proxying behind a proxy
		set_real_ip_from 10.0.0.0/8;
		real_ip_recursive on;
		access_log /var/log/nginx/proxy-off-access.log proxied_requests buffer=256K flush=1s;
		error_log /var/log/nginx/proxy-off-error.log;
		# Note: as soon as we use a variable in proxy_pass, $uri and the rest must be explicit
		proxy_pass http://127.0.0.1:$apache_port/cgi/display.pl?$uri$is_args$args;
	}

	location /cgi/ {
		proxy_set_header Host $host;
		# recursive hosts as we are proxying behind a proxy
		set_real_ip_from 10.0.0.0/8;
		real_ip_recursive on;
		access_log /var/log/nginx/proxy-off-access.log proxied_requests buffer=256K flush=1s;
		error_log /var/log/nginx/proxy-off-error.log;
		# Note: as soon as we use a variable in proxy_pass, $uri and the rest must be explicit
		proxy_pass http://127.0.0.1:$apache_port$uri$is_args$args;
	}
}

