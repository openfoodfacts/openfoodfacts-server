# This file is part of Product Opener.
#
# Product Opener
# Copyright (C) 2011-2020 Association Open Food Facts
# Contact: contact@openfoodfacts.org
# Address: 21 rue des Iles, 94100 Saint-Maur des Foss√©s, France
#
# Product Opener is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

=head1 NAME

ProductOpener::APITest - utility functions to interact with API

=head1 DESCRIPTION

=cut

package ProductOpener::APITest;

use ProductOpener::PerlStandards;
use Exporter qw< import >;

BEGIN {
	use vars qw(@ISA @EXPORT_OK %EXPORT_TAGS);
	@EXPORT_OK = qw(
	  &create_user
	  &new_client
	  &wait_dynamic_front
	  &edit_product
	  &construct_test_url
	);    # symbols to export on request
	%EXPORT_TAGS = (all => [@EXPORT_OK]);
}

use vars @EXPORT_OK;

use Test::More;
use LWP::UserAgent;
use HTTP::CookieJar::LWP;
use ProductOpener::TestDefaults qw/:all/;

use Data::Dump qw/dump/;

=head2 wait_dynamic_front()

Wait for dynamic_front to be ready.
It's important because the application might fail because of that

=cut

sub wait_dynamic_front() {

	# simply try to access a resource generated by dynamicfront
	my $count = 0;
	while (1) {
		last if (-e "/opt/product-opener/html/images/icons/dist/barcode.svg");
		sleep 1;
		$count++;
		if (($count % 3) == 0) {
			print("Waiting for dynamicfront to be ready since $count seconds...\n");
		}
	}
	return;
}

=head2 new_client()

Reset user agent

=head3 return value

Return a user agent

=cut

sub new_client () {
	my $jar = HTTP::CookieJar::LWP->new;
	my $ua = LWP::UserAgent->new(cookie_jar => $jar);
	return $ua;
}

=head2 create_user($ua, $args_ref)

Call API to create a user

=head3 Arguments

=head4 $ua - user agent

=head4 $args_ref - optional args to override defaults

=cut

sub create_user ($ua, $args_ref) {
	my %fields;
	while (my ($key, $value) = each %{$args_ref}) {
		$fields{$key} = $value;
	}
	my $response = $ua->post("http://world.openfoodfacts.localhost/cgi/user.pl", Content => \%fields,);
	if (not $response->is_success) {
		diag("Couldn't create user with " . dump(\%fields) . "\n");
		diag explain $response;
		die("Resuming");
	}
	return;
}

=head2 edit_product($ua, $product_fields_ref)

Call the API to edit a product. If the product does not exist, it will be created.

=head3 Arguments

=head4 $ua - user agent

=head4 $product_fields_ref

Reference of a hash of product fields to pass to the API

=cut

sub edit_product ($ua, $product_fields) {
	my %fields;
	while (my ($key, $value) = each %{$product_fields}) {
		$fields{$key} = $value;
	}

	my $response = $ua->post("http://world.openfoodfacts.localhost/cgi/product_jqm2.pl", Content => \%fields,);
	if (not $response->is_success) {
		diag("Couldn't create product with " . dump(\%fields) . "\n");
		diag explain $response;
		die("Resuming");
	}
	return;
}

=head2 construct_test_url()

Constructs the URL to send the HTTP request to for the API.

=head3 Arguments

Takes in two string arguments, One being the the target and other a prefix. 
The prefix could be simply the country code (eg: US for America or "World") OR something like ( {country-code}-{language-code} )

An example below
$target = "/product/35242200055"
$prefix= "world-fr"  

=head3 Return Value

Returns the constructed URL for the query 

For the example cited above this returns: "http://world-fr.openfoodfacts.localhost/product/35242200055"

=cut

sub construct_test_url ($target, $prefix) {
	my $link = "openfoodfacts.localhost";
	# my $api_end = "/api/v2/search?";
	my $api_end = "api/v2";

	if (index($target, $api_end) != -1) {
		$link .= "/cgi/display.pl?";
	}

	my $url = "http://${prefix}.${link}${target}";
	return $url;
}

1;
