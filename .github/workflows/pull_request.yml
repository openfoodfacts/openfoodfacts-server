name: Pull Request checks

on:
  pull_request:
    # we can't do that, because status are required
    # see https://stackoverflow.com/questions/66751567/return-passing-status-on-github-workflow-when-using-paths-ignore
    # paths-ignore:
    #   - "**.md"
    #   - ".github/CODEOWNERS"
    #   - ".github/PULL_REQUEST_TEMPLATE.md"
    #   - ".editorconfig"
  push:
    branches:
    - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  filter:
    name: "Filter changed paths"
    runs-on: ubuntu-latest
    outputs:
      code_modified: ${{ steps.filter.outputs.code_modified }}
      docker_modified: ${{ steps.filter.outputs.docker_modified }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Get changed files
        uses: tj-actions/changed-files@v45
        id: changed_files
      - name: Filter non-markdown and non-docs files & Check if Docker-related files changed
        id: filter
        run: ./.github/scripts/path-filter.sh "${{ steps.changed_files.outputs.all_changed_files }}" && ./.github/scripts/docker-modification.sh "${{ steps.changed_files.outputs.all_changed_files }}"

  lint:
    name: üïµÔ∏è‚Äç‚ôÄÔ∏è NPM lint
    needs: filter
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && needs.filter.outputs.code_modified == 'true'
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 1
    - uses: actions/setup-node@v4
      with:
        node-version: '22.x'
    - name: Cache node modules
      uses: actions/cache@v4
      with:
        path: node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    - name: gulp build
      run: make front_build
    - name: lint
      run: make front_lint

  # this will build the docker image and upload as an artifact for following jobs
  build_backend:
    name: üèó Build backend dev image for tests
    needs: filter
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && needs.filter.outputs.code_modified == 'true'
    steps:
    - uses: actions/checkout@v4
      with:
        # needs depth to run git log below
        fetch-depth: 50
    - uses: actions/cache@v4
      id: cache
      with:
        path: ./build-cache
        key: taxonomies-${{ hashFiles('taxonomies/**') }}
        restore-keys: taxonomies-
    - name: Build Docker image if needed
      if: needs.filter.outputs.docker_modified == 'true'
      run: make build container=backend
    - name: Pull Doker image form main branch
      if: needs.filter.outputs.docker_modified != 'true'
      run: |
        docker pull ghcr.io/openfoodfacts/openfoodfacts-server/backend:main || true
        docker tag ghcr.io/openfoodfacts/openfoodfacts-server/backend:main openfoodfacts-server/backend:dev || make build container=backend
    - name: push backend image as artifact
      uses: ishworkh/container-image-artifact-upload@v2.0.0
      with:
        image: "openfoodfacts-server/backend:dev"
    - name: Setup Git and Restore Taxonomies
      run: ./.github/scripts/setup_git.sh
    - name: Rebuild taxonomies for Open Food Facts (off)
      run: make TAG="main" DOCKER_LOCAL_DATA="$(pwd)" build_taxonomies GITHUB_TOKEN="${{ secrets.TAXONOMY_CACHE_GITHUB_TOKEN }}"
    - name: Rebuild taxonomies for Open Beauty Facts (obf)
      run: |
        source env/setenv.sh obf
        make DOCKER_LOCAL_DATA="$(pwd)" build_taxonomies GITHUB_TOKEN="${{ secrets.TAXONOMY_CACHE_GITHUB_TOKEN }}"
    - name: Rebuild taxonomies for Open Products Facts (opf)
      run: |
        source env/setenv.sh opf
        make DOCKER_LOCAL_DATA="$(pwd)" build_taxonomies GITHUB_TOKEN="${{ secrets.TAXONOMY_CACHE_GITHUB_TOKEN }}"
    - name: Rebuild taxonomies for Open Pet Food Facts (opff)
      run: |
        source env/setenv.sh opff
        make DOCKER_LOCAL_DATA="$(pwd)" build_taxonomies GITHUB_TOKEN="${{ secrets.TAXONOMY_CACHE_GITHUB_TOKEN }}"

  check_perl:
    name: üê™ Check Perl
    needs: [filter, build_backend]
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && needs.filter.outputs.code_modified == 'true'
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 1
    - name: Setup Git and Restore Taxonomies
      run: ./.github/scripts/setup_git.sh
    - uses: actions/cache/restore@v4
      id: cache
      with:
        path: ./build-cache
        key: taxonomies-${{ hashFiles('taxonomies/**') }}
        restore-keys: taxonomies-
    - name: Download backend image from artifacts
      id: downloadbackendimage
      uses: ishworkh/container-image-artifact-download@v2.0.0
      with:
        image: "openfoodfacts-server/backend:dev"
    # downloadbackendimage task loads the image into docker and keeps the original file.
    # As our runs tend to hit the storage limits for GitHub Actions, manually delete the
    # downloaded file for now. It's not needed after being loaded into docker.
    - name: Remove downloaded image
      env:
        FILE: "${{ steps.downloadbackendimage.outputs.download_path }}"
      run: rm $FILE
    - name: Fix file permissions
      run: sudo chown -R $(id -u):$(id -g) .
    - name: Setup directory permissions for Pulled Docker image
      if: needs.filter.outputs.docker_modified != 'true'
      run: |
        mkdir -p lib/ProductOpener html/dump html/exports html/files
        sudo chmod -R 777 lib/ProductOpener html/dump html/exports html/files
        echo "DOCKER_UID=$(id -u):$(id -g)" >> $GITHUB_ENV
    - name: build taxonomies (should use cache)
      run: make DOCKER_OPTS="-u 0" DOCKER_LOCAL_DATA="$(pwd)" build_taxonomies GITHUB_TOKEN="${{ secrets.TAXONOMY_CACHE_GITHUB_TOKEN }}"
    - name: check taxonomies
      run: make check_taxonomies
    - name: check perltidy
      run: make check_perltidy
    - name: check perlcritic
      run: make check_critic
    - name: check perl
      run: make check_perl

  tests:
    name: üê™ Perl Tests
    needs: [filter, build_backend]
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && needs.filter.outputs.code_modified == 'true'
    # strategy is used to run unit and integration tests in parallel
    strategy:
      fail-fast: false
      matrix:
        test-type: [unit, integration]
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 1
    - uses: actions/cache/restore@v4
      id: cache
      with:
        path: ./build-cache
        key: taxonomies-${{ hashFiles('taxonomies/**') }}
        restore-keys: taxonomies-
    - name: Setup Git and Restore Taxonomies
      run: ./.github/scripts/setup_git.sh
    - name: Download backend image from artifacts
      id: downloadbackendimage
      uses: ishworkh/container-image-artifact-download@v2.0.0
      with:
        image: "openfoodfacts-server/backend:dev"       
    # downloadbackendimage task loads the image into docker and keeps the original file.
    # As our runs tend to hit the storage limits for GitHub Actions, manually delete the
    # downloaded file for now. It's not needed after being loaded into docker.
    - name: Remove downloaded image
      env:
        FILE: "${{ steps.downloadbackendimage.outputs.download_path }}"
      run: rm $FILE
    - name: Setup directory permissions for Pulled Docker image
      if: needs.filter.outputs.docker_modified != 'true'
      run: |
        mkdir -p lib/ProductOpener html/dump html/exports html/files
        # Ensure Docker container can write to these directories
        chmod -R 777 lib/ProductOpener html/dump html/exports html/files
    - name: Build taxonomies for tests
      run: make DOCKER_LOCAL_DATA="$(pwd)" build_taxonomies_test GITHUB_TOKEN="${{ secrets.TAXONOMY_CACHE_GITHUB_TOKEN }}"
    - name: Build language files for tests
      run: make DOCKER_LOCAL_DATA="$(pwd)" build_lang_test GITHUB_TOKEN="${{ secrets.TAXONOMY_CACHE_GITHUB_TOKEN }}"
    - name: Run ${{ matrix.test-type }} tests
      run: |
        make codecov_prepare
        make DOCKER_OPTS="-u 0" COVER_OPTS='-e HARNESS_PERL_SWITCHES="-MDevel::Cover=+ignore,tests/"' DOCKER_LOCAL_DATA="$(pwd)" ${{ matrix.test-type }}_test GITHUB_TOKEN="${{ secrets.TAXONOMY_CACHE_GITHUB_TOKEN }}"
    - name: generate coverage results
      # even if tests failed
      if: always()
      run: |
        make coverage_txt
        make codecov
    - uses: codecov/codecov-action@v5
      if: always()
      with:
        files: cover_db/codecov.json
        token: ${{ secrets.CODECOV_TOKEN }}
    - name: Upload test results to Codecov
      if: ${{ !cancelled() }}
      uses: codecov/test-results-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./tests/${{ matrix.test-type }}/outputs/junit.xml

  tests_dev:
    name: üß™ Test make dev
    needs: [filter, build_backend]  # build_backend - only to avoid building taxonomies
    if: github.event_name == 'pull_request' && needs.filter.outputs.code_modified == 'true'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 50 # We need depth to get more history
        ref: ${{ github.event.pull_request.head.sha }}  # Ensure correct branch checkout
    - uses: actions/cache/restore@v4
      id: cache
      with:
        path: ./build-cache
        key: taxonomies-${{ hashFiles('taxonomies/**') }}
        restore-keys: taxonomies-
    - name: Download backend image from artifacts
      id: downloadbackendimage
      uses: ishworkh/container-image-artifact-download@v2.0.0
      with:
        image: "openfoodfacts-server/backend:dev"
    # downloadbackendimage task loads the image into docker and keeps the original file.
    # As our runs tend to hit the storage limits for GitHub Actions, manually delete the
    # downloaded file for now. It's not needed after being loaded into docker.
    - name: Remove downloaded image
      env:
        FILE: "${{ steps.downloadbackendimage.outputs.download_path }}"
      run: rm $FILE
    - name: Setup directory permissions for Pulled Docker image
      if: needs.filter.outputs.docker_modified != 'true'
      run: |
        mkdir -p lib/ProductOpener html/dump html/exports html/files
        # Ensure Docker container can write to these directories
        chmod -R 777 lib/ProductOpener html/dump html/exports html/files
    - name: set right UID and GID in .envrc
      run: |
        rm -f .envrc
        echo "export USER_UID=$(id -u)" >> .envrc
        echo "export USER_GID=$(id -g)" >> .envrc
    - name: Test make dev
      run: |
        make DOCKER_OPTS="-u 0" DOCKER_LOCAL_DATA="$(pwd)" SKIP_SAMPLE_IMAGES=1 dev_no_build
        make status
    - name: Test all is running
      run: make livecheck || ( tail -n 300 logs/apache2/*error*log; docker compose logs; false )
    - name: test clean
      run: make hdown

  test_deployment:
    name: ü¶æ Some test of deployment tools
    needs: filter
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && needs.filter.outputs.code_modified == 'true'
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 1
    - name: verify apache2 envvars is correct
      run: |
        env/setenv.sh off;
        sh -c ". conf/apache-2.4/off-envvars"
        sh -c "APACHE_CONFDIR=/etc/apache2-priority; . conf/apache-2.4/off-envvars"
