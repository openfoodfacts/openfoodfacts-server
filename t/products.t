#!/usr/bin/perl -w

use Modern::Perl '2012';

use Test::More;
use Log::Any::Adapter 'TAP';

use ProductOpener::Products qw/:all/;

# code normalization
is( normalize_code('036000291452'), '0036000291452', 'should add leading 0 to valid UPC12' );
is( normalize_code('036000291455'), '036000291455', 'should not add 0 to invalid UPC12, just return as-is' );
is( normalize_code('4015533014963'), '4015533014963', 'should just return invalid EAN13' );
ok( !(defined normalize_code(undef)), 'undef should stay undef' );
is( normalize_code(' just a simple test 4015533014963 here we go '), '4015533014963', 'barcode should always be cleaned from anything but digits' );
is( normalize_code(' just a simple test 036000291452 here we go '), '0036000291452', 'should add leading 0 to cleaned valid UPC12' );
is( normalize_code(' just a simple test 036000291455 here we go '), '036000291455', 'should not add leading 0 to cleaned invalid UPC12' );

# product storage path
is( product_path('not a real code'), 'invalid', 'non digit code should return "invalid"' );
is( product_path('0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789'), 'invalid', 'long code should return "invalid"' );
is( product_path('4015533014963'), '401/553/301/4963', 'code should be split in four parts' );

done_testing();
